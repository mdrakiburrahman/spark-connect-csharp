// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: spark/connect/catalog.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spark.Connect {

  /// <summary>Holder for reflection information generated from spark/connect/catalog.proto</summary>
  public static partial class CatalogReflection {

    #region Descriptor
    /// <summary>File descriptor for spark/connect/catalog.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CatalogReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtzcGFyay9jb25uZWN0L2NhdGFsb2cucHJvdG8SDXNwYXJrLmNvbm5lY3Qa",
            "GXNwYXJrL2Nvbm5lY3QvdHlwZXMucHJvdG8ixAsKB0NhdGFsb2cSOgoQY3Vy",
            "cmVudF9kYXRhYmFzZRgBIAEoCzIeLnNwYXJrLmNvbm5lY3QuQ3VycmVudERh",
            "dGFiYXNlSAASQQoUc2V0X2N1cnJlbnRfZGF0YWJhc2UYAiABKAsyIS5zcGFy",
            "ay5jb25uZWN0LlNldEN1cnJlbnREYXRhYmFzZUgAEjYKDmxpc3RfZGF0YWJh",
            "c2VzGAMgASgLMhwuc3BhcmsuY29ubmVjdC5MaXN0RGF0YWJhc2VzSAASMAoL",
            "bGlzdF90YWJsZXMYBCABKAsyGS5zcGFyay5jb25uZWN0Lkxpc3RUYWJsZXNI",
            "ABI2Cg5saXN0X2Z1bmN0aW9ucxgFIAEoCzIcLnNwYXJrLmNvbm5lY3QuTGlz",
            "dEZ1bmN0aW9uc0gAEjIKDGxpc3RfY29sdW1ucxgGIAEoCzIaLnNwYXJrLmNv",
            "bm5lY3QuTGlzdENvbHVtbnNIABIyCgxnZXRfZGF0YWJhc2UYByABKAsyGi5z",
            "cGFyay5jb25uZWN0LkdldERhdGFiYXNlSAASLAoJZ2V0X3RhYmxlGAggASgL",
            "Mhcuc3BhcmsuY29ubmVjdC5HZXRUYWJsZUgAEjIKDGdldF9mdW5jdGlvbhgJ",
            "IAEoCzIaLnNwYXJrLmNvbm5lY3QuR2V0RnVuY3Rpb25IABI4Cg9kYXRhYmFz",
            "ZV9leGlzdHMYCiABKAsyHS5zcGFyay5jb25uZWN0LkRhdGFiYXNlRXhpc3Rz",
            "SAASMgoMdGFibGVfZXhpc3RzGAsgASgLMhouc3BhcmsuY29ubmVjdC5UYWJs",
            "ZUV4aXN0c0gAEjgKD2Z1bmN0aW9uX2V4aXN0cxgMIAEoCzIdLnNwYXJrLmNv",
            "bm5lY3QuRnVuY3Rpb25FeGlzdHNIABJDChVjcmVhdGVfZXh0ZXJuYWxfdGFi",
            "bGUYDSABKAsyIi5zcGFyay5jb25uZWN0LkNyZWF0ZUV4dGVybmFsVGFibGVI",
            "ABIyCgxjcmVhdGVfdGFibGUYDiABKAsyGi5zcGFyay5jb25uZWN0LkNyZWF0",
            "ZVRhYmxlSAASNQoOZHJvcF90ZW1wX3ZpZXcYDyABKAsyGy5zcGFyay5jb25u",
            "ZWN0LkRyb3BUZW1wVmlld0gAEkIKFWRyb3BfZ2xvYmFsX3RlbXBfdmlldxgQ",
            "IAEoCzIhLnNwYXJrLmNvbm5lY3QuRHJvcEdsb2JhbFRlbXBWaWV3SAASPgoS",
            "cmVjb3Zlcl9wYXJ0aXRpb25zGBEgASgLMiAuc3BhcmsuY29ubmVjdC5SZWNv",
            "dmVyUGFydGl0aW9uc0gAEiwKCWlzX2NhY2hlZBgSIAEoCzIXLnNwYXJrLmNv",
            "bm5lY3QuSXNDYWNoZWRIABIwCgtjYWNoZV90YWJsZRgTIAEoCzIZLnNwYXJr",
            "LmNvbm5lY3QuQ2FjaGVUYWJsZUgAEjQKDXVuY2FjaGVfdGFibGUYFCABKAsy",
            "Gy5zcGFyay5jb25uZWN0LlVuY2FjaGVUYWJsZUgAEjAKC2NsZWFyX2NhY2hl",
            "GBUgASgLMhkuc3BhcmsuY29ubmVjdC5DbGVhckNhY2hlSAASNAoNcmVmcmVz",
            "aF90YWJsZRgWIAEoCzIbLnNwYXJrLmNvbm5lY3QuUmVmcmVzaFRhYmxlSAAS",
            "NwoPcmVmcmVzaF9ieV9wYXRoGBcgASgLMhwuc3BhcmsuY29ubmVjdC5SZWZy",
            "ZXNoQnlQYXRoSAASOAoPY3VycmVudF9jYXRhbG9nGBggASgLMh0uc3Bhcmsu",
            "Y29ubmVjdC5DdXJyZW50Q2F0YWxvZ0gAEj8KE3NldF9jdXJyZW50X2NhdGFs",
            "b2cYGSABKAsyIC5zcGFyay5jb25uZWN0LlNldEN1cnJlbnRDYXRhbG9nSAAS",
            "NAoNbGlzdF9jYXRhbG9ncxgaIAEoCzIbLnNwYXJrLmNvbm5lY3QuTGlzdENh",
            "dGFsb2dzSABCCgoIY2F0X3R5cGUiEQoPQ3VycmVudERhdGFiYXNlIiUKElNl",
            "dEN1cnJlbnREYXRhYmFzZRIPCgdkYl9uYW1lGAEgASgJIg8KDUxpc3REYXRh",
            "YmFzZXMiLgoKTGlzdFRhYmxlcxIUCgdkYl9uYW1lGAEgASgJSACIAQFCCgoI",
            "X2RiX25hbWUiMQoNTGlzdEZ1bmN0aW9ucxIUCgdkYl9uYW1lGAEgASgJSACI",
            "AQFCCgoIX2RiX25hbWUiQwoLTGlzdENvbHVtbnMSEgoKdGFibGVfbmFtZRgB",
            "IAEoCRIUCgdkYl9uYW1lGAIgASgJSACIAQFCCgoIX2RiX25hbWUiHgoLR2V0",
            "RGF0YWJhc2USDwoHZGJfbmFtZRgBIAEoCSJACghHZXRUYWJsZRISCgp0YWJs",
            "ZV9uYW1lGAEgASgJEhQKB2RiX25hbWUYAiABKAlIAIgBAUIKCghfZGJfbmFt",
            "ZSJGCgtHZXRGdW5jdGlvbhIVCg1mdW5jdGlvbl9uYW1lGAEgASgJEhQKB2Ri",
            "X25hbWUYAiABKAlIAIgBAUIKCghfZGJfbmFtZSIhCg5EYXRhYmFzZUV4aXN0",
            "cxIPCgdkYl9uYW1lGAEgASgJIkMKC1RhYmxlRXhpc3RzEhIKCnRhYmxlX25h",
            "bWUYASABKAkSFAoHZGJfbmFtZRgCIAEoCUgAiAEBQgoKCF9kYl9uYW1lIkkK",
            "DkZ1bmN0aW9uRXhpc3RzEhUKDWZ1bmN0aW9uX25hbWUYASABKAkSFAoHZGJf",
            "bmFtZRgCIAEoCUgAiAEBQgoKCF9kYl9uYW1lIpACChNDcmVhdGVFeHRlcm5h",
            "bFRhYmxlEhIKCnRhYmxlX25hbWUYASABKAkSEQoEcGF0aBgCIAEoCUgAiAEB",
            "EhMKBnNvdXJjZRgDIAEoCUgBiAEBEiwKBnNjaGVtYRgEIAEoCzIXLnNwYXJr",
            "LmNvbm5lY3QuRGF0YVR5cGVIAogBARJACgdvcHRpb25zGAUgAygLMi8uc3Bh",
            "cmsuY29ubmVjdC5DcmVhdGVFeHRlcm5hbFRhYmxlLk9wdGlvbnNFbnRyeRou",
            "CgxPcHRpb25zRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4",
            "AUIHCgVfcGF0aEIJCgdfc291cmNlQgkKB19zY2hlbWEiqgIKC0NyZWF0ZVRh",
            "YmxlEhIKCnRhYmxlX25hbWUYASABKAkSEQoEcGF0aBgCIAEoCUgAiAEBEhMK",
            "BnNvdXJjZRgDIAEoCUgBiAEBEhgKC2Rlc2NyaXB0aW9uGAQgASgJSAKIAQES",
            "LAoGc2NoZW1hGAUgASgLMhcuc3BhcmsuY29ubmVjdC5EYXRhVHlwZUgDiAEB",
            "EjgKB29wdGlvbnMYBiADKAsyJy5zcGFyay5jb25uZWN0LkNyZWF0ZVRhYmxl",
            "Lk9wdGlvbnNFbnRyeRouCgxPcHRpb25zRW50cnkSCwoDa2V5GAEgASgJEg0K",
            "BXZhbHVlGAIgASgJOgI4AUIHCgVfcGF0aEIJCgdfc291cmNlQg4KDF9kZXNj",
            "cmlwdGlvbkIJCgdfc2NoZW1hIiEKDERyb3BUZW1wVmlldxIRCgl2aWV3X25h",
            "bWUYASABKAkiJwoSRHJvcEdsb2JhbFRlbXBWaWV3EhEKCXZpZXdfbmFtZRgB",
            "IAEoCSInChFSZWNvdmVyUGFydGl0aW9ucxISCgp0YWJsZV9uYW1lGAEgASgJ",
            "Ih4KCElzQ2FjaGVkEhIKCnRhYmxlX25hbWUYASABKAkiIAoKQ2FjaGVUYWJs",
            "ZRISCgp0YWJsZV9uYW1lGAEgASgJIiIKDFVuY2FjaGVUYWJsZRISCgp0YWJs",
            "ZV9uYW1lGAEgASgJIgwKCkNsZWFyQ2FjaGUiIgoMUmVmcmVzaFRhYmxlEhIK",
            "CnRhYmxlX25hbWUYASABKAkiHQoNUmVmcmVzaEJ5UGF0aBIMCgRwYXRoGAEg",
            "ASgJIhAKDkN1cnJlbnRDYXRhbG9nIikKEVNldEN1cnJlbnRDYXRhbG9nEhQK",
            "DGNhdGFsb2dfbmFtZRgBIAEoCSIOCgxMaXN0Q2F0YWxvZ3NCIgoeb3JnLmFw",
            "YWNoZS5zcGFyay5jb25uZWN0LnByb3RvUAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Spark.Connect.TypesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Catalog), global::Spark.Connect.Catalog.Parser, new[]{ "CurrentDatabase", "SetCurrentDatabase", "ListDatabases", "ListTables", "ListFunctions", "ListColumns", "GetDatabase", "GetTable", "GetFunction", "DatabaseExists", "TableExists", "FunctionExists", "CreateExternalTable", "CreateTable", "DropTempView", "DropGlobalTempView", "RecoverPartitions", "IsCached", "CacheTable", "UncacheTable", "ClearCache", "RefreshTable", "RefreshByPath", "CurrentCatalog", "SetCurrentCatalog", "ListCatalogs" }, new[]{ "CatType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.CurrentDatabase), global::Spark.Connect.CurrentDatabase.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.SetCurrentDatabase), global::Spark.Connect.SetCurrentDatabase.Parser, new[]{ "DbName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.ListDatabases), global::Spark.Connect.ListDatabases.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.ListTables), global::Spark.Connect.ListTables.Parser, new[]{ "DbName" }, new[]{ "DbName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.ListFunctions), global::Spark.Connect.ListFunctions.Parser, new[]{ "DbName" }, new[]{ "DbName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.ListColumns), global::Spark.Connect.ListColumns.Parser, new[]{ "TableName", "DbName" }, new[]{ "DbName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.GetDatabase), global::Spark.Connect.GetDatabase.Parser, new[]{ "DbName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.GetTable), global::Spark.Connect.GetTable.Parser, new[]{ "TableName", "DbName" }, new[]{ "DbName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.GetFunction), global::Spark.Connect.GetFunction.Parser, new[]{ "FunctionName", "DbName" }, new[]{ "DbName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.DatabaseExists), global::Spark.Connect.DatabaseExists.Parser, new[]{ "DbName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.TableExists), global::Spark.Connect.TableExists.Parser, new[]{ "TableName", "DbName" }, new[]{ "DbName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.FunctionExists), global::Spark.Connect.FunctionExists.Parser, new[]{ "FunctionName", "DbName" }, new[]{ "DbName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.CreateExternalTable), global::Spark.Connect.CreateExternalTable.Parser, new[]{ "TableName", "Path", "Source", "Schema", "Options" }, new[]{ "Path", "Source", "Schema" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.CreateTable), global::Spark.Connect.CreateTable.Parser, new[]{ "TableName", "Path", "Source", "Description", "Schema", "Options" }, new[]{ "Path", "Source", "Description", "Schema" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.DropTempView), global::Spark.Connect.DropTempView.Parser, new[]{ "ViewName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.DropGlobalTempView), global::Spark.Connect.DropGlobalTempView.Parser, new[]{ "ViewName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.RecoverPartitions), global::Spark.Connect.RecoverPartitions.Parser, new[]{ "TableName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.IsCached), global::Spark.Connect.IsCached.Parser, new[]{ "TableName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.CacheTable), global::Spark.Connect.CacheTable.Parser, new[]{ "TableName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.UncacheTable), global::Spark.Connect.UncacheTable.Parser, new[]{ "TableName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.ClearCache), global::Spark.Connect.ClearCache.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.RefreshTable), global::Spark.Connect.RefreshTable.Parser, new[]{ "TableName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.RefreshByPath), global::Spark.Connect.RefreshByPath.Parser, new[]{ "Path" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.CurrentCatalog), global::Spark.Connect.CurrentCatalog.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.SetCurrentCatalog), global::Spark.Connect.SetCurrentCatalog.Parser, new[]{ "CatalogName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.ListCatalogs), global::Spark.Connect.ListCatalogs.Parser, null, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Catalog messages are marked as unstable.
  /// </summary>
  public sealed partial class Catalog : pb::IMessage<Catalog>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Catalog> _parser = new pb::MessageParser<Catalog>(() => new Catalog());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Catalog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.CatalogReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Catalog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Catalog(Catalog other) : this() {
      switch (other.CatTypeCase) {
        case CatTypeOneofCase.CurrentDatabase:
          CurrentDatabase = other.CurrentDatabase.Clone();
          break;
        case CatTypeOneofCase.SetCurrentDatabase:
          SetCurrentDatabase = other.SetCurrentDatabase.Clone();
          break;
        case CatTypeOneofCase.ListDatabases:
          ListDatabases = other.ListDatabases.Clone();
          break;
        case CatTypeOneofCase.ListTables:
          ListTables = other.ListTables.Clone();
          break;
        case CatTypeOneofCase.ListFunctions:
          ListFunctions = other.ListFunctions.Clone();
          break;
        case CatTypeOneofCase.ListColumns:
          ListColumns = other.ListColumns.Clone();
          break;
        case CatTypeOneofCase.GetDatabase:
          GetDatabase = other.GetDatabase.Clone();
          break;
        case CatTypeOneofCase.GetTable:
          GetTable = other.GetTable.Clone();
          break;
        case CatTypeOneofCase.GetFunction:
          GetFunction = other.GetFunction.Clone();
          break;
        case CatTypeOneofCase.DatabaseExists:
          DatabaseExists = other.DatabaseExists.Clone();
          break;
        case CatTypeOneofCase.TableExists:
          TableExists = other.TableExists.Clone();
          break;
        case CatTypeOneofCase.FunctionExists:
          FunctionExists = other.FunctionExists.Clone();
          break;
        case CatTypeOneofCase.CreateExternalTable:
          CreateExternalTable = other.CreateExternalTable.Clone();
          break;
        case CatTypeOneofCase.CreateTable:
          CreateTable = other.CreateTable.Clone();
          break;
        case CatTypeOneofCase.DropTempView:
          DropTempView = other.DropTempView.Clone();
          break;
        case CatTypeOneofCase.DropGlobalTempView:
          DropGlobalTempView = other.DropGlobalTempView.Clone();
          break;
        case CatTypeOneofCase.RecoverPartitions:
          RecoverPartitions = other.RecoverPartitions.Clone();
          break;
        case CatTypeOneofCase.IsCached:
          IsCached = other.IsCached.Clone();
          break;
        case CatTypeOneofCase.CacheTable:
          CacheTable = other.CacheTable.Clone();
          break;
        case CatTypeOneofCase.UncacheTable:
          UncacheTable = other.UncacheTable.Clone();
          break;
        case CatTypeOneofCase.ClearCache:
          ClearCache = other.ClearCache.Clone();
          break;
        case CatTypeOneofCase.RefreshTable:
          RefreshTable = other.RefreshTable.Clone();
          break;
        case CatTypeOneofCase.RefreshByPath:
          RefreshByPath = other.RefreshByPath.Clone();
          break;
        case CatTypeOneofCase.CurrentCatalog:
          CurrentCatalog = other.CurrentCatalog.Clone();
          break;
        case CatTypeOneofCase.SetCurrentCatalog:
          SetCurrentCatalog = other.SetCurrentCatalog.Clone();
          break;
        case CatTypeOneofCase.ListCatalogs:
          ListCatalogs = other.ListCatalogs.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Catalog Clone() {
      return new Catalog(this);
    }

    /// <summary>Field number for the "current_database" field.</summary>
    public const int CurrentDatabaseFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.CurrentDatabase CurrentDatabase {
      get { return catTypeCase_ == CatTypeOneofCase.CurrentDatabase ? (global::Spark.Connect.CurrentDatabase) catType_ : null; }
      set {
        catType_ = value;
        catTypeCase_ = value == null ? CatTypeOneofCase.None : CatTypeOneofCase.CurrentDatabase;
      }
    }

    /// <summary>Field number for the "set_current_database" field.</summary>
    public const int SetCurrentDatabaseFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.SetCurrentDatabase SetCurrentDatabase {
      get { return catTypeCase_ == CatTypeOneofCase.SetCurrentDatabase ? (global::Spark.Connect.SetCurrentDatabase) catType_ : null; }
      set {
        catType_ = value;
        catTypeCase_ = value == null ? CatTypeOneofCase.None : CatTypeOneofCase.SetCurrentDatabase;
      }
    }

    /// <summary>Field number for the "list_databases" field.</summary>
    public const int ListDatabasesFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.ListDatabases ListDatabases {
      get { return catTypeCase_ == CatTypeOneofCase.ListDatabases ? (global::Spark.Connect.ListDatabases) catType_ : null; }
      set {
        catType_ = value;
        catTypeCase_ = value == null ? CatTypeOneofCase.None : CatTypeOneofCase.ListDatabases;
      }
    }

    /// <summary>Field number for the "list_tables" field.</summary>
    public const int ListTablesFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.ListTables ListTables {
      get { return catTypeCase_ == CatTypeOneofCase.ListTables ? (global::Spark.Connect.ListTables) catType_ : null; }
      set {
        catType_ = value;
        catTypeCase_ = value == null ? CatTypeOneofCase.None : CatTypeOneofCase.ListTables;
      }
    }

    /// <summary>Field number for the "list_functions" field.</summary>
    public const int ListFunctionsFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.ListFunctions ListFunctions {
      get { return catTypeCase_ == CatTypeOneofCase.ListFunctions ? (global::Spark.Connect.ListFunctions) catType_ : null; }
      set {
        catType_ = value;
        catTypeCase_ = value == null ? CatTypeOneofCase.None : CatTypeOneofCase.ListFunctions;
      }
    }

    /// <summary>Field number for the "list_columns" field.</summary>
    public const int ListColumnsFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.ListColumns ListColumns {
      get { return catTypeCase_ == CatTypeOneofCase.ListColumns ? (global::Spark.Connect.ListColumns) catType_ : null; }
      set {
        catType_ = value;
        catTypeCase_ = value == null ? CatTypeOneofCase.None : CatTypeOneofCase.ListColumns;
      }
    }

    /// <summary>Field number for the "get_database" field.</summary>
    public const int GetDatabaseFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.GetDatabase GetDatabase {
      get { return catTypeCase_ == CatTypeOneofCase.GetDatabase ? (global::Spark.Connect.GetDatabase) catType_ : null; }
      set {
        catType_ = value;
        catTypeCase_ = value == null ? CatTypeOneofCase.None : CatTypeOneofCase.GetDatabase;
      }
    }

    /// <summary>Field number for the "get_table" field.</summary>
    public const int GetTableFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.GetTable GetTable {
      get { return catTypeCase_ == CatTypeOneofCase.GetTable ? (global::Spark.Connect.GetTable) catType_ : null; }
      set {
        catType_ = value;
        catTypeCase_ = value == null ? CatTypeOneofCase.None : CatTypeOneofCase.GetTable;
      }
    }

    /// <summary>Field number for the "get_function" field.</summary>
    public const int GetFunctionFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.GetFunction GetFunction {
      get { return catTypeCase_ == CatTypeOneofCase.GetFunction ? (global::Spark.Connect.GetFunction) catType_ : null; }
      set {
        catType_ = value;
        catTypeCase_ = value == null ? CatTypeOneofCase.None : CatTypeOneofCase.GetFunction;
      }
    }

    /// <summary>Field number for the "database_exists" field.</summary>
    public const int DatabaseExistsFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.DatabaseExists DatabaseExists {
      get { return catTypeCase_ == CatTypeOneofCase.DatabaseExists ? (global::Spark.Connect.DatabaseExists) catType_ : null; }
      set {
        catType_ = value;
        catTypeCase_ = value == null ? CatTypeOneofCase.None : CatTypeOneofCase.DatabaseExists;
      }
    }

    /// <summary>Field number for the "table_exists" field.</summary>
    public const int TableExistsFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.TableExists TableExists {
      get { return catTypeCase_ == CatTypeOneofCase.TableExists ? (global::Spark.Connect.TableExists) catType_ : null; }
      set {
        catType_ = value;
        catTypeCase_ = value == null ? CatTypeOneofCase.None : CatTypeOneofCase.TableExists;
      }
    }

    /// <summary>Field number for the "function_exists" field.</summary>
    public const int FunctionExistsFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.FunctionExists FunctionExists {
      get { return catTypeCase_ == CatTypeOneofCase.FunctionExists ? (global::Spark.Connect.FunctionExists) catType_ : null; }
      set {
        catType_ = value;
        catTypeCase_ = value == null ? CatTypeOneofCase.None : CatTypeOneofCase.FunctionExists;
      }
    }

    /// <summary>Field number for the "create_external_table" field.</summary>
    public const int CreateExternalTableFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.CreateExternalTable CreateExternalTable {
      get { return catTypeCase_ == CatTypeOneofCase.CreateExternalTable ? (global::Spark.Connect.CreateExternalTable) catType_ : null; }
      set {
        catType_ = value;
        catTypeCase_ = value == null ? CatTypeOneofCase.None : CatTypeOneofCase.CreateExternalTable;
      }
    }

    /// <summary>Field number for the "create_table" field.</summary>
    public const int CreateTableFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.CreateTable CreateTable {
      get { return catTypeCase_ == CatTypeOneofCase.CreateTable ? (global::Spark.Connect.CreateTable) catType_ : null; }
      set {
        catType_ = value;
        catTypeCase_ = value == null ? CatTypeOneofCase.None : CatTypeOneofCase.CreateTable;
      }
    }

    /// <summary>Field number for the "drop_temp_view" field.</summary>
    public const int DropTempViewFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.DropTempView DropTempView {
      get { return catTypeCase_ == CatTypeOneofCase.DropTempView ? (global::Spark.Connect.DropTempView) catType_ : null; }
      set {
        catType_ = value;
        catTypeCase_ = value == null ? CatTypeOneofCase.None : CatTypeOneofCase.DropTempView;
      }
    }

    /// <summary>Field number for the "drop_global_temp_view" field.</summary>
    public const int DropGlobalTempViewFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.DropGlobalTempView DropGlobalTempView {
      get { return catTypeCase_ == CatTypeOneofCase.DropGlobalTempView ? (global::Spark.Connect.DropGlobalTempView) catType_ : null; }
      set {
        catType_ = value;
        catTypeCase_ = value == null ? CatTypeOneofCase.None : CatTypeOneofCase.DropGlobalTempView;
      }
    }

    /// <summary>Field number for the "recover_partitions" field.</summary>
    public const int RecoverPartitionsFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.RecoverPartitions RecoverPartitions {
      get { return catTypeCase_ == CatTypeOneofCase.RecoverPartitions ? (global::Spark.Connect.RecoverPartitions) catType_ : null; }
      set {
        catType_ = value;
        catTypeCase_ = value == null ? CatTypeOneofCase.None : CatTypeOneofCase.RecoverPartitions;
      }
    }

    /// <summary>Field number for the "is_cached" field.</summary>
    public const int IsCachedFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.IsCached IsCached {
      get { return catTypeCase_ == CatTypeOneofCase.IsCached ? (global::Spark.Connect.IsCached) catType_ : null; }
      set {
        catType_ = value;
        catTypeCase_ = value == null ? CatTypeOneofCase.None : CatTypeOneofCase.IsCached;
      }
    }

    /// <summary>Field number for the "cache_table" field.</summary>
    public const int CacheTableFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.CacheTable CacheTable {
      get { return catTypeCase_ == CatTypeOneofCase.CacheTable ? (global::Spark.Connect.CacheTable) catType_ : null; }
      set {
        catType_ = value;
        catTypeCase_ = value == null ? CatTypeOneofCase.None : CatTypeOneofCase.CacheTable;
      }
    }

    /// <summary>Field number for the "uncache_table" field.</summary>
    public const int UncacheTableFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.UncacheTable UncacheTable {
      get { return catTypeCase_ == CatTypeOneofCase.UncacheTable ? (global::Spark.Connect.UncacheTable) catType_ : null; }
      set {
        catType_ = value;
        catTypeCase_ = value == null ? CatTypeOneofCase.None : CatTypeOneofCase.UncacheTable;
      }
    }

    /// <summary>Field number for the "clear_cache" field.</summary>
    public const int ClearCacheFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.ClearCache ClearCache {
      get { return catTypeCase_ == CatTypeOneofCase.ClearCache ? (global::Spark.Connect.ClearCache) catType_ : null; }
      set {
        catType_ = value;
        catTypeCase_ = value == null ? CatTypeOneofCase.None : CatTypeOneofCase.ClearCache;
      }
    }

    /// <summary>Field number for the "refresh_table" field.</summary>
    public const int RefreshTableFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.RefreshTable RefreshTable {
      get { return catTypeCase_ == CatTypeOneofCase.RefreshTable ? (global::Spark.Connect.RefreshTable) catType_ : null; }
      set {
        catType_ = value;
        catTypeCase_ = value == null ? CatTypeOneofCase.None : CatTypeOneofCase.RefreshTable;
      }
    }

    /// <summary>Field number for the "refresh_by_path" field.</summary>
    public const int RefreshByPathFieldNumber = 23;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.RefreshByPath RefreshByPath {
      get { return catTypeCase_ == CatTypeOneofCase.RefreshByPath ? (global::Spark.Connect.RefreshByPath) catType_ : null; }
      set {
        catType_ = value;
        catTypeCase_ = value == null ? CatTypeOneofCase.None : CatTypeOneofCase.RefreshByPath;
      }
    }

    /// <summary>Field number for the "current_catalog" field.</summary>
    public const int CurrentCatalogFieldNumber = 24;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.CurrentCatalog CurrentCatalog {
      get { return catTypeCase_ == CatTypeOneofCase.CurrentCatalog ? (global::Spark.Connect.CurrentCatalog) catType_ : null; }
      set {
        catType_ = value;
        catTypeCase_ = value == null ? CatTypeOneofCase.None : CatTypeOneofCase.CurrentCatalog;
      }
    }

    /// <summary>Field number for the "set_current_catalog" field.</summary>
    public const int SetCurrentCatalogFieldNumber = 25;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.SetCurrentCatalog SetCurrentCatalog {
      get { return catTypeCase_ == CatTypeOneofCase.SetCurrentCatalog ? (global::Spark.Connect.SetCurrentCatalog) catType_ : null; }
      set {
        catType_ = value;
        catTypeCase_ = value == null ? CatTypeOneofCase.None : CatTypeOneofCase.SetCurrentCatalog;
      }
    }

    /// <summary>Field number for the "list_catalogs" field.</summary>
    public const int ListCatalogsFieldNumber = 26;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.ListCatalogs ListCatalogs {
      get { return catTypeCase_ == CatTypeOneofCase.ListCatalogs ? (global::Spark.Connect.ListCatalogs) catType_ : null; }
      set {
        catType_ = value;
        catTypeCase_ = value == null ? CatTypeOneofCase.None : CatTypeOneofCase.ListCatalogs;
      }
    }

    private object catType_;
    /// <summary>Enum of possible cases for the "cat_type" oneof.</summary>
    public enum CatTypeOneofCase {
      None = 0,
      CurrentDatabase = 1,
      SetCurrentDatabase = 2,
      ListDatabases = 3,
      ListTables = 4,
      ListFunctions = 5,
      ListColumns = 6,
      GetDatabase = 7,
      GetTable = 8,
      GetFunction = 9,
      DatabaseExists = 10,
      TableExists = 11,
      FunctionExists = 12,
      CreateExternalTable = 13,
      CreateTable = 14,
      DropTempView = 15,
      DropGlobalTempView = 16,
      RecoverPartitions = 17,
      IsCached = 18,
      CacheTable = 19,
      UncacheTable = 20,
      ClearCache = 21,
      RefreshTable = 22,
      RefreshByPath = 23,
      CurrentCatalog = 24,
      SetCurrentCatalog = 25,
      ListCatalogs = 26,
    }
    private CatTypeOneofCase catTypeCase_ = CatTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CatTypeOneofCase CatTypeCase {
      get { return catTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCatType() {
      catTypeCase_ = CatTypeOneofCase.None;
      catType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Catalog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Catalog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CurrentDatabase, other.CurrentDatabase)) return false;
      if (!object.Equals(SetCurrentDatabase, other.SetCurrentDatabase)) return false;
      if (!object.Equals(ListDatabases, other.ListDatabases)) return false;
      if (!object.Equals(ListTables, other.ListTables)) return false;
      if (!object.Equals(ListFunctions, other.ListFunctions)) return false;
      if (!object.Equals(ListColumns, other.ListColumns)) return false;
      if (!object.Equals(GetDatabase, other.GetDatabase)) return false;
      if (!object.Equals(GetTable, other.GetTable)) return false;
      if (!object.Equals(GetFunction, other.GetFunction)) return false;
      if (!object.Equals(DatabaseExists, other.DatabaseExists)) return false;
      if (!object.Equals(TableExists, other.TableExists)) return false;
      if (!object.Equals(FunctionExists, other.FunctionExists)) return false;
      if (!object.Equals(CreateExternalTable, other.CreateExternalTable)) return false;
      if (!object.Equals(CreateTable, other.CreateTable)) return false;
      if (!object.Equals(DropTempView, other.DropTempView)) return false;
      if (!object.Equals(DropGlobalTempView, other.DropGlobalTempView)) return false;
      if (!object.Equals(RecoverPartitions, other.RecoverPartitions)) return false;
      if (!object.Equals(IsCached, other.IsCached)) return false;
      if (!object.Equals(CacheTable, other.CacheTable)) return false;
      if (!object.Equals(UncacheTable, other.UncacheTable)) return false;
      if (!object.Equals(ClearCache, other.ClearCache)) return false;
      if (!object.Equals(RefreshTable, other.RefreshTable)) return false;
      if (!object.Equals(RefreshByPath, other.RefreshByPath)) return false;
      if (!object.Equals(CurrentCatalog, other.CurrentCatalog)) return false;
      if (!object.Equals(SetCurrentCatalog, other.SetCurrentCatalog)) return false;
      if (!object.Equals(ListCatalogs, other.ListCatalogs)) return false;
      if (CatTypeCase != other.CatTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (catTypeCase_ == CatTypeOneofCase.CurrentDatabase) hash ^= CurrentDatabase.GetHashCode();
      if (catTypeCase_ == CatTypeOneofCase.SetCurrentDatabase) hash ^= SetCurrentDatabase.GetHashCode();
      if (catTypeCase_ == CatTypeOneofCase.ListDatabases) hash ^= ListDatabases.GetHashCode();
      if (catTypeCase_ == CatTypeOneofCase.ListTables) hash ^= ListTables.GetHashCode();
      if (catTypeCase_ == CatTypeOneofCase.ListFunctions) hash ^= ListFunctions.GetHashCode();
      if (catTypeCase_ == CatTypeOneofCase.ListColumns) hash ^= ListColumns.GetHashCode();
      if (catTypeCase_ == CatTypeOneofCase.GetDatabase) hash ^= GetDatabase.GetHashCode();
      if (catTypeCase_ == CatTypeOneofCase.GetTable) hash ^= GetTable.GetHashCode();
      if (catTypeCase_ == CatTypeOneofCase.GetFunction) hash ^= GetFunction.GetHashCode();
      if (catTypeCase_ == CatTypeOneofCase.DatabaseExists) hash ^= DatabaseExists.GetHashCode();
      if (catTypeCase_ == CatTypeOneofCase.TableExists) hash ^= TableExists.GetHashCode();
      if (catTypeCase_ == CatTypeOneofCase.FunctionExists) hash ^= FunctionExists.GetHashCode();
      if (catTypeCase_ == CatTypeOneofCase.CreateExternalTable) hash ^= CreateExternalTable.GetHashCode();
      if (catTypeCase_ == CatTypeOneofCase.CreateTable) hash ^= CreateTable.GetHashCode();
      if (catTypeCase_ == CatTypeOneofCase.DropTempView) hash ^= DropTempView.GetHashCode();
      if (catTypeCase_ == CatTypeOneofCase.DropGlobalTempView) hash ^= DropGlobalTempView.GetHashCode();
      if (catTypeCase_ == CatTypeOneofCase.RecoverPartitions) hash ^= RecoverPartitions.GetHashCode();
      if (catTypeCase_ == CatTypeOneofCase.IsCached) hash ^= IsCached.GetHashCode();
      if (catTypeCase_ == CatTypeOneofCase.CacheTable) hash ^= CacheTable.GetHashCode();
      if (catTypeCase_ == CatTypeOneofCase.UncacheTable) hash ^= UncacheTable.GetHashCode();
      if (catTypeCase_ == CatTypeOneofCase.ClearCache) hash ^= ClearCache.GetHashCode();
      if (catTypeCase_ == CatTypeOneofCase.RefreshTable) hash ^= RefreshTable.GetHashCode();
      if (catTypeCase_ == CatTypeOneofCase.RefreshByPath) hash ^= RefreshByPath.GetHashCode();
      if (catTypeCase_ == CatTypeOneofCase.CurrentCatalog) hash ^= CurrentCatalog.GetHashCode();
      if (catTypeCase_ == CatTypeOneofCase.SetCurrentCatalog) hash ^= SetCurrentCatalog.GetHashCode();
      if (catTypeCase_ == CatTypeOneofCase.ListCatalogs) hash ^= ListCatalogs.GetHashCode();
      hash ^= (int) catTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (catTypeCase_ == CatTypeOneofCase.CurrentDatabase) {
        output.WriteRawTag(10);
        output.WriteMessage(CurrentDatabase);
      }
      if (catTypeCase_ == CatTypeOneofCase.SetCurrentDatabase) {
        output.WriteRawTag(18);
        output.WriteMessage(SetCurrentDatabase);
      }
      if (catTypeCase_ == CatTypeOneofCase.ListDatabases) {
        output.WriteRawTag(26);
        output.WriteMessage(ListDatabases);
      }
      if (catTypeCase_ == CatTypeOneofCase.ListTables) {
        output.WriteRawTag(34);
        output.WriteMessage(ListTables);
      }
      if (catTypeCase_ == CatTypeOneofCase.ListFunctions) {
        output.WriteRawTag(42);
        output.WriteMessage(ListFunctions);
      }
      if (catTypeCase_ == CatTypeOneofCase.ListColumns) {
        output.WriteRawTag(50);
        output.WriteMessage(ListColumns);
      }
      if (catTypeCase_ == CatTypeOneofCase.GetDatabase) {
        output.WriteRawTag(58);
        output.WriteMessage(GetDatabase);
      }
      if (catTypeCase_ == CatTypeOneofCase.GetTable) {
        output.WriteRawTag(66);
        output.WriteMessage(GetTable);
      }
      if (catTypeCase_ == CatTypeOneofCase.GetFunction) {
        output.WriteRawTag(74);
        output.WriteMessage(GetFunction);
      }
      if (catTypeCase_ == CatTypeOneofCase.DatabaseExists) {
        output.WriteRawTag(82);
        output.WriteMessage(DatabaseExists);
      }
      if (catTypeCase_ == CatTypeOneofCase.TableExists) {
        output.WriteRawTag(90);
        output.WriteMessage(TableExists);
      }
      if (catTypeCase_ == CatTypeOneofCase.FunctionExists) {
        output.WriteRawTag(98);
        output.WriteMessage(FunctionExists);
      }
      if (catTypeCase_ == CatTypeOneofCase.CreateExternalTable) {
        output.WriteRawTag(106);
        output.WriteMessage(CreateExternalTable);
      }
      if (catTypeCase_ == CatTypeOneofCase.CreateTable) {
        output.WriteRawTag(114);
        output.WriteMessage(CreateTable);
      }
      if (catTypeCase_ == CatTypeOneofCase.DropTempView) {
        output.WriteRawTag(122);
        output.WriteMessage(DropTempView);
      }
      if (catTypeCase_ == CatTypeOneofCase.DropGlobalTempView) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(DropGlobalTempView);
      }
      if (catTypeCase_ == CatTypeOneofCase.RecoverPartitions) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(RecoverPartitions);
      }
      if (catTypeCase_ == CatTypeOneofCase.IsCached) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(IsCached);
      }
      if (catTypeCase_ == CatTypeOneofCase.CacheTable) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(CacheTable);
      }
      if (catTypeCase_ == CatTypeOneofCase.UncacheTable) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(UncacheTable);
      }
      if (catTypeCase_ == CatTypeOneofCase.ClearCache) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(ClearCache);
      }
      if (catTypeCase_ == CatTypeOneofCase.RefreshTable) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(RefreshTable);
      }
      if (catTypeCase_ == CatTypeOneofCase.RefreshByPath) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(RefreshByPath);
      }
      if (catTypeCase_ == CatTypeOneofCase.CurrentCatalog) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(CurrentCatalog);
      }
      if (catTypeCase_ == CatTypeOneofCase.SetCurrentCatalog) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(SetCurrentCatalog);
      }
      if (catTypeCase_ == CatTypeOneofCase.ListCatalogs) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(ListCatalogs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (catTypeCase_ == CatTypeOneofCase.CurrentDatabase) {
        output.WriteRawTag(10);
        output.WriteMessage(CurrentDatabase);
      }
      if (catTypeCase_ == CatTypeOneofCase.SetCurrentDatabase) {
        output.WriteRawTag(18);
        output.WriteMessage(SetCurrentDatabase);
      }
      if (catTypeCase_ == CatTypeOneofCase.ListDatabases) {
        output.WriteRawTag(26);
        output.WriteMessage(ListDatabases);
      }
      if (catTypeCase_ == CatTypeOneofCase.ListTables) {
        output.WriteRawTag(34);
        output.WriteMessage(ListTables);
      }
      if (catTypeCase_ == CatTypeOneofCase.ListFunctions) {
        output.WriteRawTag(42);
        output.WriteMessage(ListFunctions);
      }
      if (catTypeCase_ == CatTypeOneofCase.ListColumns) {
        output.WriteRawTag(50);
        output.WriteMessage(ListColumns);
      }
      if (catTypeCase_ == CatTypeOneofCase.GetDatabase) {
        output.WriteRawTag(58);
        output.WriteMessage(GetDatabase);
      }
      if (catTypeCase_ == CatTypeOneofCase.GetTable) {
        output.WriteRawTag(66);
        output.WriteMessage(GetTable);
      }
      if (catTypeCase_ == CatTypeOneofCase.GetFunction) {
        output.WriteRawTag(74);
        output.WriteMessage(GetFunction);
      }
      if (catTypeCase_ == CatTypeOneofCase.DatabaseExists) {
        output.WriteRawTag(82);
        output.WriteMessage(DatabaseExists);
      }
      if (catTypeCase_ == CatTypeOneofCase.TableExists) {
        output.WriteRawTag(90);
        output.WriteMessage(TableExists);
      }
      if (catTypeCase_ == CatTypeOneofCase.FunctionExists) {
        output.WriteRawTag(98);
        output.WriteMessage(FunctionExists);
      }
      if (catTypeCase_ == CatTypeOneofCase.CreateExternalTable) {
        output.WriteRawTag(106);
        output.WriteMessage(CreateExternalTable);
      }
      if (catTypeCase_ == CatTypeOneofCase.CreateTable) {
        output.WriteRawTag(114);
        output.WriteMessage(CreateTable);
      }
      if (catTypeCase_ == CatTypeOneofCase.DropTempView) {
        output.WriteRawTag(122);
        output.WriteMessage(DropTempView);
      }
      if (catTypeCase_ == CatTypeOneofCase.DropGlobalTempView) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(DropGlobalTempView);
      }
      if (catTypeCase_ == CatTypeOneofCase.RecoverPartitions) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(RecoverPartitions);
      }
      if (catTypeCase_ == CatTypeOneofCase.IsCached) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(IsCached);
      }
      if (catTypeCase_ == CatTypeOneofCase.CacheTable) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(CacheTable);
      }
      if (catTypeCase_ == CatTypeOneofCase.UncacheTable) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(UncacheTable);
      }
      if (catTypeCase_ == CatTypeOneofCase.ClearCache) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(ClearCache);
      }
      if (catTypeCase_ == CatTypeOneofCase.RefreshTable) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(RefreshTable);
      }
      if (catTypeCase_ == CatTypeOneofCase.RefreshByPath) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(RefreshByPath);
      }
      if (catTypeCase_ == CatTypeOneofCase.CurrentCatalog) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(CurrentCatalog);
      }
      if (catTypeCase_ == CatTypeOneofCase.SetCurrentCatalog) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(SetCurrentCatalog);
      }
      if (catTypeCase_ == CatTypeOneofCase.ListCatalogs) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(ListCatalogs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (catTypeCase_ == CatTypeOneofCase.CurrentDatabase) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentDatabase);
      }
      if (catTypeCase_ == CatTypeOneofCase.SetCurrentDatabase) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SetCurrentDatabase);
      }
      if (catTypeCase_ == CatTypeOneofCase.ListDatabases) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ListDatabases);
      }
      if (catTypeCase_ == CatTypeOneofCase.ListTables) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ListTables);
      }
      if (catTypeCase_ == CatTypeOneofCase.ListFunctions) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ListFunctions);
      }
      if (catTypeCase_ == CatTypeOneofCase.ListColumns) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ListColumns);
      }
      if (catTypeCase_ == CatTypeOneofCase.GetDatabase) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetDatabase);
      }
      if (catTypeCase_ == CatTypeOneofCase.GetTable) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetTable);
      }
      if (catTypeCase_ == CatTypeOneofCase.GetFunction) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetFunction);
      }
      if (catTypeCase_ == CatTypeOneofCase.DatabaseExists) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DatabaseExists);
      }
      if (catTypeCase_ == CatTypeOneofCase.TableExists) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TableExists);
      }
      if (catTypeCase_ == CatTypeOneofCase.FunctionExists) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FunctionExists);
      }
      if (catTypeCase_ == CatTypeOneofCase.CreateExternalTable) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateExternalTable);
      }
      if (catTypeCase_ == CatTypeOneofCase.CreateTable) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTable);
      }
      if (catTypeCase_ == CatTypeOneofCase.DropTempView) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DropTempView);
      }
      if (catTypeCase_ == CatTypeOneofCase.DropGlobalTempView) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DropGlobalTempView);
      }
      if (catTypeCase_ == CatTypeOneofCase.RecoverPartitions) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RecoverPartitions);
      }
      if (catTypeCase_ == CatTypeOneofCase.IsCached) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(IsCached);
      }
      if (catTypeCase_ == CatTypeOneofCase.CacheTable) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CacheTable);
      }
      if (catTypeCase_ == CatTypeOneofCase.UncacheTable) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UncacheTable);
      }
      if (catTypeCase_ == CatTypeOneofCase.ClearCache) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ClearCache);
      }
      if (catTypeCase_ == CatTypeOneofCase.RefreshTable) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RefreshTable);
      }
      if (catTypeCase_ == CatTypeOneofCase.RefreshByPath) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RefreshByPath);
      }
      if (catTypeCase_ == CatTypeOneofCase.CurrentCatalog) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CurrentCatalog);
      }
      if (catTypeCase_ == CatTypeOneofCase.SetCurrentCatalog) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SetCurrentCatalog);
      }
      if (catTypeCase_ == CatTypeOneofCase.ListCatalogs) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ListCatalogs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Catalog other) {
      if (other == null) {
        return;
      }
      switch (other.CatTypeCase) {
        case CatTypeOneofCase.CurrentDatabase:
          if (CurrentDatabase == null) {
            CurrentDatabase = new global::Spark.Connect.CurrentDatabase();
          }
          CurrentDatabase.MergeFrom(other.CurrentDatabase);
          break;
        case CatTypeOneofCase.SetCurrentDatabase:
          if (SetCurrentDatabase == null) {
            SetCurrentDatabase = new global::Spark.Connect.SetCurrentDatabase();
          }
          SetCurrentDatabase.MergeFrom(other.SetCurrentDatabase);
          break;
        case CatTypeOneofCase.ListDatabases:
          if (ListDatabases == null) {
            ListDatabases = new global::Spark.Connect.ListDatabases();
          }
          ListDatabases.MergeFrom(other.ListDatabases);
          break;
        case CatTypeOneofCase.ListTables:
          if (ListTables == null) {
            ListTables = new global::Spark.Connect.ListTables();
          }
          ListTables.MergeFrom(other.ListTables);
          break;
        case CatTypeOneofCase.ListFunctions:
          if (ListFunctions == null) {
            ListFunctions = new global::Spark.Connect.ListFunctions();
          }
          ListFunctions.MergeFrom(other.ListFunctions);
          break;
        case CatTypeOneofCase.ListColumns:
          if (ListColumns == null) {
            ListColumns = new global::Spark.Connect.ListColumns();
          }
          ListColumns.MergeFrom(other.ListColumns);
          break;
        case CatTypeOneofCase.GetDatabase:
          if (GetDatabase == null) {
            GetDatabase = new global::Spark.Connect.GetDatabase();
          }
          GetDatabase.MergeFrom(other.GetDatabase);
          break;
        case CatTypeOneofCase.GetTable:
          if (GetTable == null) {
            GetTable = new global::Spark.Connect.GetTable();
          }
          GetTable.MergeFrom(other.GetTable);
          break;
        case CatTypeOneofCase.GetFunction:
          if (GetFunction == null) {
            GetFunction = new global::Spark.Connect.GetFunction();
          }
          GetFunction.MergeFrom(other.GetFunction);
          break;
        case CatTypeOneofCase.DatabaseExists:
          if (DatabaseExists == null) {
            DatabaseExists = new global::Spark.Connect.DatabaseExists();
          }
          DatabaseExists.MergeFrom(other.DatabaseExists);
          break;
        case CatTypeOneofCase.TableExists:
          if (TableExists == null) {
            TableExists = new global::Spark.Connect.TableExists();
          }
          TableExists.MergeFrom(other.TableExists);
          break;
        case CatTypeOneofCase.FunctionExists:
          if (FunctionExists == null) {
            FunctionExists = new global::Spark.Connect.FunctionExists();
          }
          FunctionExists.MergeFrom(other.FunctionExists);
          break;
        case CatTypeOneofCase.CreateExternalTable:
          if (CreateExternalTable == null) {
            CreateExternalTable = new global::Spark.Connect.CreateExternalTable();
          }
          CreateExternalTable.MergeFrom(other.CreateExternalTable);
          break;
        case CatTypeOneofCase.CreateTable:
          if (CreateTable == null) {
            CreateTable = new global::Spark.Connect.CreateTable();
          }
          CreateTable.MergeFrom(other.CreateTable);
          break;
        case CatTypeOneofCase.DropTempView:
          if (DropTempView == null) {
            DropTempView = new global::Spark.Connect.DropTempView();
          }
          DropTempView.MergeFrom(other.DropTempView);
          break;
        case CatTypeOneofCase.DropGlobalTempView:
          if (DropGlobalTempView == null) {
            DropGlobalTempView = new global::Spark.Connect.DropGlobalTempView();
          }
          DropGlobalTempView.MergeFrom(other.DropGlobalTempView);
          break;
        case CatTypeOneofCase.RecoverPartitions:
          if (RecoverPartitions == null) {
            RecoverPartitions = new global::Spark.Connect.RecoverPartitions();
          }
          RecoverPartitions.MergeFrom(other.RecoverPartitions);
          break;
        case CatTypeOneofCase.IsCached:
          if (IsCached == null) {
            IsCached = new global::Spark.Connect.IsCached();
          }
          IsCached.MergeFrom(other.IsCached);
          break;
        case CatTypeOneofCase.CacheTable:
          if (CacheTable == null) {
            CacheTable = new global::Spark.Connect.CacheTable();
          }
          CacheTable.MergeFrom(other.CacheTable);
          break;
        case CatTypeOneofCase.UncacheTable:
          if (UncacheTable == null) {
            UncacheTable = new global::Spark.Connect.UncacheTable();
          }
          UncacheTable.MergeFrom(other.UncacheTable);
          break;
        case CatTypeOneofCase.ClearCache:
          if (ClearCache == null) {
            ClearCache = new global::Spark.Connect.ClearCache();
          }
          ClearCache.MergeFrom(other.ClearCache);
          break;
        case CatTypeOneofCase.RefreshTable:
          if (RefreshTable == null) {
            RefreshTable = new global::Spark.Connect.RefreshTable();
          }
          RefreshTable.MergeFrom(other.RefreshTable);
          break;
        case CatTypeOneofCase.RefreshByPath:
          if (RefreshByPath == null) {
            RefreshByPath = new global::Spark.Connect.RefreshByPath();
          }
          RefreshByPath.MergeFrom(other.RefreshByPath);
          break;
        case CatTypeOneofCase.CurrentCatalog:
          if (CurrentCatalog == null) {
            CurrentCatalog = new global::Spark.Connect.CurrentCatalog();
          }
          CurrentCatalog.MergeFrom(other.CurrentCatalog);
          break;
        case CatTypeOneofCase.SetCurrentCatalog:
          if (SetCurrentCatalog == null) {
            SetCurrentCatalog = new global::Spark.Connect.SetCurrentCatalog();
          }
          SetCurrentCatalog.MergeFrom(other.SetCurrentCatalog);
          break;
        case CatTypeOneofCase.ListCatalogs:
          if (ListCatalogs == null) {
            ListCatalogs = new global::Spark.Connect.ListCatalogs();
          }
          ListCatalogs.MergeFrom(other.ListCatalogs);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Spark.Connect.CurrentDatabase subBuilder = new global::Spark.Connect.CurrentDatabase();
            if (catTypeCase_ == CatTypeOneofCase.CurrentDatabase) {
              subBuilder.MergeFrom(CurrentDatabase);
            }
            input.ReadMessage(subBuilder);
            CurrentDatabase = subBuilder;
            break;
          }
          case 18: {
            global::Spark.Connect.SetCurrentDatabase subBuilder = new global::Spark.Connect.SetCurrentDatabase();
            if (catTypeCase_ == CatTypeOneofCase.SetCurrentDatabase) {
              subBuilder.MergeFrom(SetCurrentDatabase);
            }
            input.ReadMessage(subBuilder);
            SetCurrentDatabase = subBuilder;
            break;
          }
          case 26: {
            global::Spark.Connect.ListDatabases subBuilder = new global::Spark.Connect.ListDatabases();
            if (catTypeCase_ == CatTypeOneofCase.ListDatabases) {
              subBuilder.MergeFrom(ListDatabases);
            }
            input.ReadMessage(subBuilder);
            ListDatabases = subBuilder;
            break;
          }
          case 34: {
            global::Spark.Connect.ListTables subBuilder = new global::Spark.Connect.ListTables();
            if (catTypeCase_ == CatTypeOneofCase.ListTables) {
              subBuilder.MergeFrom(ListTables);
            }
            input.ReadMessage(subBuilder);
            ListTables = subBuilder;
            break;
          }
          case 42: {
            global::Spark.Connect.ListFunctions subBuilder = new global::Spark.Connect.ListFunctions();
            if (catTypeCase_ == CatTypeOneofCase.ListFunctions) {
              subBuilder.MergeFrom(ListFunctions);
            }
            input.ReadMessage(subBuilder);
            ListFunctions = subBuilder;
            break;
          }
          case 50: {
            global::Spark.Connect.ListColumns subBuilder = new global::Spark.Connect.ListColumns();
            if (catTypeCase_ == CatTypeOneofCase.ListColumns) {
              subBuilder.MergeFrom(ListColumns);
            }
            input.ReadMessage(subBuilder);
            ListColumns = subBuilder;
            break;
          }
          case 58: {
            global::Spark.Connect.GetDatabase subBuilder = new global::Spark.Connect.GetDatabase();
            if (catTypeCase_ == CatTypeOneofCase.GetDatabase) {
              subBuilder.MergeFrom(GetDatabase);
            }
            input.ReadMessage(subBuilder);
            GetDatabase = subBuilder;
            break;
          }
          case 66: {
            global::Spark.Connect.GetTable subBuilder = new global::Spark.Connect.GetTable();
            if (catTypeCase_ == CatTypeOneofCase.GetTable) {
              subBuilder.MergeFrom(GetTable);
            }
            input.ReadMessage(subBuilder);
            GetTable = subBuilder;
            break;
          }
          case 74: {
            global::Spark.Connect.GetFunction subBuilder = new global::Spark.Connect.GetFunction();
            if (catTypeCase_ == CatTypeOneofCase.GetFunction) {
              subBuilder.MergeFrom(GetFunction);
            }
            input.ReadMessage(subBuilder);
            GetFunction = subBuilder;
            break;
          }
          case 82: {
            global::Spark.Connect.DatabaseExists subBuilder = new global::Spark.Connect.DatabaseExists();
            if (catTypeCase_ == CatTypeOneofCase.DatabaseExists) {
              subBuilder.MergeFrom(DatabaseExists);
            }
            input.ReadMessage(subBuilder);
            DatabaseExists = subBuilder;
            break;
          }
          case 90: {
            global::Spark.Connect.TableExists subBuilder = new global::Spark.Connect.TableExists();
            if (catTypeCase_ == CatTypeOneofCase.TableExists) {
              subBuilder.MergeFrom(TableExists);
            }
            input.ReadMessage(subBuilder);
            TableExists = subBuilder;
            break;
          }
          case 98: {
            global::Spark.Connect.FunctionExists subBuilder = new global::Spark.Connect.FunctionExists();
            if (catTypeCase_ == CatTypeOneofCase.FunctionExists) {
              subBuilder.MergeFrom(FunctionExists);
            }
            input.ReadMessage(subBuilder);
            FunctionExists = subBuilder;
            break;
          }
          case 106: {
            global::Spark.Connect.CreateExternalTable subBuilder = new global::Spark.Connect.CreateExternalTable();
            if (catTypeCase_ == CatTypeOneofCase.CreateExternalTable) {
              subBuilder.MergeFrom(CreateExternalTable);
            }
            input.ReadMessage(subBuilder);
            CreateExternalTable = subBuilder;
            break;
          }
          case 114: {
            global::Spark.Connect.CreateTable subBuilder = new global::Spark.Connect.CreateTable();
            if (catTypeCase_ == CatTypeOneofCase.CreateTable) {
              subBuilder.MergeFrom(CreateTable);
            }
            input.ReadMessage(subBuilder);
            CreateTable = subBuilder;
            break;
          }
          case 122: {
            global::Spark.Connect.DropTempView subBuilder = new global::Spark.Connect.DropTempView();
            if (catTypeCase_ == CatTypeOneofCase.DropTempView) {
              subBuilder.MergeFrom(DropTempView);
            }
            input.ReadMessage(subBuilder);
            DropTempView = subBuilder;
            break;
          }
          case 130: {
            global::Spark.Connect.DropGlobalTempView subBuilder = new global::Spark.Connect.DropGlobalTempView();
            if (catTypeCase_ == CatTypeOneofCase.DropGlobalTempView) {
              subBuilder.MergeFrom(DropGlobalTempView);
            }
            input.ReadMessage(subBuilder);
            DropGlobalTempView = subBuilder;
            break;
          }
          case 138: {
            global::Spark.Connect.RecoverPartitions subBuilder = new global::Spark.Connect.RecoverPartitions();
            if (catTypeCase_ == CatTypeOneofCase.RecoverPartitions) {
              subBuilder.MergeFrom(RecoverPartitions);
            }
            input.ReadMessage(subBuilder);
            RecoverPartitions = subBuilder;
            break;
          }
          case 146: {
            global::Spark.Connect.IsCached subBuilder = new global::Spark.Connect.IsCached();
            if (catTypeCase_ == CatTypeOneofCase.IsCached) {
              subBuilder.MergeFrom(IsCached);
            }
            input.ReadMessage(subBuilder);
            IsCached = subBuilder;
            break;
          }
          case 154: {
            global::Spark.Connect.CacheTable subBuilder = new global::Spark.Connect.CacheTable();
            if (catTypeCase_ == CatTypeOneofCase.CacheTable) {
              subBuilder.MergeFrom(CacheTable);
            }
            input.ReadMessage(subBuilder);
            CacheTable = subBuilder;
            break;
          }
          case 162: {
            global::Spark.Connect.UncacheTable subBuilder = new global::Spark.Connect.UncacheTable();
            if (catTypeCase_ == CatTypeOneofCase.UncacheTable) {
              subBuilder.MergeFrom(UncacheTable);
            }
            input.ReadMessage(subBuilder);
            UncacheTable = subBuilder;
            break;
          }
          case 170: {
            global::Spark.Connect.ClearCache subBuilder = new global::Spark.Connect.ClearCache();
            if (catTypeCase_ == CatTypeOneofCase.ClearCache) {
              subBuilder.MergeFrom(ClearCache);
            }
            input.ReadMessage(subBuilder);
            ClearCache = subBuilder;
            break;
          }
          case 178: {
            global::Spark.Connect.RefreshTable subBuilder = new global::Spark.Connect.RefreshTable();
            if (catTypeCase_ == CatTypeOneofCase.RefreshTable) {
              subBuilder.MergeFrom(RefreshTable);
            }
            input.ReadMessage(subBuilder);
            RefreshTable = subBuilder;
            break;
          }
          case 186: {
            global::Spark.Connect.RefreshByPath subBuilder = new global::Spark.Connect.RefreshByPath();
            if (catTypeCase_ == CatTypeOneofCase.RefreshByPath) {
              subBuilder.MergeFrom(RefreshByPath);
            }
            input.ReadMessage(subBuilder);
            RefreshByPath = subBuilder;
            break;
          }
          case 194: {
            global::Spark.Connect.CurrentCatalog subBuilder = new global::Spark.Connect.CurrentCatalog();
            if (catTypeCase_ == CatTypeOneofCase.CurrentCatalog) {
              subBuilder.MergeFrom(CurrentCatalog);
            }
            input.ReadMessage(subBuilder);
            CurrentCatalog = subBuilder;
            break;
          }
          case 202: {
            global::Spark.Connect.SetCurrentCatalog subBuilder = new global::Spark.Connect.SetCurrentCatalog();
            if (catTypeCase_ == CatTypeOneofCase.SetCurrentCatalog) {
              subBuilder.MergeFrom(SetCurrentCatalog);
            }
            input.ReadMessage(subBuilder);
            SetCurrentCatalog = subBuilder;
            break;
          }
          case 210: {
            global::Spark.Connect.ListCatalogs subBuilder = new global::Spark.Connect.ListCatalogs();
            if (catTypeCase_ == CatTypeOneofCase.ListCatalogs) {
              subBuilder.MergeFrom(ListCatalogs);
            }
            input.ReadMessage(subBuilder);
            ListCatalogs = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Spark.Connect.CurrentDatabase subBuilder = new global::Spark.Connect.CurrentDatabase();
            if (catTypeCase_ == CatTypeOneofCase.CurrentDatabase) {
              subBuilder.MergeFrom(CurrentDatabase);
            }
            input.ReadMessage(subBuilder);
            CurrentDatabase = subBuilder;
            break;
          }
          case 18: {
            global::Spark.Connect.SetCurrentDatabase subBuilder = new global::Spark.Connect.SetCurrentDatabase();
            if (catTypeCase_ == CatTypeOneofCase.SetCurrentDatabase) {
              subBuilder.MergeFrom(SetCurrentDatabase);
            }
            input.ReadMessage(subBuilder);
            SetCurrentDatabase = subBuilder;
            break;
          }
          case 26: {
            global::Spark.Connect.ListDatabases subBuilder = new global::Spark.Connect.ListDatabases();
            if (catTypeCase_ == CatTypeOneofCase.ListDatabases) {
              subBuilder.MergeFrom(ListDatabases);
            }
            input.ReadMessage(subBuilder);
            ListDatabases = subBuilder;
            break;
          }
          case 34: {
            global::Spark.Connect.ListTables subBuilder = new global::Spark.Connect.ListTables();
            if (catTypeCase_ == CatTypeOneofCase.ListTables) {
              subBuilder.MergeFrom(ListTables);
            }
            input.ReadMessage(subBuilder);
            ListTables = subBuilder;
            break;
          }
          case 42: {
            global::Spark.Connect.ListFunctions subBuilder = new global::Spark.Connect.ListFunctions();
            if (catTypeCase_ == CatTypeOneofCase.ListFunctions) {
              subBuilder.MergeFrom(ListFunctions);
            }
            input.ReadMessage(subBuilder);
            ListFunctions = subBuilder;
            break;
          }
          case 50: {
            global::Spark.Connect.ListColumns subBuilder = new global::Spark.Connect.ListColumns();
            if (catTypeCase_ == CatTypeOneofCase.ListColumns) {
              subBuilder.MergeFrom(ListColumns);
            }
            input.ReadMessage(subBuilder);
            ListColumns = subBuilder;
            break;
          }
          case 58: {
            global::Spark.Connect.GetDatabase subBuilder = new global::Spark.Connect.GetDatabase();
            if (catTypeCase_ == CatTypeOneofCase.GetDatabase) {
              subBuilder.MergeFrom(GetDatabase);
            }
            input.ReadMessage(subBuilder);
            GetDatabase = subBuilder;
            break;
          }
          case 66: {
            global::Spark.Connect.GetTable subBuilder = new global::Spark.Connect.GetTable();
            if (catTypeCase_ == CatTypeOneofCase.GetTable) {
              subBuilder.MergeFrom(GetTable);
            }
            input.ReadMessage(subBuilder);
            GetTable = subBuilder;
            break;
          }
          case 74: {
            global::Spark.Connect.GetFunction subBuilder = new global::Spark.Connect.GetFunction();
            if (catTypeCase_ == CatTypeOneofCase.GetFunction) {
              subBuilder.MergeFrom(GetFunction);
            }
            input.ReadMessage(subBuilder);
            GetFunction = subBuilder;
            break;
          }
          case 82: {
            global::Spark.Connect.DatabaseExists subBuilder = new global::Spark.Connect.DatabaseExists();
            if (catTypeCase_ == CatTypeOneofCase.DatabaseExists) {
              subBuilder.MergeFrom(DatabaseExists);
            }
            input.ReadMessage(subBuilder);
            DatabaseExists = subBuilder;
            break;
          }
          case 90: {
            global::Spark.Connect.TableExists subBuilder = new global::Spark.Connect.TableExists();
            if (catTypeCase_ == CatTypeOneofCase.TableExists) {
              subBuilder.MergeFrom(TableExists);
            }
            input.ReadMessage(subBuilder);
            TableExists = subBuilder;
            break;
          }
          case 98: {
            global::Spark.Connect.FunctionExists subBuilder = new global::Spark.Connect.FunctionExists();
            if (catTypeCase_ == CatTypeOneofCase.FunctionExists) {
              subBuilder.MergeFrom(FunctionExists);
            }
            input.ReadMessage(subBuilder);
            FunctionExists = subBuilder;
            break;
          }
          case 106: {
            global::Spark.Connect.CreateExternalTable subBuilder = new global::Spark.Connect.CreateExternalTable();
            if (catTypeCase_ == CatTypeOneofCase.CreateExternalTable) {
              subBuilder.MergeFrom(CreateExternalTable);
            }
            input.ReadMessage(subBuilder);
            CreateExternalTable = subBuilder;
            break;
          }
          case 114: {
            global::Spark.Connect.CreateTable subBuilder = new global::Spark.Connect.CreateTable();
            if (catTypeCase_ == CatTypeOneofCase.CreateTable) {
              subBuilder.MergeFrom(CreateTable);
            }
            input.ReadMessage(subBuilder);
            CreateTable = subBuilder;
            break;
          }
          case 122: {
            global::Spark.Connect.DropTempView subBuilder = new global::Spark.Connect.DropTempView();
            if (catTypeCase_ == CatTypeOneofCase.DropTempView) {
              subBuilder.MergeFrom(DropTempView);
            }
            input.ReadMessage(subBuilder);
            DropTempView = subBuilder;
            break;
          }
          case 130: {
            global::Spark.Connect.DropGlobalTempView subBuilder = new global::Spark.Connect.DropGlobalTempView();
            if (catTypeCase_ == CatTypeOneofCase.DropGlobalTempView) {
              subBuilder.MergeFrom(DropGlobalTempView);
            }
            input.ReadMessage(subBuilder);
            DropGlobalTempView = subBuilder;
            break;
          }
          case 138: {
            global::Spark.Connect.RecoverPartitions subBuilder = new global::Spark.Connect.RecoverPartitions();
            if (catTypeCase_ == CatTypeOneofCase.RecoverPartitions) {
              subBuilder.MergeFrom(RecoverPartitions);
            }
            input.ReadMessage(subBuilder);
            RecoverPartitions = subBuilder;
            break;
          }
          case 146: {
            global::Spark.Connect.IsCached subBuilder = new global::Spark.Connect.IsCached();
            if (catTypeCase_ == CatTypeOneofCase.IsCached) {
              subBuilder.MergeFrom(IsCached);
            }
            input.ReadMessage(subBuilder);
            IsCached = subBuilder;
            break;
          }
          case 154: {
            global::Spark.Connect.CacheTable subBuilder = new global::Spark.Connect.CacheTable();
            if (catTypeCase_ == CatTypeOneofCase.CacheTable) {
              subBuilder.MergeFrom(CacheTable);
            }
            input.ReadMessage(subBuilder);
            CacheTable = subBuilder;
            break;
          }
          case 162: {
            global::Spark.Connect.UncacheTable subBuilder = new global::Spark.Connect.UncacheTable();
            if (catTypeCase_ == CatTypeOneofCase.UncacheTable) {
              subBuilder.MergeFrom(UncacheTable);
            }
            input.ReadMessage(subBuilder);
            UncacheTable = subBuilder;
            break;
          }
          case 170: {
            global::Spark.Connect.ClearCache subBuilder = new global::Spark.Connect.ClearCache();
            if (catTypeCase_ == CatTypeOneofCase.ClearCache) {
              subBuilder.MergeFrom(ClearCache);
            }
            input.ReadMessage(subBuilder);
            ClearCache = subBuilder;
            break;
          }
          case 178: {
            global::Spark.Connect.RefreshTable subBuilder = new global::Spark.Connect.RefreshTable();
            if (catTypeCase_ == CatTypeOneofCase.RefreshTable) {
              subBuilder.MergeFrom(RefreshTable);
            }
            input.ReadMessage(subBuilder);
            RefreshTable = subBuilder;
            break;
          }
          case 186: {
            global::Spark.Connect.RefreshByPath subBuilder = new global::Spark.Connect.RefreshByPath();
            if (catTypeCase_ == CatTypeOneofCase.RefreshByPath) {
              subBuilder.MergeFrom(RefreshByPath);
            }
            input.ReadMessage(subBuilder);
            RefreshByPath = subBuilder;
            break;
          }
          case 194: {
            global::Spark.Connect.CurrentCatalog subBuilder = new global::Spark.Connect.CurrentCatalog();
            if (catTypeCase_ == CatTypeOneofCase.CurrentCatalog) {
              subBuilder.MergeFrom(CurrentCatalog);
            }
            input.ReadMessage(subBuilder);
            CurrentCatalog = subBuilder;
            break;
          }
          case 202: {
            global::Spark.Connect.SetCurrentCatalog subBuilder = new global::Spark.Connect.SetCurrentCatalog();
            if (catTypeCase_ == CatTypeOneofCase.SetCurrentCatalog) {
              subBuilder.MergeFrom(SetCurrentCatalog);
            }
            input.ReadMessage(subBuilder);
            SetCurrentCatalog = subBuilder;
            break;
          }
          case 210: {
            global::Spark.Connect.ListCatalogs subBuilder = new global::Spark.Connect.ListCatalogs();
            if (catTypeCase_ == CatTypeOneofCase.ListCatalogs) {
              subBuilder.MergeFrom(ListCatalogs);
            }
            input.ReadMessage(subBuilder);
            ListCatalogs = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// See `spark.catalog.currentDatabase`
  /// </summary>
  public sealed partial class CurrentDatabase : pb::IMessage<CurrentDatabase>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CurrentDatabase> _parser = new pb::MessageParser<CurrentDatabase>(() => new CurrentDatabase());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CurrentDatabase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.CatalogReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CurrentDatabase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CurrentDatabase(CurrentDatabase other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CurrentDatabase Clone() {
      return new CurrentDatabase(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CurrentDatabase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CurrentDatabase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CurrentDatabase other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  /// See `spark.catalog.setCurrentDatabase`
  /// </summary>
  public sealed partial class SetCurrentDatabase : pb::IMessage<SetCurrentDatabase>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SetCurrentDatabase> _parser = new pb::MessageParser<SetCurrentDatabase>(() => new SetCurrentDatabase());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SetCurrentDatabase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.CatalogReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SetCurrentDatabase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SetCurrentDatabase(SetCurrentDatabase other) : this() {
      dbName_ = other.dbName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SetCurrentDatabase Clone() {
      return new SetCurrentDatabase(this);
    }

    /// <summary>Field number for the "db_name" field.</summary>
    public const int DbNameFieldNumber = 1;
    private string dbName_ = "";
    /// <summary>
    /// (Required)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DbName {
      get { return dbName_; }
      set {
        dbName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SetCurrentDatabase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SetCurrentDatabase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DbName != other.DbName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (DbName.Length != 0) hash ^= DbName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DbName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DbName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DbName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DbName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (DbName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DbName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SetCurrentDatabase other) {
      if (other == null) {
        return;
      }
      if (other.DbName.Length != 0) {
        DbName = other.DbName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DbName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DbName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// See `spark.catalog.listDatabases`
  /// </summary>
  public sealed partial class ListDatabases : pb::IMessage<ListDatabases>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListDatabases> _parser = new pb::MessageParser<ListDatabases>(() => new ListDatabases());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ListDatabases> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.CatalogReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ListDatabases() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ListDatabases(ListDatabases other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ListDatabases Clone() {
      return new ListDatabases(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ListDatabases);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ListDatabases other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ListDatabases other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  /// See `spark.catalog.listTables`
  /// </summary>
  public sealed partial class ListTables : pb::IMessage<ListTables>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListTables> _parser = new pb::MessageParser<ListTables>(() => new ListTables());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ListTables> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.CatalogReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ListTables() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ListTables(ListTables other) : this() {
      dbName_ = other.dbName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ListTables Clone() {
      return new ListTables(this);
    }

    /// <summary>Field number for the "db_name" field.</summary>
    public const int DbNameFieldNumber = 1;
    private readonly static string DbNameDefaultValue = "";

    private string dbName_;
    /// <summary>
    /// (Optional)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DbName {
      get { return dbName_ ?? DbNameDefaultValue; }
      set {
        dbName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "db_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDbName {
      get { return dbName_ != null; }
    }
    /// <summary>Clears the value of the "db_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDbName() {
      dbName_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ListTables);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ListTables other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DbName != other.DbName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDbName) hash ^= DbName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasDbName) {
        output.WriteRawTag(10);
        output.WriteString(DbName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasDbName) {
        output.WriteRawTag(10);
        output.WriteString(DbName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasDbName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DbName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ListTables other) {
      if (other == null) {
        return;
      }
      if (other.HasDbName) {
        DbName = other.DbName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DbName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DbName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// See `spark.catalog.listFunctions`
  /// </summary>
  public sealed partial class ListFunctions : pb::IMessage<ListFunctions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListFunctions> _parser = new pb::MessageParser<ListFunctions>(() => new ListFunctions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ListFunctions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.CatalogReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ListFunctions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ListFunctions(ListFunctions other) : this() {
      dbName_ = other.dbName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ListFunctions Clone() {
      return new ListFunctions(this);
    }

    /// <summary>Field number for the "db_name" field.</summary>
    public const int DbNameFieldNumber = 1;
    private readonly static string DbNameDefaultValue = "";

    private string dbName_;
    /// <summary>
    /// (Optional)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DbName {
      get { return dbName_ ?? DbNameDefaultValue; }
      set {
        dbName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "db_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDbName {
      get { return dbName_ != null; }
    }
    /// <summary>Clears the value of the "db_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDbName() {
      dbName_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ListFunctions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ListFunctions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DbName != other.DbName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDbName) hash ^= DbName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasDbName) {
        output.WriteRawTag(10);
        output.WriteString(DbName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasDbName) {
        output.WriteRawTag(10);
        output.WriteString(DbName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasDbName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DbName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ListFunctions other) {
      if (other == null) {
        return;
      }
      if (other.HasDbName) {
        DbName = other.DbName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DbName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DbName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// See `spark.catalog.listColumns`
  /// </summary>
  public sealed partial class ListColumns : pb::IMessage<ListColumns>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListColumns> _parser = new pb::MessageParser<ListColumns>(() => new ListColumns());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ListColumns> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.CatalogReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ListColumns() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ListColumns(ListColumns other) : this() {
      tableName_ = other.tableName_;
      dbName_ = other.dbName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ListColumns Clone() {
      return new ListColumns(this);
    }

    /// <summary>Field number for the "table_name" field.</summary>
    public const int TableNameFieldNumber = 1;
    private string tableName_ = "";
    /// <summary>
    /// (Required)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TableName {
      get { return tableName_; }
      set {
        tableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "db_name" field.</summary>
    public const int DbNameFieldNumber = 2;
    private readonly static string DbNameDefaultValue = "";

    private string dbName_;
    /// <summary>
    /// (Optional)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DbName {
      get { return dbName_ ?? DbNameDefaultValue; }
      set {
        dbName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "db_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDbName {
      get { return dbName_ != null; }
    }
    /// <summary>Clears the value of the "db_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDbName() {
      dbName_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ListColumns);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ListColumns other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TableName != other.TableName) return false;
      if (DbName != other.DbName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (TableName.Length != 0) hash ^= TableName.GetHashCode();
      if (HasDbName) hash ^= DbName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TableName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TableName);
      }
      if (HasDbName) {
        output.WriteRawTag(18);
        output.WriteString(DbName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TableName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TableName);
      }
      if (HasDbName) {
        output.WriteRawTag(18);
        output.WriteString(DbName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (TableName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
      }
      if (HasDbName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DbName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ListColumns other) {
      if (other == null) {
        return;
      }
      if (other.TableName.Length != 0) {
        TableName = other.TableName;
      }
      if (other.HasDbName) {
        DbName = other.DbName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TableName = input.ReadString();
            break;
          }
          case 18: {
            DbName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TableName = input.ReadString();
            break;
          }
          case 18: {
            DbName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// See `spark.catalog.getDatabase`
  /// </summary>
  public sealed partial class GetDatabase : pb::IMessage<GetDatabase>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetDatabase> _parser = new pb::MessageParser<GetDatabase>(() => new GetDatabase());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetDatabase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.CatalogReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetDatabase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetDatabase(GetDatabase other) : this() {
      dbName_ = other.dbName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetDatabase Clone() {
      return new GetDatabase(this);
    }

    /// <summary>Field number for the "db_name" field.</summary>
    public const int DbNameFieldNumber = 1;
    private string dbName_ = "";
    /// <summary>
    /// (Required)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DbName {
      get { return dbName_; }
      set {
        dbName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetDatabase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetDatabase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DbName != other.DbName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (DbName.Length != 0) hash ^= DbName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DbName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DbName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DbName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DbName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (DbName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DbName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetDatabase other) {
      if (other == null) {
        return;
      }
      if (other.DbName.Length != 0) {
        DbName = other.DbName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DbName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DbName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// See `spark.catalog.getTable`
  /// </summary>
  public sealed partial class GetTable : pb::IMessage<GetTable>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetTable> _parser = new pb::MessageParser<GetTable>(() => new GetTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.CatalogReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetTable(GetTable other) : this() {
      tableName_ = other.tableName_;
      dbName_ = other.dbName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetTable Clone() {
      return new GetTable(this);
    }

    /// <summary>Field number for the "table_name" field.</summary>
    public const int TableNameFieldNumber = 1;
    private string tableName_ = "";
    /// <summary>
    /// (Required)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TableName {
      get { return tableName_; }
      set {
        tableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "db_name" field.</summary>
    public const int DbNameFieldNumber = 2;
    private readonly static string DbNameDefaultValue = "";

    private string dbName_;
    /// <summary>
    /// (Optional)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DbName {
      get { return dbName_ ?? DbNameDefaultValue; }
      set {
        dbName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "db_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDbName {
      get { return dbName_ != null; }
    }
    /// <summary>Clears the value of the "db_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDbName() {
      dbName_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TableName != other.TableName) return false;
      if (DbName != other.DbName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (TableName.Length != 0) hash ^= TableName.GetHashCode();
      if (HasDbName) hash ^= DbName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TableName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TableName);
      }
      if (HasDbName) {
        output.WriteRawTag(18);
        output.WriteString(DbName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TableName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TableName);
      }
      if (HasDbName) {
        output.WriteRawTag(18);
        output.WriteString(DbName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (TableName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
      }
      if (HasDbName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DbName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetTable other) {
      if (other == null) {
        return;
      }
      if (other.TableName.Length != 0) {
        TableName = other.TableName;
      }
      if (other.HasDbName) {
        DbName = other.DbName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TableName = input.ReadString();
            break;
          }
          case 18: {
            DbName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TableName = input.ReadString();
            break;
          }
          case 18: {
            DbName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// See `spark.catalog.getFunction`
  /// </summary>
  public sealed partial class GetFunction : pb::IMessage<GetFunction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetFunction> _parser = new pb::MessageParser<GetFunction>(() => new GetFunction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GetFunction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.CatalogReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetFunction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetFunction(GetFunction other) : this() {
      functionName_ = other.functionName_;
      dbName_ = other.dbName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GetFunction Clone() {
      return new GetFunction(this);
    }

    /// <summary>Field number for the "function_name" field.</summary>
    public const int FunctionNameFieldNumber = 1;
    private string functionName_ = "";
    /// <summary>
    /// (Required)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FunctionName {
      get { return functionName_; }
      set {
        functionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "db_name" field.</summary>
    public const int DbNameFieldNumber = 2;
    private readonly static string DbNameDefaultValue = "";

    private string dbName_;
    /// <summary>
    /// (Optional)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DbName {
      get { return dbName_ ?? DbNameDefaultValue; }
      set {
        dbName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "db_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDbName {
      get { return dbName_ != null; }
    }
    /// <summary>Clears the value of the "db_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDbName() {
      dbName_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GetFunction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GetFunction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FunctionName != other.FunctionName) return false;
      if (DbName != other.DbName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (FunctionName.Length != 0) hash ^= FunctionName.GetHashCode();
      if (HasDbName) hash ^= DbName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FunctionName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FunctionName);
      }
      if (HasDbName) {
        output.WriteRawTag(18);
        output.WriteString(DbName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FunctionName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FunctionName);
      }
      if (HasDbName) {
        output.WriteRawTag(18);
        output.WriteString(DbName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (FunctionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FunctionName);
      }
      if (HasDbName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DbName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GetFunction other) {
      if (other == null) {
        return;
      }
      if (other.FunctionName.Length != 0) {
        FunctionName = other.FunctionName;
      }
      if (other.HasDbName) {
        DbName = other.DbName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FunctionName = input.ReadString();
            break;
          }
          case 18: {
            DbName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FunctionName = input.ReadString();
            break;
          }
          case 18: {
            DbName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// See `spark.catalog.databaseExists`
  /// </summary>
  public sealed partial class DatabaseExists : pb::IMessage<DatabaseExists>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DatabaseExists> _parser = new pb::MessageParser<DatabaseExists>(() => new DatabaseExists());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DatabaseExists> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.CatalogReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DatabaseExists() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DatabaseExists(DatabaseExists other) : this() {
      dbName_ = other.dbName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DatabaseExists Clone() {
      return new DatabaseExists(this);
    }

    /// <summary>Field number for the "db_name" field.</summary>
    public const int DbNameFieldNumber = 1;
    private string dbName_ = "";
    /// <summary>
    /// (Required)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DbName {
      get { return dbName_; }
      set {
        dbName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DatabaseExists);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DatabaseExists other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DbName != other.DbName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (DbName.Length != 0) hash ^= DbName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DbName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DbName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DbName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DbName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (DbName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DbName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DatabaseExists other) {
      if (other == null) {
        return;
      }
      if (other.DbName.Length != 0) {
        DbName = other.DbName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DbName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            DbName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// See `spark.catalog.tableExists`
  /// </summary>
  public sealed partial class TableExists : pb::IMessage<TableExists>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TableExists> _parser = new pb::MessageParser<TableExists>(() => new TableExists());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TableExists> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.CatalogReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TableExists() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TableExists(TableExists other) : this() {
      tableName_ = other.tableName_;
      dbName_ = other.dbName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TableExists Clone() {
      return new TableExists(this);
    }

    /// <summary>Field number for the "table_name" field.</summary>
    public const int TableNameFieldNumber = 1;
    private string tableName_ = "";
    /// <summary>
    /// (Required)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TableName {
      get { return tableName_; }
      set {
        tableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "db_name" field.</summary>
    public const int DbNameFieldNumber = 2;
    private readonly static string DbNameDefaultValue = "";

    private string dbName_;
    /// <summary>
    /// (Optional)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DbName {
      get { return dbName_ ?? DbNameDefaultValue; }
      set {
        dbName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "db_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDbName {
      get { return dbName_ != null; }
    }
    /// <summary>Clears the value of the "db_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDbName() {
      dbName_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TableExists);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TableExists other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TableName != other.TableName) return false;
      if (DbName != other.DbName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (TableName.Length != 0) hash ^= TableName.GetHashCode();
      if (HasDbName) hash ^= DbName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TableName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TableName);
      }
      if (HasDbName) {
        output.WriteRawTag(18);
        output.WriteString(DbName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TableName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TableName);
      }
      if (HasDbName) {
        output.WriteRawTag(18);
        output.WriteString(DbName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (TableName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
      }
      if (HasDbName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DbName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TableExists other) {
      if (other == null) {
        return;
      }
      if (other.TableName.Length != 0) {
        TableName = other.TableName;
      }
      if (other.HasDbName) {
        DbName = other.DbName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TableName = input.ReadString();
            break;
          }
          case 18: {
            DbName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TableName = input.ReadString();
            break;
          }
          case 18: {
            DbName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// See `spark.catalog.functionExists`
  /// </summary>
  public sealed partial class FunctionExists : pb::IMessage<FunctionExists>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FunctionExists> _parser = new pb::MessageParser<FunctionExists>(() => new FunctionExists());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FunctionExists> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.CatalogReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FunctionExists() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FunctionExists(FunctionExists other) : this() {
      functionName_ = other.functionName_;
      dbName_ = other.dbName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FunctionExists Clone() {
      return new FunctionExists(this);
    }

    /// <summary>Field number for the "function_name" field.</summary>
    public const int FunctionNameFieldNumber = 1;
    private string functionName_ = "";
    /// <summary>
    /// (Required)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FunctionName {
      get { return functionName_; }
      set {
        functionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "db_name" field.</summary>
    public const int DbNameFieldNumber = 2;
    private readonly static string DbNameDefaultValue = "";

    private string dbName_;
    /// <summary>
    /// (Optional)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DbName {
      get { return dbName_ ?? DbNameDefaultValue; }
      set {
        dbName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "db_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDbName {
      get { return dbName_ != null; }
    }
    /// <summary>Clears the value of the "db_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDbName() {
      dbName_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FunctionExists);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FunctionExists other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FunctionName != other.FunctionName) return false;
      if (DbName != other.DbName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (FunctionName.Length != 0) hash ^= FunctionName.GetHashCode();
      if (HasDbName) hash ^= DbName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FunctionName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FunctionName);
      }
      if (HasDbName) {
        output.WriteRawTag(18);
        output.WriteString(DbName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FunctionName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FunctionName);
      }
      if (HasDbName) {
        output.WriteRawTag(18);
        output.WriteString(DbName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (FunctionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FunctionName);
      }
      if (HasDbName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DbName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FunctionExists other) {
      if (other == null) {
        return;
      }
      if (other.FunctionName.Length != 0) {
        FunctionName = other.FunctionName;
      }
      if (other.HasDbName) {
        DbName = other.DbName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FunctionName = input.ReadString();
            break;
          }
          case 18: {
            DbName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FunctionName = input.ReadString();
            break;
          }
          case 18: {
            DbName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// See `spark.catalog.createExternalTable`
  /// </summary>
  public sealed partial class CreateExternalTable : pb::IMessage<CreateExternalTable>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CreateExternalTable> _parser = new pb::MessageParser<CreateExternalTable>(() => new CreateExternalTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CreateExternalTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.CatalogReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateExternalTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateExternalTable(CreateExternalTable other) : this() {
      tableName_ = other.tableName_;
      path_ = other.path_;
      source_ = other.source_;
      schema_ = other.schema_ != null ? other.schema_.Clone() : null;
      options_ = other.options_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateExternalTable Clone() {
      return new CreateExternalTable(this);
    }

    /// <summary>Field number for the "table_name" field.</summary>
    public const int TableNameFieldNumber = 1;
    private string tableName_ = "";
    /// <summary>
    /// (Required)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TableName {
      get { return tableName_; }
      set {
        tableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 2;
    private readonly static string PathDefaultValue = "";

    private string path_;
    /// <summary>
    /// (Optional)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Path {
      get { return path_ ?? PathDefaultValue; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "path" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPath {
      get { return path_ != null; }
    }
    /// <summary>Clears the value of the "path" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPath() {
      path_ = null;
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 3;
    private readonly static string SourceDefaultValue = "";

    private string source_;
    /// <summary>
    /// (Optional)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Source {
      get { return source_ ?? SourceDefaultValue; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "source" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSource {
      get { return source_ != null; }
    }
    /// <summary>Clears the value of the "source" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSource() {
      source_ = null;
    }

    /// <summary>Field number for the "schema" field.</summary>
    public const int SchemaFieldNumber = 4;
    private global::Spark.Connect.DataType schema_;
    /// <summary>
    /// (Optional)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.DataType Schema {
      get { return schema_; }
      set {
        schema_ = value;
      }
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 5;
    private static readonly pbc::MapField<string, string>.Codec _map_options_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 42);
    private readonly pbc::MapField<string, string> options_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Options could be empty for valid data source format.
    /// The map key is case insensitive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<string, string> Options {
      get { return options_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CreateExternalTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CreateExternalTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TableName != other.TableName) return false;
      if (Path != other.Path) return false;
      if (Source != other.Source) return false;
      if (!object.Equals(Schema, other.Schema)) return false;
      if (!Options.Equals(other.Options)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (TableName.Length != 0) hash ^= TableName.GetHashCode();
      if (HasPath) hash ^= Path.GetHashCode();
      if (HasSource) hash ^= Source.GetHashCode();
      if (schema_ != null) hash ^= Schema.GetHashCode();
      hash ^= Options.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TableName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TableName);
      }
      if (HasPath) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
      if (HasSource) {
        output.WriteRawTag(26);
        output.WriteString(Source);
      }
      if (schema_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Schema);
      }
      options_.WriteTo(output, _map_options_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TableName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TableName);
      }
      if (HasPath) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
      if (HasSource) {
        output.WriteRawTag(26);
        output.WriteString(Source);
      }
      if (schema_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Schema);
      }
      options_.WriteTo(ref output, _map_options_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (TableName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
      }
      if (HasPath) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (HasSource) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (schema_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Schema);
      }
      size += options_.CalculateSize(_map_options_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CreateExternalTable other) {
      if (other == null) {
        return;
      }
      if (other.TableName.Length != 0) {
        TableName = other.TableName;
      }
      if (other.HasPath) {
        Path = other.Path;
      }
      if (other.HasSource) {
        Source = other.Source;
      }
      if (other.schema_ != null) {
        if (schema_ == null) {
          Schema = new global::Spark.Connect.DataType();
        }
        Schema.MergeFrom(other.Schema);
      }
      options_.MergeFrom(other.options_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TableName = input.ReadString();
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
          case 26: {
            Source = input.ReadString();
            break;
          }
          case 34: {
            if (schema_ == null) {
              Schema = new global::Spark.Connect.DataType();
            }
            input.ReadMessage(Schema);
            break;
          }
          case 42: {
            options_.AddEntriesFrom(input, _map_options_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TableName = input.ReadString();
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
          case 26: {
            Source = input.ReadString();
            break;
          }
          case 34: {
            if (schema_ == null) {
              Schema = new global::Spark.Connect.DataType();
            }
            input.ReadMessage(Schema);
            break;
          }
          case 42: {
            options_.AddEntriesFrom(ref input, _map_options_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// See `spark.catalog.createTable`
  /// </summary>
  public sealed partial class CreateTable : pb::IMessage<CreateTable>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CreateTable> _parser = new pb::MessageParser<CreateTable>(() => new CreateTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CreateTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.CatalogReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateTable(CreateTable other) : this() {
      tableName_ = other.tableName_;
      path_ = other.path_;
      source_ = other.source_;
      description_ = other.description_;
      schema_ = other.schema_ != null ? other.schema_.Clone() : null;
      options_ = other.options_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateTable Clone() {
      return new CreateTable(this);
    }

    /// <summary>Field number for the "table_name" field.</summary>
    public const int TableNameFieldNumber = 1;
    private string tableName_ = "";
    /// <summary>
    /// (Required)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TableName {
      get { return tableName_; }
      set {
        tableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 2;
    private readonly static string PathDefaultValue = "";

    private string path_;
    /// <summary>
    /// (Optional)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Path {
      get { return path_ ?? PathDefaultValue; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "path" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPath {
      get { return path_ != null; }
    }
    /// <summary>Clears the value of the "path" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPath() {
      path_ = null;
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 3;
    private readonly static string SourceDefaultValue = "";

    private string source_;
    /// <summary>
    /// (Optional)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Source {
      get { return source_ ?? SourceDefaultValue; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "source" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSource {
      get { return source_ != null; }
    }
    /// <summary>Clears the value of the "source" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSource() {
      source_ = null;
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private readonly static string DescriptionDefaultValue = "";

    private string description_;
    /// <summary>
    /// (Optional)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Description {
      get { return description_ ?? DescriptionDefaultValue; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the "description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDescription() {
      description_ = null;
    }

    /// <summary>Field number for the "schema" field.</summary>
    public const int SchemaFieldNumber = 5;
    private global::Spark.Connect.DataType schema_;
    /// <summary>
    /// (Optional)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.DataType Schema {
      get { return schema_; }
      set {
        schema_ = value;
      }
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 6;
    private static readonly pbc::MapField<string, string>.Codec _map_options_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 50);
    private readonly pbc::MapField<string, string> options_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Options could be empty for valid data source format.
    /// The map key is case insensitive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<string, string> Options {
      get { return options_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CreateTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CreateTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TableName != other.TableName) return false;
      if (Path != other.Path) return false;
      if (Source != other.Source) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(Schema, other.Schema)) return false;
      if (!Options.Equals(other.Options)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (TableName.Length != 0) hash ^= TableName.GetHashCode();
      if (HasPath) hash ^= Path.GetHashCode();
      if (HasSource) hash ^= Source.GetHashCode();
      if (HasDescription) hash ^= Description.GetHashCode();
      if (schema_ != null) hash ^= Schema.GetHashCode();
      hash ^= Options.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TableName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TableName);
      }
      if (HasPath) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
      if (HasSource) {
        output.WriteRawTag(26);
        output.WriteString(Source);
      }
      if (HasDescription) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (schema_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Schema);
      }
      options_.WriteTo(output, _map_options_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TableName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TableName);
      }
      if (HasPath) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
      if (HasSource) {
        output.WriteRawTag(26);
        output.WriteString(Source);
      }
      if (HasDescription) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (schema_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Schema);
      }
      options_.WriteTo(ref output, _map_options_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (TableName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
      }
      if (HasPath) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (HasSource) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (HasDescription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (schema_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Schema);
      }
      size += options_.CalculateSize(_map_options_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CreateTable other) {
      if (other == null) {
        return;
      }
      if (other.TableName.Length != 0) {
        TableName = other.TableName;
      }
      if (other.HasPath) {
        Path = other.Path;
      }
      if (other.HasSource) {
        Source = other.Source;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      if (other.schema_ != null) {
        if (schema_ == null) {
          Schema = new global::Spark.Connect.DataType();
        }
        Schema.MergeFrom(other.Schema);
      }
      options_.MergeFrom(other.options_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TableName = input.ReadString();
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
          case 26: {
            Source = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            if (schema_ == null) {
              Schema = new global::Spark.Connect.DataType();
            }
            input.ReadMessage(Schema);
            break;
          }
          case 50: {
            options_.AddEntriesFrom(input, _map_options_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TableName = input.ReadString();
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
          case 26: {
            Source = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            if (schema_ == null) {
              Schema = new global::Spark.Connect.DataType();
            }
            input.ReadMessage(Schema);
            break;
          }
          case 50: {
            options_.AddEntriesFrom(ref input, _map_options_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// See `spark.catalog.dropTempView`
  /// </summary>
  public sealed partial class DropTempView : pb::IMessage<DropTempView>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DropTempView> _parser = new pb::MessageParser<DropTempView>(() => new DropTempView());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DropTempView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.CatalogReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DropTempView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DropTempView(DropTempView other) : this() {
      viewName_ = other.viewName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DropTempView Clone() {
      return new DropTempView(this);
    }

    /// <summary>Field number for the "view_name" field.</summary>
    public const int ViewNameFieldNumber = 1;
    private string viewName_ = "";
    /// <summary>
    /// (Required)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ViewName {
      get { return viewName_; }
      set {
        viewName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DropTempView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DropTempView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ViewName != other.ViewName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (ViewName.Length != 0) hash ^= ViewName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ViewName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ViewName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ViewName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ViewName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (ViewName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ViewName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DropTempView other) {
      if (other == null) {
        return;
      }
      if (other.ViewName.Length != 0) {
        ViewName = other.ViewName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ViewName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ViewName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// See `spark.catalog.dropGlobalTempView`
  /// </summary>
  public sealed partial class DropGlobalTempView : pb::IMessage<DropGlobalTempView>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DropGlobalTempView> _parser = new pb::MessageParser<DropGlobalTempView>(() => new DropGlobalTempView());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DropGlobalTempView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.CatalogReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DropGlobalTempView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DropGlobalTempView(DropGlobalTempView other) : this() {
      viewName_ = other.viewName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DropGlobalTempView Clone() {
      return new DropGlobalTempView(this);
    }

    /// <summary>Field number for the "view_name" field.</summary>
    public const int ViewNameFieldNumber = 1;
    private string viewName_ = "";
    /// <summary>
    /// (Required)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ViewName {
      get { return viewName_; }
      set {
        viewName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DropGlobalTempView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DropGlobalTempView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ViewName != other.ViewName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (ViewName.Length != 0) hash ^= ViewName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ViewName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ViewName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ViewName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ViewName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (ViewName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ViewName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DropGlobalTempView other) {
      if (other == null) {
        return;
      }
      if (other.ViewName.Length != 0) {
        ViewName = other.ViewName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ViewName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ViewName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// See `spark.catalog.recoverPartitions`
  /// </summary>
  public sealed partial class RecoverPartitions : pb::IMessage<RecoverPartitions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RecoverPartitions> _parser = new pb::MessageParser<RecoverPartitions>(() => new RecoverPartitions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RecoverPartitions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.CatalogReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RecoverPartitions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RecoverPartitions(RecoverPartitions other) : this() {
      tableName_ = other.tableName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RecoverPartitions Clone() {
      return new RecoverPartitions(this);
    }

    /// <summary>Field number for the "table_name" field.</summary>
    public const int TableNameFieldNumber = 1;
    private string tableName_ = "";
    /// <summary>
    /// (Required)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TableName {
      get { return tableName_; }
      set {
        tableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RecoverPartitions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RecoverPartitions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TableName != other.TableName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (TableName.Length != 0) hash ^= TableName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TableName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TableName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TableName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TableName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (TableName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RecoverPartitions other) {
      if (other == null) {
        return;
      }
      if (other.TableName.Length != 0) {
        TableName = other.TableName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TableName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TableName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// See `spark.catalog.isCached`
  /// </summary>
  public sealed partial class IsCached : pb::IMessage<IsCached>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<IsCached> _parser = new pb::MessageParser<IsCached>(() => new IsCached());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<IsCached> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.CatalogReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public IsCached() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public IsCached(IsCached other) : this() {
      tableName_ = other.tableName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public IsCached Clone() {
      return new IsCached(this);
    }

    /// <summary>Field number for the "table_name" field.</summary>
    public const int TableNameFieldNumber = 1;
    private string tableName_ = "";
    /// <summary>
    /// (Required)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TableName {
      get { return tableName_; }
      set {
        tableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as IsCached);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(IsCached other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TableName != other.TableName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (TableName.Length != 0) hash ^= TableName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TableName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TableName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TableName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TableName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (TableName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(IsCached other) {
      if (other == null) {
        return;
      }
      if (other.TableName.Length != 0) {
        TableName = other.TableName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TableName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TableName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// See `spark.catalog.cacheTable`
  /// </summary>
  public sealed partial class CacheTable : pb::IMessage<CacheTable>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CacheTable> _parser = new pb::MessageParser<CacheTable>(() => new CacheTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CacheTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.CatalogReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CacheTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CacheTable(CacheTable other) : this() {
      tableName_ = other.tableName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CacheTable Clone() {
      return new CacheTable(this);
    }

    /// <summary>Field number for the "table_name" field.</summary>
    public const int TableNameFieldNumber = 1;
    private string tableName_ = "";
    /// <summary>
    /// (Required)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TableName {
      get { return tableName_; }
      set {
        tableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CacheTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CacheTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TableName != other.TableName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (TableName.Length != 0) hash ^= TableName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TableName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TableName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TableName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TableName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (TableName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CacheTable other) {
      if (other == null) {
        return;
      }
      if (other.TableName.Length != 0) {
        TableName = other.TableName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TableName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TableName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// See `spark.catalog.uncacheTable`
  /// </summary>
  public sealed partial class UncacheTable : pb::IMessage<UncacheTable>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UncacheTable> _parser = new pb::MessageParser<UncacheTable>(() => new UncacheTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UncacheTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.CatalogReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UncacheTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UncacheTable(UncacheTable other) : this() {
      tableName_ = other.tableName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UncacheTable Clone() {
      return new UncacheTable(this);
    }

    /// <summary>Field number for the "table_name" field.</summary>
    public const int TableNameFieldNumber = 1;
    private string tableName_ = "";
    /// <summary>
    /// (Required)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TableName {
      get { return tableName_; }
      set {
        tableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UncacheTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UncacheTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TableName != other.TableName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (TableName.Length != 0) hash ^= TableName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TableName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TableName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TableName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TableName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (TableName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UncacheTable other) {
      if (other == null) {
        return;
      }
      if (other.TableName.Length != 0) {
        TableName = other.TableName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TableName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TableName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// See `spark.catalog.clearCache`
  /// </summary>
  public sealed partial class ClearCache : pb::IMessage<ClearCache>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ClearCache> _parser = new pb::MessageParser<ClearCache>(() => new ClearCache());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ClearCache> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.CatalogReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ClearCache() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ClearCache(ClearCache other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ClearCache Clone() {
      return new ClearCache(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ClearCache);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ClearCache other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ClearCache other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  /// See `spark.catalog.refreshTable`
  /// </summary>
  public sealed partial class RefreshTable : pb::IMessage<RefreshTable>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RefreshTable> _parser = new pb::MessageParser<RefreshTable>(() => new RefreshTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RefreshTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.CatalogReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RefreshTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RefreshTable(RefreshTable other) : this() {
      tableName_ = other.tableName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RefreshTable Clone() {
      return new RefreshTable(this);
    }

    /// <summary>Field number for the "table_name" field.</summary>
    public const int TableNameFieldNumber = 1;
    private string tableName_ = "";
    /// <summary>
    /// (Required)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TableName {
      get { return tableName_; }
      set {
        tableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RefreshTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RefreshTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TableName != other.TableName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (TableName.Length != 0) hash ^= TableName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TableName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TableName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TableName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TableName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (TableName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RefreshTable other) {
      if (other == null) {
        return;
      }
      if (other.TableName.Length != 0) {
        TableName = other.TableName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TableName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TableName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// See `spark.catalog.refreshByPath`
  /// </summary>
  public sealed partial class RefreshByPath : pb::IMessage<RefreshByPath>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RefreshByPath> _parser = new pb::MessageParser<RefreshByPath>(() => new RefreshByPath());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RefreshByPath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.CatalogReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RefreshByPath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RefreshByPath(RefreshByPath other) : this() {
      path_ = other.path_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RefreshByPath Clone() {
      return new RefreshByPath(this);
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 1;
    private string path_ = "";
    /// <summary>
    /// (Required)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RefreshByPath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RefreshByPath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Path != other.Path) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Path.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Path);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Path.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Path);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RefreshByPath other) {
      if (other == null) {
        return;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Path = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Path = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// See `spark.catalog.currentCatalog`
  /// </summary>
  public sealed partial class CurrentCatalog : pb::IMessage<CurrentCatalog>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CurrentCatalog> _parser = new pb::MessageParser<CurrentCatalog>(() => new CurrentCatalog());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CurrentCatalog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.CatalogReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CurrentCatalog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CurrentCatalog(CurrentCatalog other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CurrentCatalog Clone() {
      return new CurrentCatalog(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CurrentCatalog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CurrentCatalog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CurrentCatalog other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  /// See `spark.catalog.setCurrentCatalog`
  /// </summary>
  public sealed partial class SetCurrentCatalog : pb::IMessage<SetCurrentCatalog>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SetCurrentCatalog> _parser = new pb::MessageParser<SetCurrentCatalog>(() => new SetCurrentCatalog());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SetCurrentCatalog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.CatalogReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SetCurrentCatalog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SetCurrentCatalog(SetCurrentCatalog other) : this() {
      catalogName_ = other.catalogName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SetCurrentCatalog Clone() {
      return new SetCurrentCatalog(this);
    }

    /// <summary>Field number for the "catalog_name" field.</summary>
    public const int CatalogNameFieldNumber = 1;
    private string catalogName_ = "";
    /// <summary>
    /// (Required)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CatalogName {
      get { return catalogName_; }
      set {
        catalogName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SetCurrentCatalog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SetCurrentCatalog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CatalogName != other.CatalogName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (CatalogName.Length != 0) hash ^= CatalogName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CatalogName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CatalogName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CatalogName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CatalogName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (CatalogName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CatalogName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SetCurrentCatalog other) {
      if (other == null) {
        return;
      }
      if (other.CatalogName.Length != 0) {
        CatalogName = other.CatalogName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CatalogName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            CatalogName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// See `spark.catalog.listCatalogs`
  /// </summary>
  public sealed partial class ListCatalogs : pb::IMessage<ListCatalogs>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListCatalogs> _parser = new pb::MessageParser<ListCatalogs>(() => new ListCatalogs());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ListCatalogs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.CatalogReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ListCatalogs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ListCatalogs(ListCatalogs other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ListCatalogs Clone() {
      return new ListCatalogs(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ListCatalogs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ListCatalogs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ListCatalogs other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
