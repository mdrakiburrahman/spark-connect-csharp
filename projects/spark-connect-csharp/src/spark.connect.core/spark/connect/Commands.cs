// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: spark/connect/commands.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spark.Connect {

  /// <summary>Holder for reflection information generated from spark/connect/commands.proto</summary>
  public static partial class CommandsReflection {

    #region Descriptor
    /// <summary>File descriptor for spark/connect/commands.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommandsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxzcGFyay9jb25uZWN0L2NvbW1hbmRzLnByb3RvEg1zcGFyay5jb25uZWN0",
            "Ghlnb29nbGUvcHJvdG9idWYvYW55LnByb3RvGh9zcGFyay9jb25uZWN0L2V4",
            "cHJlc3Npb25zLnByb3RvGh1zcGFyay9jb25uZWN0L3JlbGF0aW9ucy5wcm90",
            "byKJAwoHQ29tbWFuZBJLChFyZWdpc3Rlcl9mdW5jdGlvbhgBIAEoCzIuLnNw",
            "YXJrLmNvbm5lY3QuQ29tbW9uSW5saW5lVXNlckRlZmluZWRGdW5jdGlvbkgA",
            "EjgKD3dyaXRlX29wZXJhdGlvbhgCIAEoCzIdLnNwYXJrLmNvbm5lY3QuV3Jp",
            "dGVPcGVyYXRpb25IABJKChVjcmVhdGVfZGF0YWZyYW1lX3ZpZXcYAyABKAsy",
            "KS5zcGFyay5jb25uZWN0LkNyZWF0ZURhdGFGcmFtZVZpZXdDb21tYW5kSAAS",
            "PQoSd3JpdGVfb3BlcmF0aW9uX3YyGAQgASgLMh8uc3BhcmsuY29ubmVjdC5X",
            "cml0ZU9wZXJhdGlvblYySAASMAoLc3FsX2NvbW1hbmQYBSABKAsyGS5zcGFy",
            "ay5jb25uZWN0LlNxbENvbW1hbmRIABIqCglleHRlbnNpb24Y5wcgASgLMhQu",
            "Z29vZ2xlLnByb3RvYnVmLkFueUgAQg4KDGNvbW1hbmRfdHlwZSKcAQoKU3Fs",
            "Q29tbWFuZBILCgNzcWwYASABKAkSMQoEYXJncxgCIAMoCzIjLnNwYXJrLmNv",
            "bm5lY3QuU3FsQ29tbWFuZC5BcmdzRW50cnkaTgoJQXJnc0VudHJ5EgsKA2tl",
            "eRgBIAEoCRIwCgV2YWx1ZRgCIAEoCzIhLnNwYXJrLmNvbm5lY3QuRXhwcmVz",
            "c2lvbi5MaXRlcmFsOgI4ASJ2ChpDcmVhdGVEYXRhRnJhbWVWaWV3Q29tbWFu",
            "ZBImCgVpbnB1dBgBIAEoCzIXLnNwYXJrLmNvbm5lY3QuUmVsYXRpb24SDAoE",
            "bmFtZRgCIAEoCRIRCglpc19nbG9iYWwYAyABKAgSDwoHcmVwbGFjZRgEIAEo",
            "CCL+BgoOV3JpdGVPcGVyYXRpb24SJgoFaW5wdXQYASABKAsyFy5zcGFyay5j",
            "b25uZWN0LlJlbGF0aW9uEhMKBnNvdXJjZRgCIAEoCUgBiAEBEg4KBHBhdGgY",
            "AyABKAlIABI4CgV0YWJsZRgEIAEoCzInLnNwYXJrLmNvbm5lY3QuV3JpdGVP",
            "cGVyYXRpb24uU2F2ZVRhYmxlSAASNAoEbW9kZRgFIAEoDjImLnNwYXJrLmNv",
            "bm5lY3QuV3JpdGVPcGVyYXRpb24uU2F2ZU1vZGUSGQoRc29ydF9jb2x1bW5f",
            "bmFtZXMYBiADKAkSHAoUcGFydGl0aW9uaW5nX2NvbHVtbnMYByADKAkSOQoJ",
            "YnVja2V0X2J5GAggASgLMiYuc3BhcmsuY29ubmVjdC5Xcml0ZU9wZXJhdGlv",
            "bi5CdWNrZXRCeRI7CgdvcHRpb25zGAkgAygLMiouc3BhcmsuY29ubmVjdC5X",
            "cml0ZU9wZXJhdGlvbi5PcHRpb25zRW50cnkaLgoMT3B0aW9uc0VudHJ5EgsK",
            "A2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEa6wEKCVNhdmVUYWJsZRIS",
            "Cgp0YWJsZV9uYW1lGAEgASgJEkwKC3NhdmVfbWV0aG9kGAIgASgOMjcuc3Bh",
            "cmsuY29ubmVjdC5Xcml0ZU9wZXJhdGlvbi5TYXZlVGFibGUuVGFibGVTYXZl",
            "TWV0aG9kInwKD1RhYmxlU2F2ZU1ldGhvZBIhCh1UQUJMRV9TQVZFX01FVEhP",
            "RF9VTlNQRUNJRklFRBAAEiMKH1RBQkxFX1NBVkVfTUVUSE9EX1NBVkVfQVNf",
            "VEFCTEUQARIhCh1UQUJMRV9TQVZFX01FVEhPRF9JTlNFUlRfSU5UTxACGjwK",
            "CEJ1Y2tldEJ5EhsKE2J1Y2tldF9jb2x1bW5fbmFtZXMYASADKAkSEwoLbnVt",
            "X2J1Y2tldHMYAiABKAUiiQEKCFNhdmVNb2RlEhkKFVNBVkVfTU9ERV9VTlNQ",
            "RUNJRklFRBAAEhQKEFNBVkVfTU9ERV9BUFBFTkQQARIXChNTQVZFX01PREVf",
            "T1ZFUldSSVRFEAISHQoZU0FWRV9NT0RFX0VSUk9SX0lGX0VYSVNUUxADEhQK",
            "EFNBVkVfTU9ERV9JR05PUkUQBEILCglzYXZlX3R5cGVCCQoHX3NvdXJjZSKw",
            "BQoQV3JpdGVPcGVyYXRpb25WMhImCgVpbnB1dBgBIAEoCzIXLnNwYXJrLmNv",
            "bm5lY3QuUmVsYXRpb24SEgoKdGFibGVfbmFtZRgCIAEoCRIVCghwcm92aWRl",
            "chgDIAEoCUgAiAEBEjcKFHBhcnRpdGlvbmluZ19jb2x1bW5zGAQgAygLMhku",
            "c3BhcmsuY29ubmVjdC5FeHByZXNzaW9uEj0KB29wdGlvbnMYBSADKAsyLC5z",
            "cGFyay5jb25uZWN0LldyaXRlT3BlcmF0aW9uVjIuT3B0aW9uc0VudHJ5Ek4K",
            "EHRhYmxlX3Byb3BlcnRpZXMYBiADKAsyNC5zcGFyay5jb25uZWN0LldyaXRl",
            "T3BlcmF0aW9uVjIuVGFibGVQcm9wZXJ0aWVzRW50cnkSMgoEbW9kZRgHIAEo",
            "DjIkLnNwYXJrLmNvbm5lY3QuV3JpdGVPcGVyYXRpb25WMi5Nb2RlEjYKE292",
            "ZXJ3cml0ZV9jb25kaXRpb24YCCABKAsyGS5zcGFyay5jb25uZWN0LkV4cHJl",
            "c3Npb24aLgoMT3B0aW9uc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgC",
            "IAEoCToCOAEaNgoUVGFibGVQcm9wZXJ0aWVzRW50cnkSCwoDa2V5GAEgASgJ",
            "Eg0KBXZhbHVlGAIgASgJOgI4ASKfAQoETW9kZRIUChBNT0RFX1VOU1BFQ0lG",
            "SUVEEAASDwoLTU9ERV9DUkVBVEUQARISCg5NT0RFX09WRVJXUklURRACEh0K",
            "GU1PREVfT1ZFUldSSVRFX1BBUlRJVElPTlMQAxIPCgtNT0RFX0FQUEVORBAE",
            "EhAKDE1PREVfUkVQTEFDRRAFEhoKFk1PREVfQ1JFQVRFX09SX1JFUExBQ0UQ",
            "BkILCglfcHJvdmlkZXJCIgoeb3JnLmFwYWNoZS5zcGFyay5jb25uZWN0LnBy",
            "b3RvUAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, global::Spark.Connect.ExpressionsReflection.Descriptor, global::Spark.Connect.RelationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Command), global::Spark.Connect.Command.Parser, new[]{ "RegisterFunction", "WriteOperation", "CreateDataframeView", "WriteOperationV2", "SqlCommand", "Extension" }, new[]{ "CommandType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.SqlCommand), global::Spark.Connect.SqlCommand.Parser, new[]{ "Sql", "Args" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.CreateDataFrameViewCommand), global::Spark.Connect.CreateDataFrameViewCommand.Parser, new[]{ "Input", "Name", "IsGlobal", "Replace" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.WriteOperation), global::Spark.Connect.WriteOperation.Parser, new[]{ "Input", "Source", "Path", "Table", "Mode", "SortColumnNames", "PartitioningColumns", "BucketBy", "Options" }, new[]{ "SaveType", "Source" }, new[]{ typeof(global::Spark.Connect.WriteOperation.Types.SaveMode) }, null, new pbr::GeneratedClrTypeInfo[] { null, new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.WriteOperation.Types.SaveTable), global::Spark.Connect.WriteOperation.Types.SaveTable.Parser, new[]{ "TableName", "SaveMethod" }, null, new[]{ typeof(global::Spark.Connect.WriteOperation.Types.SaveTable.Types.TableSaveMethod) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.WriteOperation.Types.BucketBy), global::Spark.Connect.WriteOperation.Types.BucketBy.Parser, new[]{ "BucketColumnNames", "NumBuckets" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.WriteOperationV2), global::Spark.Connect.WriteOperationV2.Parser, new[]{ "Input", "TableName", "Provider", "PartitioningColumns", "Options", "TableProperties", "Mode", "OverwriteCondition" }, new[]{ "Provider" }, new[]{ typeof(global::Spark.Connect.WriteOperationV2.Types.Mode) }, null, new pbr::GeneratedClrTypeInfo[] { null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A [[Command]] is an operation that is executed by the server that does not directly consume or
  /// produce a relational result.
  /// </summary>
  public sealed partial class Command : pb::IMessage<Command>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Command> _parser = new pb::MessageParser<Command>(() => new Command());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Command> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.CommandsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Command() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Command(Command other) : this() {
      switch (other.CommandTypeCase) {
        case CommandTypeOneofCase.RegisterFunction:
          RegisterFunction = other.RegisterFunction.Clone();
          break;
        case CommandTypeOneofCase.WriteOperation:
          WriteOperation = other.WriteOperation.Clone();
          break;
        case CommandTypeOneofCase.CreateDataframeView:
          CreateDataframeView = other.CreateDataframeView.Clone();
          break;
        case CommandTypeOneofCase.WriteOperationV2:
          WriteOperationV2 = other.WriteOperationV2.Clone();
          break;
        case CommandTypeOneofCase.SqlCommand:
          SqlCommand = other.SqlCommand.Clone();
          break;
        case CommandTypeOneofCase.Extension:
          Extension = other.Extension.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Command Clone() {
      return new Command(this);
    }

    /// <summary>Field number for the "register_function" field.</summary>
    public const int RegisterFunctionFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.CommonInlineUserDefinedFunction RegisterFunction {
      get { return commandTypeCase_ == CommandTypeOneofCase.RegisterFunction ? (global::Spark.Connect.CommonInlineUserDefinedFunction) commandType_ : null; }
      set {
        commandType_ = value;
        commandTypeCase_ = value == null ? CommandTypeOneofCase.None : CommandTypeOneofCase.RegisterFunction;
      }
    }

    /// <summary>Field number for the "write_operation" field.</summary>
    public const int WriteOperationFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.WriteOperation WriteOperation {
      get { return commandTypeCase_ == CommandTypeOneofCase.WriteOperation ? (global::Spark.Connect.WriteOperation) commandType_ : null; }
      set {
        commandType_ = value;
        commandTypeCase_ = value == null ? CommandTypeOneofCase.None : CommandTypeOneofCase.WriteOperation;
      }
    }

    /// <summary>Field number for the "create_dataframe_view" field.</summary>
    public const int CreateDataframeViewFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.CreateDataFrameViewCommand CreateDataframeView {
      get { return commandTypeCase_ == CommandTypeOneofCase.CreateDataframeView ? (global::Spark.Connect.CreateDataFrameViewCommand) commandType_ : null; }
      set {
        commandType_ = value;
        commandTypeCase_ = value == null ? CommandTypeOneofCase.None : CommandTypeOneofCase.CreateDataframeView;
      }
    }

    /// <summary>Field number for the "write_operation_v2" field.</summary>
    public const int WriteOperationV2FieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.WriteOperationV2 WriteOperationV2 {
      get { return commandTypeCase_ == CommandTypeOneofCase.WriteOperationV2 ? (global::Spark.Connect.WriteOperationV2) commandType_ : null; }
      set {
        commandType_ = value;
        commandTypeCase_ = value == null ? CommandTypeOneofCase.None : CommandTypeOneofCase.WriteOperationV2;
      }
    }

    /// <summary>Field number for the "sql_command" field.</summary>
    public const int SqlCommandFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.SqlCommand SqlCommand {
      get { return commandTypeCase_ == CommandTypeOneofCase.SqlCommand ? (global::Spark.Connect.SqlCommand) commandType_ : null; }
      set {
        commandType_ = value;
        commandTypeCase_ = value == null ? CommandTypeOneofCase.None : CommandTypeOneofCase.SqlCommand;
      }
    }

    /// <summary>Field number for the "extension" field.</summary>
    public const int ExtensionFieldNumber = 999;
    /// <summary>
    /// This field is used to mark extensions to the protocol. When plugins generate arbitrary
    /// Commands they can add them here. During the planning the correct resolution is done.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Any Extension {
      get { return commandTypeCase_ == CommandTypeOneofCase.Extension ? (global::Google.Protobuf.WellKnownTypes.Any) commandType_ : null; }
      set {
        commandType_ = value;
        commandTypeCase_ = value == null ? CommandTypeOneofCase.None : CommandTypeOneofCase.Extension;
      }
    }

    private object commandType_;
    /// <summary>Enum of possible cases for the "command_type" oneof.</summary>
    public enum CommandTypeOneofCase {
      None = 0,
      RegisterFunction = 1,
      WriteOperation = 2,
      CreateDataframeView = 3,
      WriteOperationV2 = 4,
      SqlCommand = 5,
      Extension = 999,
    }
    private CommandTypeOneofCase commandTypeCase_ = CommandTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CommandTypeOneofCase CommandTypeCase {
      get { return commandTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCommandType() {
      commandTypeCase_ = CommandTypeOneofCase.None;
      commandType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Command);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Command other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RegisterFunction, other.RegisterFunction)) return false;
      if (!object.Equals(WriteOperation, other.WriteOperation)) return false;
      if (!object.Equals(CreateDataframeView, other.CreateDataframeView)) return false;
      if (!object.Equals(WriteOperationV2, other.WriteOperationV2)) return false;
      if (!object.Equals(SqlCommand, other.SqlCommand)) return false;
      if (!object.Equals(Extension, other.Extension)) return false;
      if (CommandTypeCase != other.CommandTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (commandTypeCase_ == CommandTypeOneofCase.RegisterFunction) hash ^= RegisterFunction.GetHashCode();
      if (commandTypeCase_ == CommandTypeOneofCase.WriteOperation) hash ^= WriteOperation.GetHashCode();
      if (commandTypeCase_ == CommandTypeOneofCase.CreateDataframeView) hash ^= CreateDataframeView.GetHashCode();
      if (commandTypeCase_ == CommandTypeOneofCase.WriteOperationV2) hash ^= WriteOperationV2.GetHashCode();
      if (commandTypeCase_ == CommandTypeOneofCase.SqlCommand) hash ^= SqlCommand.GetHashCode();
      if (commandTypeCase_ == CommandTypeOneofCase.Extension) hash ^= Extension.GetHashCode();
      hash ^= (int) commandTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (commandTypeCase_ == CommandTypeOneofCase.RegisterFunction) {
        output.WriteRawTag(10);
        output.WriteMessage(RegisterFunction);
      }
      if (commandTypeCase_ == CommandTypeOneofCase.WriteOperation) {
        output.WriteRawTag(18);
        output.WriteMessage(WriteOperation);
      }
      if (commandTypeCase_ == CommandTypeOneofCase.CreateDataframeView) {
        output.WriteRawTag(26);
        output.WriteMessage(CreateDataframeView);
      }
      if (commandTypeCase_ == CommandTypeOneofCase.WriteOperationV2) {
        output.WriteRawTag(34);
        output.WriteMessage(WriteOperationV2);
      }
      if (commandTypeCase_ == CommandTypeOneofCase.SqlCommand) {
        output.WriteRawTag(42);
        output.WriteMessage(SqlCommand);
      }
      if (commandTypeCase_ == CommandTypeOneofCase.Extension) {
        output.WriteRawTag(186, 62);
        output.WriteMessage(Extension);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (commandTypeCase_ == CommandTypeOneofCase.RegisterFunction) {
        output.WriteRawTag(10);
        output.WriteMessage(RegisterFunction);
      }
      if (commandTypeCase_ == CommandTypeOneofCase.WriteOperation) {
        output.WriteRawTag(18);
        output.WriteMessage(WriteOperation);
      }
      if (commandTypeCase_ == CommandTypeOneofCase.CreateDataframeView) {
        output.WriteRawTag(26);
        output.WriteMessage(CreateDataframeView);
      }
      if (commandTypeCase_ == CommandTypeOneofCase.WriteOperationV2) {
        output.WriteRawTag(34);
        output.WriteMessage(WriteOperationV2);
      }
      if (commandTypeCase_ == CommandTypeOneofCase.SqlCommand) {
        output.WriteRawTag(42);
        output.WriteMessage(SqlCommand);
      }
      if (commandTypeCase_ == CommandTypeOneofCase.Extension) {
        output.WriteRawTag(186, 62);
        output.WriteMessage(Extension);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (commandTypeCase_ == CommandTypeOneofCase.RegisterFunction) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegisterFunction);
      }
      if (commandTypeCase_ == CommandTypeOneofCase.WriteOperation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WriteOperation);
      }
      if (commandTypeCase_ == CommandTypeOneofCase.CreateDataframeView) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateDataframeView);
      }
      if (commandTypeCase_ == CommandTypeOneofCase.WriteOperationV2) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WriteOperationV2);
      }
      if (commandTypeCase_ == CommandTypeOneofCase.SqlCommand) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SqlCommand);
      }
      if (commandTypeCase_ == CommandTypeOneofCase.Extension) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Extension);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Command other) {
      if (other == null) {
        return;
      }
      switch (other.CommandTypeCase) {
        case CommandTypeOneofCase.RegisterFunction:
          if (RegisterFunction == null) {
            RegisterFunction = new global::Spark.Connect.CommonInlineUserDefinedFunction();
          }
          RegisterFunction.MergeFrom(other.RegisterFunction);
          break;
        case CommandTypeOneofCase.WriteOperation:
          if (WriteOperation == null) {
            WriteOperation = new global::Spark.Connect.WriteOperation();
          }
          WriteOperation.MergeFrom(other.WriteOperation);
          break;
        case CommandTypeOneofCase.CreateDataframeView:
          if (CreateDataframeView == null) {
            CreateDataframeView = new global::Spark.Connect.CreateDataFrameViewCommand();
          }
          CreateDataframeView.MergeFrom(other.CreateDataframeView);
          break;
        case CommandTypeOneofCase.WriteOperationV2:
          if (WriteOperationV2 == null) {
            WriteOperationV2 = new global::Spark.Connect.WriteOperationV2();
          }
          WriteOperationV2.MergeFrom(other.WriteOperationV2);
          break;
        case CommandTypeOneofCase.SqlCommand:
          if (SqlCommand == null) {
            SqlCommand = new global::Spark.Connect.SqlCommand();
          }
          SqlCommand.MergeFrom(other.SqlCommand);
          break;
        case CommandTypeOneofCase.Extension:
          if (Extension == null) {
            Extension = new global::Google.Protobuf.WellKnownTypes.Any();
          }
          Extension.MergeFrom(other.Extension);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Spark.Connect.CommonInlineUserDefinedFunction subBuilder = new global::Spark.Connect.CommonInlineUserDefinedFunction();
            if (commandTypeCase_ == CommandTypeOneofCase.RegisterFunction) {
              subBuilder.MergeFrom(RegisterFunction);
            }
            input.ReadMessage(subBuilder);
            RegisterFunction = subBuilder;
            break;
          }
          case 18: {
            global::Spark.Connect.WriteOperation subBuilder = new global::Spark.Connect.WriteOperation();
            if (commandTypeCase_ == CommandTypeOneofCase.WriteOperation) {
              subBuilder.MergeFrom(WriteOperation);
            }
            input.ReadMessage(subBuilder);
            WriteOperation = subBuilder;
            break;
          }
          case 26: {
            global::Spark.Connect.CreateDataFrameViewCommand subBuilder = new global::Spark.Connect.CreateDataFrameViewCommand();
            if (commandTypeCase_ == CommandTypeOneofCase.CreateDataframeView) {
              subBuilder.MergeFrom(CreateDataframeView);
            }
            input.ReadMessage(subBuilder);
            CreateDataframeView = subBuilder;
            break;
          }
          case 34: {
            global::Spark.Connect.WriteOperationV2 subBuilder = new global::Spark.Connect.WriteOperationV2();
            if (commandTypeCase_ == CommandTypeOneofCase.WriteOperationV2) {
              subBuilder.MergeFrom(WriteOperationV2);
            }
            input.ReadMessage(subBuilder);
            WriteOperationV2 = subBuilder;
            break;
          }
          case 42: {
            global::Spark.Connect.SqlCommand subBuilder = new global::Spark.Connect.SqlCommand();
            if (commandTypeCase_ == CommandTypeOneofCase.SqlCommand) {
              subBuilder.MergeFrom(SqlCommand);
            }
            input.ReadMessage(subBuilder);
            SqlCommand = subBuilder;
            break;
          }
          case 7994: {
            global::Google.Protobuf.WellKnownTypes.Any subBuilder = new global::Google.Protobuf.WellKnownTypes.Any();
            if (commandTypeCase_ == CommandTypeOneofCase.Extension) {
              subBuilder.MergeFrom(Extension);
            }
            input.ReadMessage(subBuilder);
            Extension = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Spark.Connect.CommonInlineUserDefinedFunction subBuilder = new global::Spark.Connect.CommonInlineUserDefinedFunction();
            if (commandTypeCase_ == CommandTypeOneofCase.RegisterFunction) {
              subBuilder.MergeFrom(RegisterFunction);
            }
            input.ReadMessage(subBuilder);
            RegisterFunction = subBuilder;
            break;
          }
          case 18: {
            global::Spark.Connect.WriteOperation subBuilder = new global::Spark.Connect.WriteOperation();
            if (commandTypeCase_ == CommandTypeOneofCase.WriteOperation) {
              subBuilder.MergeFrom(WriteOperation);
            }
            input.ReadMessage(subBuilder);
            WriteOperation = subBuilder;
            break;
          }
          case 26: {
            global::Spark.Connect.CreateDataFrameViewCommand subBuilder = new global::Spark.Connect.CreateDataFrameViewCommand();
            if (commandTypeCase_ == CommandTypeOneofCase.CreateDataframeView) {
              subBuilder.MergeFrom(CreateDataframeView);
            }
            input.ReadMessage(subBuilder);
            CreateDataframeView = subBuilder;
            break;
          }
          case 34: {
            global::Spark.Connect.WriteOperationV2 subBuilder = new global::Spark.Connect.WriteOperationV2();
            if (commandTypeCase_ == CommandTypeOneofCase.WriteOperationV2) {
              subBuilder.MergeFrom(WriteOperationV2);
            }
            input.ReadMessage(subBuilder);
            WriteOperationV2 = subBuilder;
            break;
          }
          case 42: {
            global::Spark.Connect.SqlCommand subBuilder = new global::Spark.Connect.SqlCommand();
            if (commandTypeCase_ == CommandTypeOneofCase.SqlCommand) {
              subBuilder.MergeFrom(SqlCommand);
            }
            input.ReadMessage(subBuilder);
            SqlCommand = subBuilder;
            break;
          }
          case 7994: {
            global::Google.Protobuf.WellKnownTypes.Any subBuilder = new global::Google.Protobuf.WellKnownTypes.Any();
            if (commandTypeCase_ == CommandTypeOneofCase.Extension) {
              subBuilder.MergeFrom(Extension);
            }
            input.ReadMessage(subBuilder);
            Extension = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A SQL Command is used to trigger the eager evaluation of SQL commands in Spark.
  ///
  /// When the SQL provide as part of the message is a command it will be immediately evaluated
  /// and the result will be collected and returned as part of a LocalRelation. If the result is
  /// not a command, the operation will simply return a SQL Relation. This allows the client to be
  /// almost oblivious to the server-side behavior.
  /// </summary>
  public sealed partial class SqlCommand : pb::IMessage<SqlCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SqlCommand> _parser = new pb::MessageParser<SqlCommand>(() => new SqlCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SqlCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.CommandsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SqlCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SqlCommand(SqlCommand other) : this() {
      sql_ = other.sql_;
      args_ = other.args_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SqlCommand Clone() {
      return new SqlCommand(this);
    }

    /// <summary>Field number for the "sql" field.</summary>
    public const int SqlFieldNumber = 1;
    private string sql_ = "";
    /// <summary>
    /// (Required) SQL Query.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Sql {
      get { return sql_; }
      set {
        sql_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "args" field.</summary>
    public const int ArgsFieldNumber = 2;
    private static readonly pbc::MapField<string, global::Spark.Connect.Expression.Types.Literal>.Codec _map_args_codec
        = new pbc::MapField<string, global::Spark.Connect.Expression.Types.Literal>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::Spark.Connect.Expression.Types.Literal.Parser), 18);
    private readonly pbc::MapField<string, global::Spark.Connect.Expression.Types.Literal> args_ = new pbc::MapField<string, global::Spark.Connect.Expression.Types.Literal>();
    /// <summary>
    /// (Optional) A map of parameter names to literal expressions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<string, global::Spark.Connect.Expression.Types.Literal> Args {
      get { return args_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SqlCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SqlCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sql != other.Sql) return false;
      if (!Args.Equals(other.Args)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Sql.Length != 0) hash ^= Sql.GetHashCode();
      hash ^= Args.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Sql.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Sql);
      }
      args_.WriteTo(output, _map_args_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Sql.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Sql);
      }
      args_.WriteTo(ref output, _map_args_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Sql.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sql);
      }
      size += args_.CalculateSize(_map_args_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SqlCommand other) {
      if (other == null) {
        return;
      }
      if (other.Sql.Length != 0) {
        Sql = other.Sql;
      }
      args_.MergeFrom(other.args_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Sql = input.ReadString();
            break;
          }
          case 18: {
            args_.AddEntriesFrom(input, _map_args_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Sql = input.ReadString();
            break;
          }
          case 18: {
            args_.AddEntriesFrom(ref input, _map_args_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A command that can create DataFrame global temp view or local temp view.
  /// </summary>
  public sealed partial class CreateDataFrameViewCommand : pb::IMessage<CreateDataFrameViewCommand>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CreateDataFrameViewCommand> _parser = new pb::MessageParser<CreateDataFrameViewCommand>(() => new CreateDataFrameViewCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CreateDataFrameViewCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.CommandsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateDataFrameViewCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateDataFrameViewCommand(CreateDataFrameViewCommand other) : this() {
      input_ = other.input_ != null ? other.input_.Clone() : null;
      name_ = other.name_;
      isGlobal_ = other.isGlobal_;
      replace_ = other.replace_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CreateDataFrameViewCommand Clone() {
      return new CreateDataFrameViewCommand(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) The relation that this view will be built on.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// (Required) View name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_global" field.</summary>
    public const int IsGlobalFieldNumber = 3;
    private bool isGlobal_;
    /// <summary>
    /// (Required) Whether this is global temp view or local temp view.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsGlobal {
      get { return isGlobal_; }
      set {
        isGlobal_ = value;
      }
    }

    /// <summary>Field number for the "replace" field.</summary>
    public const int ReplaceFieldNumber = 4;
    private bool replace_;
    /// <summary>
    /// (Required)
    ///
    /// If true, and if the view already exists, updates it; if false, and if the view
    /// already exists, throws exception.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Replace {
      get { return replace_; }
      set {
        replace_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CreateDataFrameViewCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CreateDataFrameViewCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if (Name != other.Name) return false;
      if (IsGlobal != other.IsGlobal) return false;
      if (Replace != other.Replace) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (IsGlobal != false) hash ^= IsGlobal.GetHashCode();
      if (Replace != false) hash ^= Replace.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (IsGlobal != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsGlobal);
      }
      if (Replace != false) {
        output.WriteRawTag(32);
        output.WriteBool(Replace);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (IsGlobal != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsGlobal);
      }
      if (Replace != false) {
        output.WriteRawTag(32);
        output.WriteBool(Replace);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (IsGlobal != false) {
        size += 1 + 1;
      }
      if (Replace != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CreateDataFrameViewCommand other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.IsGlobal != false) {
        IsGlobal = other.IsGlobal;
      }
      if (other.Replace != false) {
        Replace = other.Replace;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            IsGlobal = input.ReadBool();
            break;
          }
          case 32: {
            Replace = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            IsGlobal = input.ReadBool();
            break;
          }
          case 32: {
            Replace = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// As writes are not directly handled during analysis and planning, they are modeled as commands.
  /// </summary>
  public sealed partial class WriteOperation : pb::IMessage<WriteOperation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WriteOperation> _parser = new pb::MessageParser<WriteOperation>(() => new WriteOperation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<WriteOperation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.CommandsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WriteOperation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WriteOperation(WriteOperation other) : this() {
      input_ = other.input_ != null ? other.input_.Clone() : null;
      source_ = other.source_;
      mode_ = other.mode_;
      sortColumnNames_ = other.sortColumnNames_.Clone();
      partitioningColumns_ = other.partitioningColumns_.Clone();
      bucketBy_ = other.bucketBy_ != null ? other.bucketBy_.Clone() : null;
      options_ = other.options_.Clone();
      switch (other.SaveTypeCase) {
        case SaveTypeOneofCase.Path:
          Path = other.Path;
          break;
        case SaveTypeOneofCase.Table:
          Table = other.Table.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WriteOperation Clone() {
      return new WriteOperation(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) The output of the `input` relation will be persisted according to the options.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 2;
    private readonly static string SourceDefaultValue = "";

    private string source_;
    /// <summary>
    /// (Optional) Format value according to the Spark documentation. Examples are: text, parquet, delta.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Source {
      get { return source_ ?? SourceDefaultValue; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "source" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSource {
      get { return source_ != null; }
    }
    /// <summary>Clears the value of the "source" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSource() {
      source_ = null;
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Path {
      get { return HasPath ? (string) saveType_ : ""; }
      set {
        saveType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        saveTypeCase_ = SaveTypeOneofCase.Path;
      }
    }
    /// <summary>Gets whether the "path" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPath {
      get { return saveTypeCase_ == SaveTypeOneofCase.Path; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "path" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPath() {
      if (HasPath) {
        ClearSaveType();
      }
    }

    /// <summary>Field number for the "table" field.</summary>
    public const int TableFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.WriteOperation.Types.SaveTable Table {
      get { return saveTypeCase_ == SaveTypeOneofCase.Table ? (global::Spark.Connect.WriteOperation.Types.SaveTable) saveType_ : null; }
      set {
        saveType_ = value;
        saveTypeCase_ = value == null ? SaveTypeOneofCase.None : SaveTypeOneofCase.Table;
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 5;
    private global::Spark.Connect.WriteOperation.Types.SaveMode mode_ = global::Spark.Connect.WriteOperation.Types.SaveMode.Unspecified;
    /// <summary>
    /// (Required) the save mode.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.WriteOperation.Types.SaveMode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "sort_column_names" field.</summary>
    public const int SortColumnNamesFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_sortColumnNames_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> sortColumnNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// (Optional) List of columns to sort the output by.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> SortColumnNames {
      get { return sortColumnNames_; }
    }

    /// <summary>Field number for the "partitioning_columns" field.</summary>
    public const int PartitioningColumnsFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_partitioningColumns_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> partitioningColumns_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// (Optional) List of columns for partitioning.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> PartitioningColumns {
      get { return partitioningColumns_; }
    }

    /// <summary>Field number for the "bucket_by" field.</summary>
    public const int BucketByFieldNumber = 8;
    private global::Spark.Connect.WriteOperation.Types.BucketBy bucketBy_;
    /// <summary>
    /// (Optional) Bucketing specification. Bucketing must set the number of buckets and the columns
    /// to bucket by.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.WriteOperation.Types.BucketBy BucketBy {
      get { return bucketBy_; }
      set {
        bucketBy_ = value;
      }
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 9;
    private static readonly pbc::MapField<string, string>.Codec _map_options_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 74);
    private readonly pbc::MapField<string, string> options_ = new pbc::MapField<string, string>();
    /// <summary>
    /// (Optional) A list of configuration options.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<string, string> Options {
      get { return options_; }
    }

    private object saveType_;
    /// <summary>Enum of possible cases for the "save_type" oneof.</summary>
    public enum SaveTypeOneofCase {
      None = 0,
      Path = 3,
      Table = 4,
    }
    private SaveTypeOneofCase saveTypeCase_ = SaveTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SaveTypeOneofCase SaveTypeCase {
      get { return saveTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSaveType() {
      saveTypeCase_ = SaveTypeOneofCase.None;
      saveType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as WriteOperation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(WriteOperation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if (Source != other.Source) return false;
      if (Path != other.Path) return false;
      if (!object.Equals(Table, other.Table)) return false;
      if (Mode != other.Mode) return false;
      if(!sortColumnNames_.Equals(other.sortColumnNames_)) return false;
      if(!partitioningColumns_.Equals(other.partitioningColumns_)) return false;
      if (!object.Equals(BucketBy, other.BucketBy)) return false;
      if (!Options.Equals(other.Options)) return false;
      if (SaveTypeCase != other.SaveTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      if (HasSource) hash ^= Source.GetHashCode();
      if (HasPath) hash ^= Path.GetHashCode();
      if (saveTypeCase_ == SaveTypeOneofCase.Table) hash ^= Table.GetHashCode();
      if (Mode != global::Spark.Connect.WriteOperation.Types.SaveMode.Unspecified) hash ^= Mode.GetHashCode();
      hash ^= sortColumnNames_.GetHashCode();
      hash ^= partitioningColumns_.GetHashCode();
      if (bucketBy_ != null) hash ^= BucketBy.GetHashCode();
      hash ^= Options.GetHashCode();
      hash ^= (int) saveTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (HasSource) {
        output.WriteRawTag(18);
        output.WriteString(Source);
      }
      if (HasPath) {
        output.WriteRawTag(26);
        output.WriteString(Path);
      }
      if (saveTypeCase_ == SaveTypeOneofCase.Table) {
        output.WriteRawTag(34);
        output.WriteMessage(Table);
      }
      if (Mode != global::Spark.Connect.WriteOperation.Types.SaveMode.Unspecified) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Mode);
      }
      sortColumnNames_.WriteTo(output, _repeated_sortColumnNames_codec);
      partitioningColumns_.WriteTo(output, _repeated_partitioningColumns_codec);
      if (bucketBy_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(BucketBy);
      }
      options_.WriteTo(output, _map_options_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (HasSource) {
        output.WriteRawTag(18);
        output.WriteString(Source);
      }
      if (HasPath) {
        output.WriteRawTag(26);
        output.WriteString(Path);
      }
      if (saveTypeCase_ == SaveTypeOneofCase.Table) {
        output.WriteRawTag(34);
        output.WriteMessage(Table);
      }
      if (Mode != global::Spark.Connect.WriteOperation.Types.SaveMode.Unspecified) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Mode);
      }
      sortColumnNames_.WriteTo(ref output, _repeated_sortColumnNames_codec);
      partitioningColumns_.WriteTo(ref output, _repeated_partitioningColumns_codec);
      if (bucketBy_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(BucketBy);
      }
      options_.WriteTo(ref output, _map_options_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      if (HasSource) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (HasPath) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (saveTypeCase_ == SaveTypeOneofCase.Table) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Table);
      }
      if (Mode != global::Spark.Connect.WriteOperation.Types.SaveMode.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      size += sortColumnNames_.CalculateSize(_repeated_sortColumnNames_codec);
      size += partitioningColumns_.CalculateSize(_repeated_partitioningColumns_codec);
      if (bucketBy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BucketBy);
      }
      size += options_.CalculateSize(_map_options_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(WriteOperation other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      if (other.HasSource) {
        Source = other.Source;
      }
      if (other.Mode != global::Spark.Connect.WriteOperation.Types.SaveMode.Unspecified) {
        Mode = other.Mode;
      }
      sortColumnNames_.Add(other.sortColumnNames_);
      partitioningColumns_.Add(other.partitioningColumns_);
      if (other.bucketBy_ != null) {
        if (bucketBy_ == null) {
          BucketBy = new global::Spark.Connect.WriteOperation.Types.BucketBy();
        }
        BucketBy.MergeFrom(other.BucketBy);
      }
      options_.MergeFrom(other.options_);
      switch (other.SaveTypeCase) {
        case SaveTypeOneofCase.Path:
          Path = other.Path;
          break;
        case SaveTypeOneofCase.Table:
          if (Table == null) {
            Table = new global::Spark.Connect.WriteOperation.Types.SaveTable();
          }
          Table.MergeFrom(other.Table);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            Source = input.ReadString();
            break;
          }
          case 26: {
            Path = input.ReadString();
            break;
          }
          case 34: {
            global::Spark.Connect.WriteOperation.Types.SaveTable subBuilder = new global::Spark.Connect.WriteOperation.Types.SaveTable();
            if (saveTypeCase_ == SaveTypeOneofCase.Table) {
              subBuilder.MergeFrom(Table);
            }
            input.ReadMessage(subBuilder);
            Table = subBuilder;
            break;
          }
          case 40: {
            Mode = (global::Spark.Connect.WriteOperation.Types.SaveMode) input.ReadEnum();
            break;
          }
          case 50: {
            sortColumnNames_.AddEntriesFrom(input, _repeated_sortColumnNames_codec);
            break;
          }
          case 58: {
            partitioningColumns_.AddEntriesFrom(input, _repeated_partitioningColumns_codec);
            break;
          }
          case 66: {
            if (bucketBy_ == null) {
              BucketBy = new global::Spark.Connect.WriteOperation.Types.BucketBy();
            }
            input.ReadMessage(BucketBy);
            break;
          }
          case 74: {
            options_.AddEntriesFrom(input, _map_options_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            Source = input.ReadString();
            break;
          }
          case 26: {
            Path = input.ReadString();
            break;
          }
          case 34: {
            global::Spark.Connect.WriteOperation.Types.SaveTable subBuilder = new global::Spark.Connect.WriteOperation.Types.SaveTable();
            if (saveTypeCase_ == SaveTypeOneofCase.Table) {
              subBuilder.MergeFrom(Table);
            }
            input.ReadMessage(subBuilder);
            Table = subBuilder;
            break;
          }
          case 40: {
            Mode = (global::Spark.Connect.WriteOperation.Types.SaveMode) input.ReadEnum();
            break;
          }
          case 50: {
            sortColumnNames_.AddEntriesFrom(ref input, _repeated_sortColumnNames_codec);
            break;
          }
          case 58: {
            partitioningColumns_.AddEntriesFrom(ref input, _repeated_partitioningColumns_codec);
            break;
          }
          case 66: {
            if (bucketBy_ == null) {
              BucketBy = new global::Spark.Connect.WriteOperation.Types.BucketBy();
            }
            input.ReadMessage(BucketBy);
            break;
          }
          case 74: {
            options_.AddEntriesFrom(ref input, _map_options_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the WriteOperation message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum SaveMode {
        [pbr::OriginalName("SAVE_MODE_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("SAVE_MODE_APPEND")] Append = 1,
        [pbr::OriginalName("SAVE_MODE_OVERWRITE")] Overwrite = 2,
        [pbr::OriginalName("SAVE_MODE_ERROR_IF_EXISTS")] ErrorIfExists = 3,
        [pbr::OriginalName("SAVE_MODE_IGNORE")] Ignore = 4,
      }

      public sealed partial class SaveTable : pb::IMessage<SaveTable>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<SaveTable> _parser = new pb::MessageParser<SaveTable>(() => new SaveTable());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<SaveTable> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spark.Connect.WriteOperation.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public SaveTable() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public SaveTable(SaveTable other) : this() {
          tableName_ = other.tableName_;
          saveMethod_ = other.saveMethod_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public SaveTable Clone() {
          return new SaveTable(this);
        }

        /// <summary>Field number for the "table_name" field.</summary>
        public const int TableNameFieldNumber = 1;
        private string tableName_ = "";
        /// <summary>
        /// (Required) The table name.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string TableName {
          get { return tableName_; }
          set {
            tableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "save_method" field.</summary>
        public const int SaveMethodFieldNumber = 2;
        private global::Spark.Connect.WriteOperation.Types.SaveTable.Types.TableSaveMethod saveMethod_ = global::Spark.Connect.WriteOperation.Types.SaveTable.Types.TableSaveMethod.Unspecified;
        /// <summary>
        /// (Required) The method to be called to write to the table.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spark.Connect.WriteOperation.Types.SaveTable.Types.TableSaveMethod SaveMethod {
          get { return saveMethod_; }
          set {
            saveMethod_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as SaveTable);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(SaveTable other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TableName != other.TableName) return false;
          if (SaveMethod != other.SaveMethod) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (TableName.Length != 0) hash ^= TableName.GetHashCode();
          if (SaveMethod != global::Spark.Connect.WriteOperation.Types.SaveTable.Types.TableSaveMethod.Unspecified) hash ^= SaveMethod.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (TableName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(TableName);
          }
          if (SaveMethod != global::Spark.Connect.WriteOperation.Types.SaveTable.Types.TableSaveMethod.Unspecified) {
            output.WriteRawTag(16);
            output.WriteEnum((int) SaveMethod);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (TableName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(TableName);
          }
          if (SaveMethod != global::Spark.Connect.WriteOperation.Types.SaveTable.Types.TableSaveMethod.Unspecified) {
            output.WriteRawTag(16);
            output.WriteEnum((int) SaveMethod);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (TableName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
          }
          if (SaveMethod != global::Spark.Connect.WriteOperation.Types.SaveTable.Types.TableSaveMethod.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SaveMethod);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(SaveTable other) {
          if (other == null) {
            return;
          }
          if (other.TableName.Length != 0) {
            TableName = other.TableName;
          }
          if (other.SaveMethod != global::Spark.Connect.WriteOperation.Types.SaveTable.Types.TableSaveMethod.Unspecified) {
            SaveMethod = other.SaveMethod;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                TableName = input.ReadString();
                break;
              }
              case 16: {
                SaveMethod = (global::Spark.Connect.WriteOperation.Types.SaveTable.Types.TableSaveMethod) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                TableName = input.ReadString();
                break;
              }
              case 16: {
                SaveMethod = (global::Spark.Connect.WriteOperation.Types.SaveTable.Types.TableSaveMethod) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the SaveTable message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static partial class Types {
          public enum TableSaveMethod {
            [pbr::OriginalName("TABLE_SAVE_METHOD_UNSPECIFIED")] Unspecified = 0,
            [pbr::OriginalName("TABLE_SAVE_METHOD_SAVE_AS_TABLE")] SaveAsTable = 1,
            [pbr::OriginalName("TABLE_SAVE_METHOD_INSERT_INTO")] InsertInto = 2,
          }

        }
        #endregion

      }

      public sealed partial class BucketBy : pb::IMessage<BucketBy>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<BucketBy> _parser = new pb::MessageParser<BucketBy>(() => new BucketBy());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<BucketBy> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spark.Connect.WriteOperation.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public BucketBy() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public BucketBy(BucketBy other) : this() {
          bucketColumnNames_ = other.bucketColumnNames_.Clone();
          numBuckets_ = other.numBuckets_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public BucketBy Clone() {
          return new BucketBy(this);
        }

        /// <summary>Field number for the "bucket_column_names" field.</summary>
        public const int BucketColumnNamesFieldNumber = 1;
        private static readonly pb::FieldCodec<string> _repeated_bucketColumnNames_codec
            = pb::FieldCodec.ForString(10);
        private readonly pbc::RepeatedField<string> bucketColumnNames_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<string> BucketColumnNames {
          get { return bucketColumnNames_; }
        }

        /// <summary>Field number for the "num_buckets" field.</summary>
        public const int NumBucketsFieldNumber = 2;
        private int numBuckets_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int NumBuckets {
          get { return numBuckets_; }
          set {
            numBuckets_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as BucketBy);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(BucketBy other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!bucketColumnNames_.Equals(other.bucketColumnNames_)) return false;
          if (NumBuckets != other.NumBuckets) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= bucketColumnNames_.GetHashCode();
          if (NumBuckets != 0) hash ^= NumBuckets.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          bucketColumnNames_.WriteTo(output, _repeated_bucketColumnNames_codec);
          if (NumBuckets != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(NumBuckets);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          bucketColumnNames_.WriteTo(ref output, _repeated_bucketColumnNames_codec);
          if (NumBuckets != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(NumBuckets);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          size += bucketColumnNames_.CalculateSize(_repeated_bucketColumnNames_codec);
          if (NumBuckets != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumBuckets);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(BucketBy other) {
          if (other == null) {
            return;
          }
          bucketColumnNames_.Add(other.bucketColumnNames_);
          if (other.NumBuckets != 0) {
            NumBuckets = other.NumBuckets;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                bucketColumnNames_.AddEntriesFrom(input, _repeated_bucketColumnNames_codec);
                break;
              }
              case 16: {
                NumBuckets = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                bucketColumnNames_.AddEntriesFrom(ref input, _repeated_bucketColumnNames_codec);
                break;
              }
              case 16: {
                NumBuckets = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// As writes are not directly handled during analysis and planning, they are modeled as commands.
  /// </summary>
  public sealed partial class WriteOperationV2 : pb::IMessage<WriteOperationV2>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WriteOperationV2> _parser = new pb::MessageParser<WriteOperationV2>(() => new WriteOperationV2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<WriteOperationV2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.CommandsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WriteOperationV2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WriteOperationV2(WriteOperationV2 other) : this() {
      input_ = other.input_ != null ? other.input_.Clone() : null;
      tableName_ = other.tableName_;
      provider_ = other.provider_;
      partitioningColumns_ = other.partitioningColumns_.Clone();
      options_ = other.options_.Clone();
      tableProperties_ = other.tableProperties_.Clone();
      mode_ = other.mode_;
      overwriteCondition_ = other.overwriteCondition_ != null ? other.overwriteCondition_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WriteOperationV2 Clone() {
      return new WriteOperationV2(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) The output of the `input` relation will be persisted according to the options.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "table_name" field.</summary>
    public const int TableNameFieldNumber = 2;
    private string tableName_ = "";
    /// <summary>
    /// (Required) The destination of the write operation must be either a path or a table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TableName {
      get { return tableName_; }
      set {
        tableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "provider" field.</summary>
    public const int ProviderFieldNumber = 3;
    private readonly static string ProviderDefaultValue = "";

    private string provider_;
    /// <summary>
    /// (Optional) A provider for the underlying output data source. Spark's default catalog supports
    /// "parquet", "json", etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Provider {
      get { return provider_ ?? ProviderDefaultValue; }
      set {
        provider_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "provider" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProvider {
      get { return provider_ != null; }
    }
    /// <summary>Clears the value of the "provider" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProvider() {
      provider_ = null;
    }

    /// <summary>Field number for the "partitioning_columns" field.</summary>
    public const int PartitioningColumnsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Spark.Connect.Expression> _repeated_partitioningColumns_codec
        = pb::FieldCodec.ForMessage(34, global::Spark.Connect.Expression.Parser);
    private readonly pbc::RepeatedField<global::Spark.Connect.Expression> partitioningColumns_ = new pbc::RepeatedField<global::Spark.Connect.Expression>();
    /// <summary>
    /// (Optional) List of columns for partitioning for output table created by `create`,
    /// `createOrReplace`, or `replace`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Spark.Connect.Expression> PartitioningColumns {
      get { return partitioningColumns_; }
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 5;
    private static readonly pbc::MapField<string, string>.Codec _map_options_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 42);
    private readonly pbc::MapField<string, string> options_ = new pbc::MapField<string, string>();
    /// <summary>
    /// (Optional) A list of configuration options.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<string, string> Options {
      get { return options_; }
    }

    /// <summary>Field number for the "table_properties" field.</summary>
    public const int TablePropertiesFieldNumber = 6;
    private static readonly pbc::MapField<string, string>.Codec _map_tableProperties_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 50);
    private readonly pbc::MapField<string, string> tableProperties_ = new pbc::MapField<string, string>();
    /// <summary>
    /// (Optional) A list of table properties.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<string, string> TableProperties {
      get { return tableProperties_; }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 7;
    private global::Spark.Connect.WriteOperationV2.Types.Mode mode_ = global::Spark.Connect.WriteOperationV2.Types.Mode.Unspecified;
    /// <summary>
    /// (Required) Write mode.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.WriteOperationV2.Types.Mode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "overwrite_condition" field.</summary>
    public const int OverwriteConditionFieldNumber = 8;
    private global::Spark.Connect.Expression overwriteCondition_;
    /// <summary>
    /// (Optional) A condition for overwrite saving mode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Expression OverwriteCondition {
      get { return overwriteCondition_; }
      set {
        overwriteCondition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as WriteOperationV2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(WriteOperationV2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if (TableName != other.TableName) return false;
      if (Provider != other.Provider) return false;
      if(!partitioningColumns_.Equals(other.partitioningColumns_)) return false;
      if (!Options.Equals(other.Options)) return false;
      if (!TableProperties.Equals(other.TableProperties)) return false;
      if (Mode != other.Mode) return false;
      if (!object.Equals(OverwriteCondition, other.OverwriteCondition)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      if (TableName.Length != 0) hash ^= TableName.GetHashCode();
      if (HasProvider) hash ^= Provider.GetHashCode();
      hash ^= partitioningColumns_.GetHashCode();
      hash ^= Options.GetHashCode();
      hash ^= TableProperties.GetHashCode();
      if (Mode != global::Spark.Connect.WriteOperationV2.Types.Mode.Unspecified) hash ^= Mode.GetHashCode();
      if (overwriteCondition_ != null) hash ^= OverwriteCondition.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (TableName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TableName);
      }
      if (HasProvider) {
        output.WriteRawTag(26);
        output.WriteString(Provider);
      }
      partitioningColumns_.WriteTo(output, _repeated_partitioningColumns_codec);
      options_.WriteTo(output, _map_options_codec);
      tableProperties_.WriteTo(output, _map_tableProperties_codec);
      if (Mode != global::Spark.Connect.WriteOperationV2.Types.Mode.Unspecified) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Mode);
      }
      if (overwriteCondition_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(OverwriteCondition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (TableName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TableName);
      }
      if (HasProvider) {
        output.WriteRawTag(26);
        output.WriteString(Provider);
      }
      partitioningColumns_.WriteTo(ref output, _repeated_partitioningColumns_codec);
      options_.WriteTo(ref output, _map_options_codec);
      tableProperties_.WriteTo(ref output, _map_tableProperties_codec);
      if (Mode != global::Spark.Connect.WriteOperationV2.Types.Mode.Unspecified) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Mode);
      }
      if (overwriteCondition_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(OverwriteCondition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      if (TableName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
      }
      if (HasProvider) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Provider);
      }
      size += partitioningColumns_.CalculateSize(_repeated_partitioningColumns_codec);
      size += options_.CalculateSize(_map_options_codec);
      size += tableProperties_.CalculateSize(_map_tableProperties_codec);
      if (Mode != global::Spark.Connect.WriteOperationV2.Types.Mode.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (overwriteCondition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OverwriteCondition);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(WriteOperationV2 other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      if (other.TableName.Length != 0) {
        TableName = other.TableName;
      }
      if (other.HasProvider) {
        Provider = other.Provider;
      }
      partitioningColumns_.Add(other.partitioningColumns_);
      options_.MergeFrom(other.options_);
      tableProperties_.MergeFrom(other.tableProperties_);
      if (other.Mode != global::Spark.Connect.WriteOperationV2.Types.Mode.Unspecified) {
        Mode = other.Mode;
      }
      if (other.overwriteCondition_ != null) {
        if (overwriteCondition_ == null) {
          OverwriteCondition = new global::Spark.Connect.Expression();
        }
        OverwriteCondition.MergeFrom(other.OverwriteCondition);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            TableName = input.ReadString();
            break;
          }
          case 26: {
            Provider = input.ReadString();
            break;
          }
          case 34: {
            partitioningColumns_.AddEntriesFrom(input, _repeated_partitioningColumns_codec);
            break;
          }
          case 42: {
            options_.AddEntriesFrom(input, _map_options_codec);
            break;
          }
          case 50: {
            tableProperties_.AddEntriesFrom(input, _map_tableProperties_codec);
            break;
          }
          case 56: {
            Mode = (global::Spark.Connect.WriteOperationV2.Types.Mode) input.ReadEnum();
            break;
          }
          case 66: {
            if (overwriteCondition_ == null) {
              OverwriteCondition = new global::Spark.Connect.Expression();
            }
            input.ReadMessage(OverwriteCondition);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            TableName = input.ReadString();
            break;
          }
          case 26: {
            Provider = input.ReadString();
            break;
          }
          case 34: {
            partitioningColumns_.AddEntriesFrom(ref input, _repeated_partitioningColumns_codec);
            break;
          }
          case 42: {
            options_.AddEntriesFrom(ref input, _map_options_codec);
            break;
          }
          case 50: {
            tableProperties_.AddEntriesFrom(ref input, _map_tableProperties_codec);
            break;
          }
          case 56: {
            Mode = (global::Spark.Connect.WriteOperationV2.Types.Mode) input.ReadEnum();
            break;
          }
          case 66: {
            if (overwriteCondition_ == null) {
              OverwriteCondition = new global::Spark.Connect.Expression();
            }
            input.ReadMessage(OverwriteCondition);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the WriteOperationV2 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum Mode {
        [pbr::OriginalName("MODE_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("MODE_CREATE")] Create = 1,
        [pbr::OriginalName("MODE_OVERWRITE")] Overwrite = 2,
        [pbr::OriginalName("MODE_OVERWRITE_PARTITIONS")] OverwritePartitions = 3,
        [pbr::OriginalName("MODE_APPEND")] Append = 4,
        [pbr::OriginalName("MODE_REPLACE")] Replace = 5,
        [pbr::OriginalName("MODE_CREATE_OR_REPLACE")] CreateOrReplace = 6,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
