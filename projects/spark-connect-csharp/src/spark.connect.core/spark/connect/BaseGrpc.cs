// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: spark/connect/base.proto
// </auto-generated>
// Original file comments:
//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Spark.Connect {
  /// <summary>
  /// Main interface for the SparkConnect service.
  /// </summary>
  public static partial class SparkConnectService
  {
    static readonly string __ServiceName = "spark.connect.SparkConnectService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Spark.Connect.ExecutePlanRequest> __Marshaller_spark_connect_ExecutePlanRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Spark.Connect.ExecutePlanRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Spark.Connect.ExecutePlanResponse> __Marshaller_spark_connect_ExecutePlanResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Spark.Connect.ExecutePlanResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Spark.Connect.AnalyzePlanRequest> __Marshaller_spark_connect_AnalyzePlanRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Spark.Connect.AnalyzePlanRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Spark.Connect.AnalyzePlanResponse> __Marshaller_spark_connect_AnalyzePlanResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Spark.Connect.AnalyzePlanResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Spark.Connect.ConfigRequest> __Marshaller_spark_connect_ConfigRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Spark.Connect.ConfigRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Spark.Connect.ConfigResponse> __Marshaller_spark_connect_ConfigResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Spark.Connect.ConfigResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Spark.Connect.AddArtifactsRequest> __Marshaller_spark_connect_AddArtifactsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Spark.Connect.AddArtifactsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Spark.Connect.AddArtifactsResponse> __Marshaller_spark_connect_AddArtifactsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Spark.Connect.AddArtifactsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Spark.Connect.ExecutePlanRequest, global::Spark.Connect.ExecutePlanResponse> __Method_ExecutePlan = new grpc::Method<global::Spark.Connect.ExecutePlanRequest, global::Spark.Connect.ExecutePlanResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ExecutePlan",
        __Marshaller_spark_connect_ExecutePlanRequest,
        __Marshaller_spark_connect_ExecutePlanResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Spark.Connect.AnalyzePlanRequest, global::Spark.Connect.AnalyzePlanResponse> __Method_AnalyzePlan = new grpc::Method<global::Spark.Connect.AnalyzePlanRequest, global::Spark.Connect.AnalyzePlanResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AnalyzePlan",
        __Marshaller_spark_connect_AnalyzePlanRequest,
        __Marshaller_spark_connect_AnalyzePlanResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Spark.Connect.ConfigRequest, global::Spark.Connect.ConfigResponse> __Method_Config = new grpc::Method<global::Spark.Connect.ConfigRequest, global::Spark.Connect.ConfigResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Config",
        __Marshaller_spark_connect_ConfigRequest,
        __Marshaller_spark_connect_ConfigResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Spark.Connect.AddArtifactsRequest, global::Spark.Connect.AddArtifactsResponse> __Method_AddArtifacts = new grpc::Method<global::Spark.Connect.AddArtifactsRequest, global::Spark.Connect.AddArtifactsResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "AddArtifacts",
        __Marshaller_spark_connect_AddArtifactsRequest,
        __Marshaller_spark_connect_AddArtifactsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Spark.Connect.BaseReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SparkConnectService</summary>
    [grpc::BindServiceMethod(typeof(SparkConnectService), "BindService")]
    public abstract partial class SparkConnectServiceBase
    {
      /// <summary>
      /// Executes a request that contains the query and returns a stream of [[Response]].
      ///
      /// It is guaranteed that there is at least one ARROW batch returned even if the result set is empty.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task ExecutePlan(global::Spark.Connect.ExecutePlanRequest request, grpc::IServerStreamWriter<global::Spark.Connect.ExecutePlanResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Analyzes a query and returns a [[AnalyzeResponse]] containing metadata about the query.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Spark.Connect.AnalyzePlanResponse> AnalyzePlan(global::Spark.Connect.AnalyzePlanRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update or fetch the configurations and returns a [[ConfigResponse]] containing the result.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Spark.Connect.ConfigResponse> Config(global::Spark.Connect.ConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add artifacts to the session and returns a [[AddArtifactsResponse]] containing metadata about
      /// the added artifacts.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Spark.Connect.AddArtifactsResponse> AddArtifacts(grpc::IAsyncStreamReader<global::Spark.Connect.AddArtifactsRequest> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SparkConnectService</summary>
    public partial class SparkConnectServiceClient : grpc::ClientBase<SparkConnectServiceClient>
    {
      /// <summary>Creates a new client for SparkConnectService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public SparkConnectServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SparkConnectService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public SparkConnectServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected SparkConnectServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected SparkConnectServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Executes a request that contains the query and returns a stream of [[Response]].
      ///
      /// It is guaranteed that there is at least one ARROW batch returned even if the result set is empty.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Spark.Connect.ExecutePlanResponse> ExecutePlan(global::Spark.Connect.ExecutePlanRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecutePlan(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Executes a request that contains the query and returns a stream of [[Response]].
      ///
      /// It is guaranteed that there is at least one ARROW batch returned even if the result set is empty.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Spark.Connect.ExecutePlanResponse> ExecutePlan(global::Spark.Connect.ExecutePlanRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ExecutePlan, null, options, request);
      }
      /// <summary>
      /// Analyzes a query and returns a [[AnalyzeResponse]] containing metadata about the query.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Spark.Connect.AnalyzePlanResponse AnalyzePlan(global::Spark.Connect.AnalyzePlanRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AnalyzePlan(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Analyzes a query and returns a [[AnalyzeResponse]] containing metadata about the query.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Spark.Connect.AnalyzePlanResponse AnalyzePlan(global::Spark.Connect.AnalyzePlanRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AnalyzePlan, null, options, request);
      }
      /// <summary>
      /// Analyzes a query and returns a [[AnalyzeResponse]] containing metadata about the query.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Spark.Connect.AnalyzePlanResponse> AnalyzePlanAsync(global::Spark.Connect.AnalyzePlanRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AnalyzePlanAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Analyzes a query and returns a [[AnalyzeResponse]] containing metadata about the query.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Spark.Connect.AnalyzePlanResponse> AnalyzePlanAsync(global::Spark.Connect.AnalyzePlanRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AnalyzePlan, null, options, request);
      }
      /// <summary>
      /// Update or fetch the configurations and returns a [[ConfigResponse]] containing the result.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Spark.Connect.ConfigResponse Config(global::Spark.Connect.ConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Config(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update or fetch the configurations and returns a [[ConfigResponse]] containing the result.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Spark.Connect.ConfigResponse Config(global::Spark.Connect.ConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Config, null, options, request);
      }
      /// <summary>
      /// Update or fetch the configurations and returns a [[ConfigResponse]] containing the result.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Spark.Connect.ConfigResponse> ConfigAsync(global::Spark.Connect.ConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update or fetch the configurations and returns a [[ConfigResponse]] containing the result.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Spark.Connect.ConfigResponse> ConfigAsync(global::Spark.Connect.ConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Config, null, options, request);
      }
      /// <summary>
      /// Add artifacts to the session and returns a [[AddArtifactsResponse]] containing metadata about
      /// the added artifacts.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncClientStreamingCall<global::Spark.Connect.AddArtifactsRequest, global::Spark.Connect.AddArtifactsResponse> AddArtifacts(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddArtifacts(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add artifacts to the session and returns a [[AddArtifactsResponse]] containing metadata about
      /// the added artifacts.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncClientStreamingCall<global::Spark.Connect.AddArtifactsRequest, global::Spark.Connect.AddArtifactsResponse> AddArtifacts(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_AddArtifacts, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override SparkConnectServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SparkConnectServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(SparkConnectServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ExecutePlan, serviceImpl.ExecutePlan)
          .AddMethod(__Method_AnalyzePlan, serviceImpl.AnalyzePlan)
          .AddMethod(__Method_Config, serviceImpl.Config)
          .AddMethod(__Method_AddArtifacts, serviceImpl.AddArtifacts).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SparkConnectServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ExecutePlan, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Spark.Connect.ExecutePlanRequest, global::Spark.Connect.ExecutePlanResponse>(serviceImpl.ExecutePlan));
      serviceBinder.AddMethod(__Method_AnalyzePlan, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Spark.Connect.AnalyzePlanRequest, global::Spark.Connect.AnalyzePlanResponse>(serviceImpl.AnalyzePlan));
      serviceBinder.AddMethod(__Method_Config, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Spark.Connect.ConfigRequest, global::Spark.Connect.ConfigResponse>(serviceImpl.Config));
      serviceBinder.AddMethod(__Method_AddArtifacts, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::Spark.Connect.AddArtifactsRequest, global::Spark.Connect.AddArtifactsResponse>(serviceImpl.AddArtifacts));
    }

  }
}
#endregion
