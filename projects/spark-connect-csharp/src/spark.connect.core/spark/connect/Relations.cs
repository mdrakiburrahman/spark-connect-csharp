// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: spark/connect/relations.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spark.Connect {

  /// <summary>Holder for reflection information generated from spark/connect/relations.proto</summary>
  public static partial class RelationsReflection {

    #region Descriptor
    /// <summary>File descriptor for spark/connect/relations.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RelationsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1zcGFyay9jb25uZWN0L3JlbGF0aW9ucy5wcm90bxINc3BhcmsuY29ubmVj",
            "dBoZZ29vZ2xlL3Byb3RvYnVmL2FueS5wcm90bxofc3BhcmsvY29ubmVjdC9l",
            "eHByZXNzaW9ucy5wcm90bxoZc3BhcmsvY29ubmVjdC90eXBlcy5wcm90bxob",
            "c3BhcmsvY29ubmVjdC9jYXRhbG9nLnByb3RvIucQCghSZWxhdGlvbhItCgZj",
            "b21tb24YASABKAsyHS5zcGFyay5jb25uZWN0LlJlbGF0aW9uQ29tbW9uEiMK",
            "BHJlYWQYAiABKAsyEy5zcGFyay5jb25uZWN0LlJlYWRIABIpCgdwcm9qZWN0",
            "GAMgASgLMhYuc3BhcmsuY29ubmVjdC5Qcm9qZWN0SAASJwoGZmlsdGVyGAQg",
            "ASgLMhUuc3BhcmsuY29ubmVjdC5GaWx0ZXJIABIjCgRqb2luGAUgASgLMhMu",
            "c3BhcmsuY29ubmVjdC5Kb2luSAASLQoGc2V0X29wGAYgASgLMhsuc3Bhcmsu",
            "Y29ubmVjdC5TZXRPcGVyYXRpb25IABIjCgRzb3J0GAcgASgLMhMuc3Bhcmsu",
            "Y29ubmVjdC5Tb3J0SAASJQoFbGltaXQYCCABKAsyFC5zcGFyay5jb25uZWN0",
            "LkxpbWl0SAASLQoJYWdncmVnYXRlGAkgASgLMhguc3BhcmsuY29ubmVjdC5B",
            "Z2dyZWdhdGVIABIhCgNzcWwYCiABKAsyEi5zcGFyay5jb25uZWN0LlNRTEgA",
            "EjYKDmxvY2FsX3JlbGF0aW9uGAsgASgLMhwuc3BhcmsuY29ubmVjdC5Mb2Nh",
            "bFJlbGF0aW9uSAASJwoGc2FtcGxlGAwgASgLMhUuc3BhcmsuY29ubmVjdC5T",
            "YW1wbGVIABInCgZvZmZzZXQYDSABKAsyFS5zcGFyay5jb25uZWN0Lk9mZnNl",
            "dEgAEjEKC2RlZHVwbGljYXRlGA4gASgLMhouc3BhcmsuY29ubmVjdC5EZWR1",
            "cGxpY2F0ZUgAEiUKBXJhbmdlGA8gASgLMhQuc3BhcmsuY29ubmVjdC5SYW5n",
            "ZUgAEjYKDnN1YnF1ZXJ5X2FsaWFzGBAgASgLMhwuc3BhcmsuY29ubmVjdC5T",
            "dWJxdWVyeUFsaWFzSAASMQoLcmVwYXJ0aXRpb24YESABKAsyGi5zcGFyay5j",
            "b25uZWN0LlJlcGFydGl0aW9uSAASJAoFdG9fZGYYEiABKAsyEy5zcGFyay5j",
            "b25uZWN0LlRvREZIABJBChR3aXRoX2NvbHVtbnNfcmVuYW1lZBgTIAEoCzIh",
            "LnNwYXJrLmNvbm5lY3QuV2l0aENvbHVtbnNSZW5hbWVkSAASMAoLc2hvd19z",
            "dHJpbmcYFCABKAsyGS5zcGFyay5jb25uZWN0LlNob3dTdHJpbmdIABIjCgRk",
            "cm9wGBUgASgLMhMuc3BhcmsuY29ubmVjdC5Ecm9wSAASIwoEdGFpbBgWIAEo",
            "CzITLnNwYXJrLmNvbm5lY3QuVGFpbEgAEjIKDHdpdGhfY29sdW1ucxgXIAEo",
            "CzIaLnNwYXJrLmNvbm5lY3QuV2l0aENvbHVtbnNIABIjCgRoaW50GBggASgL",
            "MhMuc3BhcmsuY29ubmVjdC5IaW50SAASKQoHdW5waXZvdBgZIAEoCzIWLnNw",
            "YXJrLmNvbm5lY3QuVW5waXZvdEgAEiwKCXRvX3NjaGVtYRgaIAEoCzIXLnNw",
            "YXJrLmNvbm5lY3QuVG9TY2hlbWFIABJLChlyZXBhcnRpdGlvbl9ieV9leHBy",
            "ZXNzaW9uGBsgASgLMiYuc3BhcmsuY29ubmVjdC5SZXBhcnRpdGlvbkJ5RXhw",
            "cmVzc2lvbkgAEjYKDm1hcF9wYXJ0aXRpb25zGBwgASgLMhwuc3BhcmsuY29u",
            "bmVjdC5NYXBQYXJ0aXRpb25zSAASOAoPY29sbGVjdF9tZXRyaWNzGB0gASgL",
            "Mh0uc3BhcmsuY29ubmVjdC5Db2xsZWN0TWV0cmljc0gAEiUKBXBhcnNlGB4g",
            "ASgLMhQuc3BhcmsuY29ubmVjdC5QYXJzZUgAEiwKCWdyb3VwX21hcBgfIAEo",
            "CzIXLnNwYXJrLmNvbm5lY3QuR3JvdXBNYXBIABIxCgxjb19ncm91cF9tYXAY",
            "ICABKAsyGS5zcGFyay5jb25uZWN0LkNvR3JvdXBNYXBIABIoCgdmaWxsX25h",
            "GFogASgLMhUuc3BhcmsuY29ubmVjdC5OQUZpbGxIABIoCgdkcm9wX25hGFsg",
            "ASgLMhUuc3BhcmsuY29ubmVjdC5OQURyb3BIABIrCgdyZXBsYWNlGFwgASgL",
            "Mhguc3BhcmsuY29ubmVjdC5OQVJlcGxhY2VIABItCgdzdW1tYXJ5GGQgASgL",
            "Mhouc3BhcmsuY29ubmVjdC5TdGF0U3VtbWFyeUgAEi8KCGNyb3NzdGFiGGUg",
            "ASgLMhsuc3BhcmsuY29ubmVjdC5TdGF0Q3Jvc3N0YWJIABIvCghkZXNjcmli",
            "ZRhmIAEoCzIbLnNwYXJrLmNvbm5lY3QuU3RhdERlc2NyaWJlSAASJQoDY292",
            "GGcgASgLMhYuc3BhcmsuY29ubmVjdC5TdGF0Q292SAASJwoEY29ychhoIAEo",
            "CzIXLnNwYXJrLmNvbm5lY3QuU3RhdENvcnJIABI8Cg9hcHByb3hfcXVhbnRp",
            "bGUYaSABKAsyIS5zcGFyay5jb25uZWN0LlN0YXRBcHByb3hRdWFudGlsZUgA",
            "EjIKCmZyZXFfaXRlbXMYaiABKAsyHC5zcGFyay5jb25uZWN0LlN0YXRGcmVx",
            "SXRlbXNIABIwCglzYW1wbGVfYnkYayABKAsyGy5zcGFyay5jb25uZWN0LlN0",
            "YXRTYW1wbGVCeUgAEioKB2NhdGFsb2cYyAEgASgLMhYuc3BhcmsuY29ubmVj",
            "dC5DYXRhbG9nSAASKgoJZXh0ZW5zaW9uGOYHIAEoCzIULmdvb2dsZS5wcm90",
            "b2J1Zi5BbnlIABIqCgd1bmtub3duGOcHIAEoCzIWLnNwYXJrLmNvbm5lY3Qu",
            "VW5rbm93bkgAQgoKCHJlbF90eXBlIgkKB1Vua25vd24iRwoOUmVsYXRpb25D",
            "b21tb24SEwoLc291cmNlX2luZm8YASABKAkSFAoHcGxhbl9pZBgCIAEoA0gA",
            "iAEBQgoKCF9wbGFuX2lkIpABCgNTUUwSDQoFcXVlcnkYASABKAkSKgoEYXJn",
            "cxgCIAMoCzIcLnNwYXJrLmNvbm5lY3QuU1FMLkFyZ3NFbnRyeRpOCglBcmdz",
            "RW50cnkSCwoDa2V5GAEgASgJEjAKBXZhbHVlGAIgASgLMiEuc3BhcmsuY29u",
            "bmVjdC5FeHByZXNzaW9uLkxpdGVyYWw6AjgBIvsDCgRSZWFkEjUKC25hbWVk",
            "X3RhYmxlGAEgASgLMh4uc3BhcmsuY29ubmVjdC5SZWFkLk5hbWVkVGFibGVI",
            "ABI1CgtkYXRhX3NvdXJjZRgCIAEoCzIeLnNwYXJrLmNvbm5lY3QuUmVhZC5E",
            "YXRhU291cmNlSAAalwEKCk5hbWVkVGFibGUSGwoTdW5wYXJzZWRfaWRlbnRp",
            "ZmllchgBIAEoCRI8CgdvcHRpb25zGAIgAygLMisuc3BhcmsuY29ubmVjdC5S",
            "ZWFkLk5hbWVkVGFibGUuT3B0aW9uc0VudHJ5Gi4KDE9wdGlvbnNFbnRyeRIL",
            "CgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBGt0BCgpEYXRhU291cmNl",
            "EhMKBmZvcm1hdBgBIAEoCUgAiAEBEhMKBnNjaGVtYRgCIAEoCUgBiAEBEjwK",
            "B29wdGlvbnMYAyADKAsyKy5zcGFyay5jb25uZWN0LlJlYWQuRGF0YVNvdXJj",
            "ZS5PcHRpb25zRW50cnkSDQoFcGF0aHMYBCADKAkSEgoKcHJlZGljYXRlcxgF",
            "IAMoCRouCgxPcHRpb25zRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIg",
            "ASgJOgI4AUIJCgdfZm9ybWF0QgkKB19zY2hlbWFCCwoJcmVhZF90eXBlImEK",
            "B1Byb2plY3QSJgoFaW5wdXQYASABKAsyFy5zcGFyay5jb25uZWN0LlJlbGF0",
            "aW9uEi4KC2V4cHJlc3Npb25zGAMgAygLMhkuc3BhcmsuY29ubmVjdC5FeHBy",
            "ZXNzaW9uIl4KBkZpbHRlchImCgVpbnB1dBgBIAEoCzIXLnNwYXJrLmNvbm5l",
            "Y3QuUmVsYXRpb24SLAoJY29uZGl0aW9uGAIgASgLMhkuc3BhcmsuY29ubmVj",
            "dC5FeHByZXNzaW9uIqMDCgRKb2luEiUKBGxlZnQYASABKAsyFy5zcGFyay5j",
            "b25uZWN0LlJlbGF0aW9uEiYKBXJpZ2h0GAIgASgLMhcuc3BhcmsuY29ubmVj",
            "dC5SZWxhdGlvbhIxCg5qb2luX2NvbmRpdGlvbhgDIAEoCzIZLnNwYXJrLmNv",
            "bm5lY3QuRXhwcmVzc2lvbhIvCglqb2luX3R5cGUYBCABKA4yHC5zcGFyay5j",
            "b25uZWN0LkpvaW4uSm9pblR5cGUSFQoNdXNpbmdfY29sdW1ucxgFIAMoCSLQ",
            "AQoISm9pblR5cGUSGQoVSk9JTl9UWVBFX1VOU1BFQ0lGSUVEEAASEwoPSk9J",
            "Tl9UWVBFX0lOTkVSEAESGAoUSk9JTl9UWVBFX0ZVTExfT1VURVIQAhIYChRK",
            "T0lOX1RZUEVfTEVGVF9PVVRFUhADEhkKFUpPSU5fVFlQRV9SSUdIVF9PVVRF",
            "UhAEEhcKE0pPSU5fVFlQRV9MRUZUX0FOVEkQBRIXChNKT0lOX1RZUEVfTEVG",
            "VF9TRU1JEAYSEwoPSk9JTl9UWVBFX0NST1NTEAcimQMKDFNldE9wZXJhdGlv",
            "bhIrCgpsZWZ0X2lucHV0GAEgASgLMhcuc3BhcmsuY29ubmVjdC5SZWxhdGlv",
            "bhIsCgtyaWdodF9pbnB1dBgCIAEoCzIXLnNwYXJrLmNvbm5lY3QuUmVsYXRp",
            "b24SOgoLc2V0X29wX3R5cGUYAyABKA4yJS5zcGFyay5jb25uZWN0LlNldE9w",
            "ZXJhdGlvbi5TZXRPcFR5cGUSEwoGaXNfYWxsGAQgASgISACIAQESFAoHYnlf",
            "bmFtZRgFIAEoCEgBiAEBEiIKFWFsbG93X21pc3NpbmdfY29sdW1ucxgGIAEo",
            "CEgCiAEBInIKCVNldE9wVHlwZRIbChdTRVRfT1BfVFlQRV9VTlNQRUNJRklF",
            "RBAAEhkKFVNFVF9PUF9UWVBFX0lOVEVSU0VDVBABEhUKEVNFVF9PUF9UWVBF",
            "X1VOSU9OEAISFgoSU0VUX09QX1RZUEVfRVhDRVBUEANCCQoHX2lzX2FsbEIK",
            "CghfYnlfbmFtZUIYChZfYWxsb3dfbWlzc2luZ19jb2x1bW5zIj4KBUxpbWl0",
            "EiYKBWlucHV0GAEgASgLMhcuc3BhcmsuY29ubmVjdC5SZWxhdGlvbhINCgVs",
            "aW1pdBgCIAEoBSJACgZPZmZzZXQSJgoFaW5wdXQYASABKAsyFy5zcGFyay5j",
            "b25uZWN0LlJlbGF0aW9uEg4KBm9mZnNldBgCIAEoBSI9CgRUYWlsEiYKBWlu",
            "cHV0GAEgASgLMhcuc3BhcmsuY29ubmVjdC5SZWxhdGlvbhINCgVsaW1pdBgC",
            "IAEoBSL1AwoJQWdncmVnYXRlEiYKBWlucHV0GAEgASgLMhcuc3BhcmsuY29u",
            "bmVjdC5SZWxhdGlvbhI2Cgpncm91cF90eXBlGAIgASgOMiIuc3BhcmsuY29u",
            "bmVjdC5BZ2dyZWdhdGUuR3JvdXBUeXBlEjcKFGdyb3VwaW5nX2V4cHJlc3Np",
            "b25zGAMgAygLMhkuc3BhcmsuY29ubmVjdC5FeHByZXNzaW9uEjgKFWFnZ3Jl",
            "Z2F0ZV9leHByZXNzaW9ucxgEIAMoCzIZLnNwYXJrLmNvbm5lY3QuRXhwcmVz",
            "c2lvbhItCgVwaXZvdBgFIAEoCzIeLnNwYXJrLmNvbm5lY3QuQWdncmVnYXRl",
            "LlBpdm90GmIKBVBpdm90EiYKA2NvbBgBIAEoCzIZLnNwYXJrLmNvbm5lY3Qu",
            "RXhwcmVzc2lvbhIxCgZ2YWx1ZXMYAiADKAsyIS5zcGFyay5jb25uZWN0LkV4",
            "cHJlc3Npb24uTGl0ZXJhbCKBAQoJR3JvdXBUeXBlEhoKFkdST1VQX1RZUEVf",
            "VU5TUEVDSUZJRUQQABIWChJHUk9VUF9UWVBFX0dST1VQQlkQARIVChFHUk9V",
            "UF9UWVBFX1JPTExVUBACEhMKD0dST1VQX1RZUEVfQ1VCRRADEhQKEEdST1VQ",
            "X1RZUEVfUElWT1QQBCKIAQoEU29ydBImCgVpbnB1dBgBIAEoCzIXLnNwYXJr",
            "LmNvbm5lY3QuUmVsYXRpb24SMgoFb3JkZXIYAiADKAsyIy5zcGFyay5jb25u",
            "ZWN0LkV4cHJlc3Npb24uU29ydE9yZGVyEhYKCWlzX2dsb2JhbBgDIAEoCEgA",
            "iAEBQgwKCl9pc19nbG9iYWwicAoERHJvcBImCgVpbnB1dBgBIAEoCzIXLnNw",
            "YXJrLmNvbm5lY3QuUmVsYXRpb24SKgoHY29sdW1ucxgCIAMoCzIZLnNwYXJr",
            "LmNvbm5lY3QuRXhwcmVzc2lvbhIUCgxjb2x1bW5fbmFtZXMYAyADKAkihQEK",
            "C0RlZHVwbGljYXRlEiYKBWlucHV0GAEgASgLMhcuc3BhcmsuY29ubmVjdC5S",
            "ZWxhdGlvbhIUCgxjb2x1bW5fbmFtZXMYAiADKAkSIAoTYWxsX2NvbHVtbnNf",
            "YXNfa2V5cxgDIAEoCEgAiAEBQhYKFF9hbGxfY29sdW1uc19hc19rZXlzIksK",
            "DUxvY2FsUmVsYXRpb24SEQoEZGF0YRgBIAEoDEgAiAEBEhMKBnNjaGVtYRgC",
            "IAEoCUgBiAEBQgcKBV9kYXRhQgkKB19zY2hlbWEixwEKBlNhbXBsZRImCgVp",
            "bnB1dBgBIAEoCzIXLnNwYXJrLmNvbm5lY3QuUmVsYXRpb24SEwoLbG93ZXJf",
            "Ym91bmQYAiABKAESEwoLdXBwZXJfYm91bmQYAyABKAESHQoQd2l0aF9yZXBs",
            "YWNlbWVudBgEIAEoCEgAiAEBEhEKBHNlZWQYBSABKANIAYgBARIbChNkZXRl",
            "cm1pbmlzdGljX29yZGVyGAYgASgIQhMKEV93aXRoX3JlcGxhY2VtZW50QgcK",
            "BV9zZWVkInAKBVJhbmdlEhIKBXN0YXJ0GAEgASgDSACIAQESCwoDZW5kGAIg",
            "ASgDEgwKBHN0ZXAYAyABKAMSGwoObnVtX3BhcnRpdGlvbnMYBCABKAVIAYgB",
            "AUIICgZfc3RhcnRCEQoPX251bV9wYXJ0aXRpb25zIlkKDVN1YnF1ZXJ5QWxp",
            "YXMSJgoFaW5wdXQYASABKAsyFy5zcGFyay5jb25uZWN0LlJlbGF0aW9uEg0K",
            "BWFsaWFzGAIgASgJEhEKCXF1YWxpZmllchgDIAMoCSJvCgtSZXBhcnRpdGlv",
            "bhImCgVpbnB1dBgBIAEoCzIXLnNwYXJrLmNvbm5lY3QuUmVsYXRpb24SFgoO",
            "bnVtX3BhcnRpdGlvbnMYAiABKAUSFAoHc2h1ZmZsZRgDIAEoCEgAiAEBQgoK",
            "CF9zaHVmZmxlImoKClNob3dTdHJpbmcSJgoFaW5wdXQYASABKAsyFy5zcGFy",
            "ay5jb25uZWN0LlJlbGF0aW9uEhAKCG51bV9yb3dzGAIgASgFEhAKCHRydW5j",
            "YXRlGAMgASgFEhAKCHZlcnRpY2FsGAQgASgIIkkKC1N0YXRTdW1tYXJ5EiYK",
            "BWlucHV0GAEgASgLMhcuc3BhcmsuY29ubmVjdC5SZWxhdGlvbhISCgpzdGF0",
            "aXN0aWNzGAIgAygJIkQKDFN0YXREZXNjcmliZRImCgVpbnB1dBgBIAEoCzIX",
            "LnNwYXJrLmNvbm5lY3QuUmVsYXRpb24SDAoEY29scxgCIAMoCSJSCgxTdGF0",
            "Q3Jvc3N0YWISJgoFaW5wdXQYASABKAsyFy5zcGFyay5jb25uZWN0LlJlbGF0",
            "aW9uEgwKBGNvbDEYAiABKAkSDAoEY29sMhgDIAEoCSJNCgdTdGF0Q292EiYK",
            "BWlucHV0GAEgASgLMhcuc3BhcmsuY29ubmVjdC5SZWxhdGlvbhIMCgRjb2wx",
            "GAIgASgJEgwKBGNvbDIYAyABKAkibgoIU3RhdENvcnISJgoFaW5wdXQYASAB",
            "KAsyFy5zcGFyay5jb25uZWN0LlJlbGF0aW9uEgwKBGNvbDEYAiABKAkSDAoE",
            "Y29sMhgDIAEoCRITCgZtZXRob2QYBCABKAlIAIgBAUIJCgdfbWV0aG9kInkK",
            "ElN0YXRBcHByb3hRdWFudGlsZRImCgVpbnB1dBgBIAEoCzIXLnNwYXJrLmNv",
            "bm5lY3QuUmVsYXRpb24SDAoEY29scxgCIAMoCRIVCg1wcm9iYWJpbGl0aWVz",
            "GAMgAygBEhYKDnJlbGF0aXZlX2Vycm9yGAQgASgBImcKDVN0YXRGcmVxSXRl",
            "bXMSJgoFaW5wdXQYASABKAsyFy5zcGFyay5jb25uZWN0LlJlbGF0aW9uEgwK",
            "BGNvbHMYAiADKAkSFAoHc3VwcG9ydBgDIAEoAUgAiAEBQgoKCF9zdXBwb3J0",
            "IoUCCgxTdGF0U2FtcGxlQnkSJgoFaW5wdXQYASABKAsyFy5zcGFyay5jb25u",
            "ZWN0LlJlbGF0aW9uEiYKA2NvbBgCIAEoCzIZLnNwYXJrLmNvbm5lY3QuRXhw",
            "cmVzc2lvbhI3CglmcmFjdGlvbnMYAyADKAsyJC5zcGFyay5jb25uZWN0LlN0",
            "YXRTYW1wbGVCeS5GcmFjdGlvbhIRCgRzZWVkGAUgASgDSACIAQEaUAoIRnJh",
            "Y3Rpb24SMgoHc3RyYXR1bRgBIAEoCzIhLnNwYXJrLmNvbm5lY3QuRXhwcmVz",
            "c2lvbi5MaXRlcmFsEhAKCGZyYWN0aW9uGAIgASgBQgcKBV9zZWVkInEKBk5B",
            "RmlsbBImCgVpbnB1dBgBIAEoCzIXLnNwYXJrLmNvbm5lY3QuUmVsYXRpb24S",
            "DAoEY29scxgCIAMoCRIxCgZ2YWx1ZXMYAyADKAsyIS5zcGFyay5jb25uZWN0",
            "LkV4cHJlc3Npb24uTGl0ZXJhbCJsCgZOQURyb3ASJgoFaW5wdXQYASABKAsy",
            "Fy5zcGFyay5jb25uZWN0LlJlbGF0aW9uEgwKBGNvbHMYAiADKAkSGgoNbWlu",
            "X25vbl9udWxscxgDIAEoBUgAiAEBQhAKDl9taW5fbm9uX251bGxzIvgBCglO",
            "QVJlcGxhY2USJgoFaW5wdXQYASABKAsyFy5zcGFyay5jb25uZWN0LlJlbGF0",
            "aW9uEgwKBGNvbHMYAiADKAkSOgoMcmVwbGFjZW1lbnRzGAMgAygLMiQuc3Bh",
            "cmsuY29ubmVjdC5OQVJlcGxhY2UuUmVwbGFjZW1lbnQaeQoLUmVwbGFjZW1l",
            "bnQSNAoJb2xkX3ZhbHVlGAEgASgLMiEuc3BhcmsuY29ubmVjdC5FeHByZXNz",
            "aW9uLkxpdGVyYWwSNAoJbmV3X3ZhbHVlGAIgASgLMiEuc3BhcmsuY29ubmVj",
            "dC5FeHByZXNzaW9uLkxpdGVyYWwiRAoEVG9ERhImCgVpbnB1dBgBIAEoCzIX",
            "LnNwYXJrLmNvbm5lY3QuUmVsYXRpb24SFAoMY29sdW1uX25hbWVzGAIgAygJ",
            "IsoBChJXaXRoQ29sdW1uc1JlbmFtZWQSJgoFaW5wdXQYASABKAsyFy5zcGFy",
            "ay5jb25uZWN0LlJlbGF0aW9uElMKEnJlbmFtZV9jb2x1bW5zX21hcBgCIAMo",
            "CzI3LnNwYXJrLmNvbm5lY3QuV2l0aENvbHVtbnNSZW5hbWVkLlJlbmFtZUNv",
            "bHVtbnNNYXBFbnRyeRo3ChVSZW5hbWVDb2x1bW5zTWFwRW50cnkSCwoDa2V5",
            "GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASJnCgtXaXRoQ29sdW1ucxImCgVp",
            "bnB1dBgBIAEoCzIXLnNwYXJrLmNvbm5lY3QuUmVsYXRpb24SMAoHYWxpYXNl",
            "cxgCIAMoCzIfLnNwYXJrLmNvbm5lY3QuRXhwcmVzc2lvbi5BbGlhcyJrCgRI",
            "aW50EiYKBWlucHV0GAEgASgLMhcuc3BhcmsuY29ubmVjdC5SZWxhdGlvbhIM",
            "CgRuYW1lGAIgASgJEi0KCnBhcmFtZXRlcnMYAyADKAsyGS5zcGFyay5jb25u",
            "ZWN0LkV4cHJlc3Npb24ihgIKB1VucGl2b3QSJgoFaW5wdXQYASABKAsyFy5z",
            "cGFyay5jb25uZWN0LlJlbGF0aW9uEiYKA2lkcxgCIAMoCzIZLnNwYXJrLmNv",
            "bm5lY3QuRXhwcmVzc2lvbhIyCgZ2YWx1ZXMYAyABKAsyHS5zcGFyay5jb25u",
            "ZWN0LlVucGl2b3QuVmFsdWVzSACIAQESHAoUdmFyaWFibGVfY29sdW1uX25h",
            "bWUYBCABKAkSGQoRdmFsdWVfY29sdW1uX25hbWUYBSABKAkaMwoGVmFsdWVz",
            "EikKBnZhbHVlcxgBIAMoCzIZLnNwYXJrLmNvbm5lY3QuRXhwcmVzc2lvbkIJ",
            "CgdfdmFsdWVzIlsKCFRvU2NoZW1hEiYKBWlucHV0GAEgASgLMhcuc3Bhcmsu",
            "Y29ubmVjdC5SZWxhdGlvbhInCgZzY2hlbWEYAiABKAsyFy5zcGFyay5jb25u",
            "ZWN0LkRhdGFUeXBlIqUBChdSZXBhcnRpdGlvbkJ5RXhwcmVzc2lvbhImCgVp",
            "bnB1dBgBIAEoCzIXLnNwYXJrLmNvbm5lY3QuUmVsYXRpb24SMgoPcGFydGl0",
            "aW9uX2V4cHJzGAIgAygLMhkuc3BhcmsuY29ubmVjdC5FeHByZXNzaW9uEhsK",
            "Dm51bV9wYXJ0aXRpb25zGAMgASgFSACIAQFCEQoPX251bV9wYXJ0aXRpb25z",
            "InUKDU1hcFBhcnRpdGlvbnMSJgoFaW5wdXQYASABKAsyFy5zcGFyay5jb25u",
            "ZWN0LlJlbGF0aW9uEjwKBGZ1bmMYAiABKAsyLi5zcGFyay5jb25uZWN0LkNv",
            "bW1vbklubGluZVVzZXJEZWZpbmVkRnVuY3Rpb24iqQEKCEdyb3VwTWFwEiYK",
            "BWlucHV0GAEgASgLMhcuc3BhcmsuY29ubmVjdC5SZWxhdGlvbhI3ChRncm91",
            "cGluZ19leHByZXNzaW9ucxgCIAMoCzIZLnNwYXJrLmNvbm5lY3QuRXhwcmVz",
            "c2lvbhI8CgRmdW5jGAMgASgLMi4uc3BhcmsuY29ubmVjdC5Db21tb25Jbmxp",
            "bmVVc2VyRGVmaW5lZEZ1bmN0aW9uIpgCCgpDb0dyb3VwTWFwEiYKBWlucHV0",
            "GAEgASgLMhcuc3BhcmsuY29ubmVjdC5SZWxhdGlvbhI9ChppbnB1dF9ncm91",
            "cGluZ19leHByZXNzaW9ucxgCIAMoCzIZLnNwYXJrLmNvbm5lY3QuRXhwcmVz",
            "c2lvbhImCgVvdGhlchgDIAEoCzIXLnNwYXJrLmNvbm5lY3QuUmVsYXRpb24S",
            "PQoab3RoZXJfZ3JvdXBpbmdfZXhwcmVzc2lvbnMYBCADKAsyGS5zcGFyay5j",
            "b25uZWN0LkV4cHJlc3Npb24SPAoEZnVuYxgFIAEoCzIuLnNwYXJrLmNvbm5l",
            "Y3QuQ29tbW9uSW5saW5lVXNlckRlZmluZWRGdW5jdGlvbiJyCg5Db2xsZWN0",
            "TWV0cmljcxImCgVpbnB1dBgBIAEoCzIXLnNwYXJrLmNvbm5lY3QuUmVsYXRp",
            "b24SDAoEbmFtZRgCIAEoCRIqCgdtZXRyaWNzGAMgAygLMhkuc3BhcmsuY29u",
            "bmVjdC5FeHByZXNzaW9uItgCCgVQYXJzZRImCgVpbnB1dBgBIAEoCzIXLnNw",
            "YXJrLmNvbm5lY3QuUmVsYXRpb24SMAoGZm9ybWF0GAIgASgOMiAuc3Bhcmsu",
            "Y29ubmVjdC5QYXJzZS5QYXJzZUZvcm1hdBIsCgZzY2hlbWEYAyABKAsyFy5z",
            "cGFyay5jb25uZWN0LkRhdGFUeXBlSACIAQESMgoHb3B0aW9ucxgEIAMoCzIh",
            "LnNwYXJrLmNvbm5lY3QuUGFyc2UuT3B0aW9uc0VudHJ5Gi4KDE9wdGlvbnNF",
            "bnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIlgKC1BhcnNl",
            "Rm9ybWF0EhwKGFBBUlNFX0ZPUk1BVF9VTlNQRUNJRklFRBAAEhQKEFBBUlNF",
            "X0ZPUk1BVF9DU1YQARIVChFQQVJTRV9GT1JNQVRfSlNPThACQgkKB19zY2hl",
            "bWFCIgoeb3JnLmFwYWNoZS5zcGFyay5jb25uZWN0LnByb3RvUAFiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, global::Spark.Connect.ExpressionsReflection.Descriptor, global::Spark.Connect.TypesReflection.Descriptor, global::Spark.Connect.CatalogReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Relation), global::Spark.Connect.Relation.Parser, new[]{ "Common", "Read", "Project", "Filter", "Join", "SetOp", "Sort", "Limit", "Aggregate", "Sql", "LocalRelation", "Sample", "Offset", "Deduplicate", "Range", "SubqueryAlias", "Repartition", "ToDf", "WithColumnsRenamed", "ShowString", "Drop", "Tail", "WithColumns", "Hint", "Unpivot", "ToSchema", "RepartitionByExpression", "MapPartitions", "CollectMetrics", "Parse", "GroupMap", "CoGroupMap", "FillNa", "DropNa", "Replace", "Summary", "Crosstab", "Describe", "Cov", "Corr", "ApproxQuantile", "FreqItems", "SampleBy", "Catalog", "Extension", "Unknown" }, new[]{ "RelType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Unknown), global::Spark.Connect.Unknown.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.RelationCommon), global::Spark.Connect.RelationCommon.Parser, new[]{ "SourceInfo", "PlanId" }, new[]{ "PlanId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.SQL), global::Spark.Connect.SQL.Parser, new[]{ "Query", "Args" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Read), global::Spark.Connect.Read.Parser, new[]{ "NamedTable", "DataSource" }, new[]{ "ReadType" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Read.Types.NamedTable), global::Spark.Connect.Read.Types.NamedTable.Parser, new[]{ "UnparsedIdentifier", "Options" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Read.Types.DataSource), global::Spark.Connect.Read.Types.DataSource.Parser, new[]{ "Format", "Schema", "Options", "Paths", "Predicates" }, new[]{ "Format", "Schema" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Project), global::Spark.Connect.Project.Parser, new[]{ "Input", "Expressions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Filter), global::Spark.Connect.Filter.Parser, new[]{ "Input", "Condition" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Join), global::Spark.Connect.Join.Parser, new[]{ "Left", "Right", "JoinCondition", "JoinType", "UsingColumns" }, null, new[]{ typeof(global::Spark.Connect.Join.Types.JoinType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.SetOperation), global::Spark.Connect.SetOperation.Parser, new[]{ "LeftInput", "RightInput", "SetOpType", "IsAll", "ByName", "AllowMissingColumns" }, new[]{ "IsAll", "ByName", "AllowMissingColumns" }, new[]{ typeof(global::Spark.Connect.SetOperation.Types.SetOpType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Limit), global::Spark.Connect.Limit.Parser, new[]{ "Input", "Limit_" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Offset), global::Spark.Connect.Offset.Parser, new[]{ "Input", "Offset_" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Tail), global::Spark.Connect.Tail.Parser, new[]{ "Input", "Limit" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Aggregate), global::Spark.Connect.Aggregate.Parser, new[]{ "Input", "GroupType", "GroupingExpressions", "AggregateExpressions", "Pivot" }, null, new[]{ typeof(global::Spark.Connect.Aggregate.Types.GroupType) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Aggregate.Types.Pivot), global::Spark.Connect.Aggregate.Types.Pivot.Parser, new[]{ "Col", "Values" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Sort), global::Spark.Connect.Sort.Parser, new[]{ "Input", "Order", "IsGlobal" }, new[]{ "IsGlobal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Drop), global::Spark.Connect.Drop.Parser, new[]{ "Input", "Columns", "ColumnNames" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Deduplicate), global::Spark.Connect.Deduplicate.Parser, new[]{ "Input", "ColumnNames", "AllColumnsAsKeys" }, new[]{ "AllColumnsAsKeys" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.LocalRelation), global::Spark.Connect.LocalRelation.Parser, new[]{ "Data", "Schema" }, new[]{ "Data", "Schema" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Sample), global::Spark.Connect.Sample.Parser, new[]{ "Input", "LowerBound", "UpperBound", "WithReplacement", "Seed", "DeterministicOrder" }, new[]{ "WithReplacement", "Seed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Range), global::Spark.Connect.Range.Parser, new[]{ "Start", "End", "Step", "NumPartitions" }, new[]{ "Start", "NumPartitions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.SubqueryAlias), global::Spark.Connect.SubqueryAlias.Parser, new[]{ "Input", "Alias", "Qualifier" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Repartition), global::Spark.Connect.Repartition.Parser, new[]{ "Input", "NumPartitions", "Shuffle" }, new[]{ "Shuffle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.ShowString), global::Spark.Connect.ShowString.Parser, new[]{ "Input", "NumRows", "Truncate", "Vertical" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.StatSummary), global::Spark.Connect.StatSummary.Parser, new[]{ "Input", "Statistics" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.StatDescribe), global::Spark.Connect.StatDescribe.Parser, new[]{ "Input", "Cols" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.StatCrosstab), global::Spark.Connect.StatCrosstab.Parser, new[]{ "Input", "Col1", "Col2" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.StatCov), global::Spark.Connect.StatCov.Parser, new[]{ "Input", "Col1", "Col2" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.StatCorr), global::Spark.Connect.StatCorr.Parser, new[]{ "Input", "Col1", "Col2", "Method" }, new[]{ "Method" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.StatApproxQuantile), global::Spark.Connect.StatApproxQuantile.Parser, new[]{ "Input", "Cols", "Probabilities", "RelativeError" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.StatFreqItems), global::Spark.Connect.StatFreqItems.Parser, new[]{ "Input", "Cols", "Support" }, new[]{ "Support" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.StatSampleBy), global::Spark.Connect.StatSampleBy.Parser, new[]{ "Input", "Col", "Fractions", "Seed" }, new[]{ "Seed" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.StatSampleBy.Types.Fraction), global::Spark.Connect.StatSampleBy.Types.Fraction.Parser, new[]{ "Stratum", "Fraction_" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.NAFill), global::Spark.Connect.NAFill.Parser, new[]{ "Input", "Cols", "Values" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.NADrop), global::Spark.Connect.NADrop.Parser, new[]{ "Input", "Cols", "MinNonNulls" }, new[]{ "MinNonNulls" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.NAReplace), global::Spark.Connect.NAReplace.Parser, new[]{ "Input", "Cols", "Replacements" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.NAReplace.Types.Replacement), global::Spark.Connect.NAReplace.Types.Replacement.Parser, new[]{ "OldValue", "NewValue" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.ToDF), global::Spark.Connect.ToDF.Parser, new[]{ "Input", "ColumnNames" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.WithColumnsRenamed), global::Spark.Connect.WithColumnsRenamed.Parser, new[]{ "Input", "RenameColumnsMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.WithColumns), global::Spark.Connect.WithColumns.Parser, new[]{ "Input", "Aliases" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Hint), global::Spark.Connect.Hint.Parser, new[]{ "Input", "Name", "Parameters" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Unpivot), global::Spark.Connect.Unpivot.Parser, new[]{ "Input", "Ids", "Values", "VariableColumnName", "ValueColumnName" }, new[]{ "Values" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Unpivot.Types.Values), global::Spark.Connect.Unpivot.Types.Values.Parser, new[]{ "Values_" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.ToSchema), global::Spark.Connect.ToSchema.Parser, new[]{ "Input", "Schema" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.RepartitionByExpression), global::Spark.Connect.RepartitionByExpression.Parser, new[]{ "Input", "PartitionExprs", "NumPartitions" }, new[]{ "NumPartitions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.MapPartitions), global::Spark.Connect.MapPartitions.Parser, new[]{ "Input", "Func" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.GroupMap), global::Spark.Connect.GroupMap.Parser, new[]{ "Input", "GroupingExpressions", "Func" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.CoGroupMap), global::Spark.Connect.CoGroupMap.Parser, new[]{ "Input", "InputGroupingExpressions", "Other", "OtherGroupingExpressions", "Func" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.CollectMetrics), global::Spark.Connect.CollectMetrics.Parser, new[]{ "Input", "Name", "Metrics" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Parse), global::Spark.Connect.Parse.Parser, new[]{ "Input", "Format", "Schema", "Options" }, new[]{ "Schema" }, new[]{ typeof(global::Spark.Connect.Parse.Types.ParseFormat) }, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// The main [[Relation]] type. Fundamentally, a relation is a typed container
  /// that has exactly one explicit relation type set.
  ///
  /// When adding new relation types, they have to be registered here.
  /// </summary>
  public sealed partial class Relation : pb::IMessage<Relation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Relation> _parser = new pb::MessageParser<Relation>(() => new Relation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Relation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Relation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Relation(Relation other) : this() {
      common_ = other.common_ != null ? other.common_.Clone() : null;
      switch (other.RelTypeCase) {
        case RelTypeOneofCase.Read:
          Read = other.Read.Clone();
          break;
        case RelTypeOneofCase.Project:
          Project = other.Project.Clone();
          break;
        case RelTypeOneofCase.Filter:
          Filter = other.Filter.Clone();
          break;
        case RelTypeOneofCase.Join:
          Join = other.Join.Clone();
          break;
        case RelTypeOneofCase.SetOp:
          SetOp = other.SetOp.Clone();
          break;
        case RelTypeOneofCase.Sort:
          Sort = other.Sort.Clone();
          break;
        case RelTypeOneofCase.Limit:
          Limit = other.Limit.Clone();
          break;
        case RelTypeOneofCase.Aggregate:
          Aggregate = other.Aggregate.Clone();
          break;
        case RelTypeOneofCase.Sql:
          Sql = other.Sql.Clone();
          break;
        case RelTypeOneofCase.LocalRelation:
          LocalRelation = other.LocalRelation.Clone();
          break;
        case RelTypeOneofCase.Sample:
          Sample = other.Sample.Clone();
          break;
        case RelTypeOneofCase.Offset:
          Offset = other.Offset.Clone();
          break;
        case RelTypeOneofCase.Deduplicate:
          Deduplicate = other.Deduplicate.Clone();
          break;
        case RelTypeOneofCase.Range:
          Range = other.Range.Clone();
          break;
        case RelTypeOneofCase.SubqueryAlias:
          SubqueryAlias = other.SubqueryAlias.Clone();
          break;
        case RelTypeOneofCase.Repartition:
          Repartition = other.Repartition.Clone();
          break;
        case RelTypeOneofCase.ToDf:
          ToDf = other.ToDf.Clone();
          break;
        case RelTypeOneofCase.WithColumnsRenamed:
          WithColumnsRenamed = other.WithColumnsRenamed.Clone();
          break;
        case RelTypeOneofCase.ShowString:
          ShowString = other.ShowString.Clone();
          break;
        case RelTypeOneofCase.Drop:
          Drop = other.Drop.Clone();
          break;
        case RelTypeOneofCase.Tail:
          Tail = other.Tail.Clone();
          break;
        case RelTypeOneofCase.WithColumns:
          WithColumns = other.WithColumns.Clone();
          break;
        case RelTypeOneofCase.Hint:
          Hint = other.Hint.Clone();
          break;
        case RelTypeOneofCase.Unpivot:
          Unpivot = other.Unpivot.Clone();
          break;
        case RelTypeOneofCase.ToSchema:
          ToSchema = other.ToSchema.Clone();
          break;
        case RelTypeOneofCase.RepartitionByExpression:
          RepartitionByExpression = other.RepartitionByExpression.Clone();
          break;
        case RelTypeOneofCase.MapPartitions:
          MapPartitions = other.MapPartitions.Clone();
          break;
        case RelTypeOneofCase.CollectMetrics:
          CollectMetrics = other.CollectMetrics.Clone();
          break;
        case RelTypeOneofCase.Parse:
          Parse = other.Parse.Clone();
          break;
        case RelTypeOneofCase.GroupMap:
          GroupMap = other.GroupMap.Clone();
          break;
        case RelTypeOneofCase.CoGroupMap:
          CoGroupMap = other.CoGroupMap.Clone();
          break;
        case RelTypeOneofCase.FillNa:
          FillNa = other.FillNa.Clone();
          break;
        case RelTypeOneofCase.DropNa:
          DropNa = other.DropNa.Clone();
          break;
        case RelTypeOneofCase.Replace:
          Replace = other.Replace.Clone();
          break;
        case RelTypeOneofCase.Summary:
          Summary = other.Summary.Clone();
          break;
        case RelTypeOneofCase.Crosstab:
          Crosstab = other.Crosstab.Clone();
          break;
        case RelTypeOneofCase.Describe:
          Describe = other.Describe.Clone();
          break;
        case RelTypeOneofCase.Cov:
          Cov = other.Cov.Clone();
          break;
        case RelTypeOneofCase.Corr:
          Corr = other.Corr.Clone();
          break;
        case RelTypeOneofCase.ApproxQuantile:
          ApproxQuantile = other.ApproxQuantile.Clone();
          break;
        case RelTypeOneofCase.FreqItems:
          FreqItems = other.FreqItems.Clone();
          break;
        case RelTypeOneofCase.SampleBy:
          SampleBy = other.SampleBy.Clone();
          break;
        case RelTypeOneofCase.Catalog:
          Catalog = other.Catalog.Clone();
          break;
        case RelTypeOneofCase.Extension:
          Extension = other.Extension.Clone();
          break;
        case RelTypeOneofCase.Unknown:
          Unknown = other.Unknown.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Relation Clone() {
      return new Relation(this);
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 1;
    private global::Spark.Connect.RelationCommon common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.RelationCommon Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "read" field.</summary>
    public const int ReadFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Read Read {
      get { return relTypeCase_ == RelTypeOneofCase.Read ? (global::Spark.Connect.Read) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.Read;
      }
    }

    /// <summary>Field number for the "project" field.</summary>
    public const int ProjectFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Project Project {
      get { return relTypeCase_ == RelTypeOneofCase.Project ? (global::Spark.Connect.Project) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.Project;
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Filter Filter {
      get { return relTypeCase_ == RelTypeOneofCase.Filter ? (global::Spark.Connect.Filter) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.Filter;
      }
    }

    /// <summary>Field number for the "join" field.</summary>
    public const int JoinFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Join Join {
      get { return relTypeCase_ == RelTypeOneofCase.Join ? (global::Spark.Connect.Join) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.Join;
      }
    }

    /// <summary>Field number for the "set_op" field.</summary>
    public const int SetOpFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.SetOperation SetOp {
      get { return relTypeCase_ == RelTypeOneofCase.SetOp ? (global::Spark.Connect.SetOperation) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.SetOp;
      }
    }

    /// <summary>Field number for the "sort" field.</summary>
    public const int SortFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Sort Sort {
      get { return relTypeCase_ == RelTypeOneofCase.Sort ? (global::Spark.Connect.Sort) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.Sort;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Limit Limit {
      get { return relTypeCase_ == RelTypeOneofCase.Limit ? (global::Spark.Connect.Limit) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.Limit;
      }
    }

    /// <summary>Field number for the "aggregate" field.</summary>
    public const int AggregateFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Aggregate Aggregate {
      get { return relTypeCase_ == RelTypeOneofCase.Aggregate ? (global::Spark.Connect.Aggregate) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.Aggregate;
      }
    }

    /// <summary>Field number for the "sql" field.</summary>
    public const int SqlFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.SQL Sql {
      get { return relTypeCase_ == RelTypeOneofCase.Sql ? (global::Spark.Connect.SQL) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.Sql;
      }
    }

    /// <summary>Field number for the "local_relation" field.</summary>
    public const int LocalRelationFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.LocalRelation LocalRelation {
      get { return relTypeCase_ == RelTypeOneofCase.LocalRelation ? (global::Spark.Connect.LocalRelation) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.LocalRelation;
      }
    }

    /// <summary>Field number for the "sample" field.</summary>
    public const int SampleFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Sample Sample {
      get { return relTypeCase_ == RelTypeOneofCase.Sample ? (global::Spark.Connect.Sample) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.Sample;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Offset Offset {
      get { return relTypeCase_ == RelTypeOneofCase.Offset ? (global::Spark.Connect.Offset) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.Offset;
      }
    }

    /// <summary>Field number for the "deduplicate" field.</summary>
    public const int DeduplicateFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Deduplicate Deduplicate {
      get { return relTypeCase_ == RelTypeOneofCase.Deduplicate ? (global::Spark.Connect.Deduplicate) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.Deduplicate;
      }
    }

    /// <summary>Field number for the "range" field.</summary>
    public const int RangeFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Range Range {
      get { return relTypeCase_ == RelTypeOneofCase.Range ? (global::Spark.Connect.Range) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.Range;
      }
    }

    /// <summary>Field number for the "subquery_alias" field.</summary>
    public const int SubqueryAliasFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.SubqueryAlias SubqueryAlias {
      get { return relTypeCase_ == RelTypeOneofCase.SubqueryAlias ? (global::Spark.Connect.SubqueryAlias) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.SubqueryAlias;
      }
    }

    /// <summary>Field number for the "repartition" field.</summary>
    public const int RepartitionFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Repartition Repartition {
      get { return relTypeCase_ == RelTypeOneofCase.Repartition ? (global::Spark.Connect.Repartition) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.Repartition;
      }
    }

    /// <summary>Field number for the "to_df" field.</summary>
    public const int ToDfFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.ToDF ToDf {
      get { return relTypeCase_ == RelTypeOneofCase.ToDf ? (global::Spark.Connect.ToDF) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.ToDf;
      }
    }

    /// <summary>Field number for the "with_columns_renamed" field.</summary>
    public const int WithColumnsRenamedFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.WithColumnsRenamed WithColumnsRenamed {
      get { return relTypeCase_ == RelTypeOneofCase.WithColumnsRenamed ? (global::Spark.Connect.WithColumnsRenamed) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.WithColumnsRenamed;
      }
    }

    /// <summary>Field number for the "show_string" field.</summary>
    public const int ShowStringFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.ShowString ShowString {
      get { return relTypeCase_ == RelTypeOneofCase.ShowString ? (global::Spark.Connect.ShowString) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.ShowString;
      }
    }

    /// <summary>Field number for the "drop" field.</summary>
    public const int DropFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Drop Drop {
      get { return relTypeCase_ == RelTypeOneofCase.Drop ? (global::Spark.Connect.Drop) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.Drop;
      }
    }

    /// <summary>Field number for the "tail" field.</summary>
    public const int TailFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Tail Tail {
      get { return relTypeCase_ == RelTypeOneofCase.Tail ? (global::Spark.Connect.Tail) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.Tail;
      }
    }

    /// <summary>Field number for the "with_columns" field.</summary>
    public const int WithColumnsFieldNumber = 23;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.WithColumns WithColumns {
      get { return relTypeCase_ == RelTypeOneofCase.WithColumns ? (global::Spark.Connect.WithColumns) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.WithColumns;
      }
    }

    /// <summary>Field number for the "hint" field.</summary>
    public const int HintFieldNumber = 24;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Hint Hint {
      get { return relTypeCase_ == RelTypeOneofCase.Hint ? (global::Spark.Connect.Hint) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.Hint;
      }
    }

    /// <summary>Field number for the "unpivot" field.</summary>
    public const int UnpivotFieldNumber = 25;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Unpivot Unpivot {
      get { return relTypeCase_ == RelTypeOneofCase.Unpivot ? (global::Spark.Connect.Unpivot) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.Unpivot;
      }
    }

    /// <summary>Field number for the "to_schema" field.</summary>
    public const int ToSchemaFieldNumber = 26;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.ToSchema ToSchema {
      get { return relTypeCase_ == RelTypeOneofCase.ToSchema ? (global::Spark.Connect.ToSchema) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.ToSchema;
      }
    }

    /// <summary>Field number for the "repartition_by_expression" field.</summary>
    public const int RepartitionByExpressionFieldNumber = 27;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.RepartitionByExpression RepartitionByExpression {
      get { return relTypeCase_ == RelTypeOneofCase.RepartitionByExpression ? (global::Spark.Connect.RepartitionByExpression) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.RepartitionByExpression;
      }
    }

    /// <summary>Field number for the "map_partitions" field.</summary>
    public const int MapPartitionsFieldNumber = 28;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.MapPartitions MapPartitions {
      get { return relTypeCase_ == RelTypeOneofCase.MapPartitions ? (global::Spark.Connect.MapPartitions) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.MapPartitions;
      }
    }

    /// <summary>Field number for the "collect_metrics" field.</summary>
    public const int CollectMetricsFieldNumber = 29;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.CollectMetrics CollectMetrics {
      get { return relTypeCase_ == RelTypeOneofCase.CollectMetrics ? (global::Spark.Connect.CollectMetrics) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.CollectMetrics;
      }
    }

    /// <summary>Field number for the "parse" field.</summary>
    public const int ParseFieldNumber = 30;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Parse Parse {
      get { return relTypeCase_ == RelTypeOneofCase.Parse ? (global::Spark.Connect.Parse) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.Parse;
      }
    }

    /// <summary>Field number for the "group_map" field.</summary>
    public const int GroupMapFieldNumber = 31;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.GroupMap GroupMap {
      get { return relTypeCase_ == RelTypeOneofCase.GroupMap ? (global::Spark.Connect.GroupMap) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.GroupMap;
      }
    }

    /// <summary>Field number for the "co_group_map" field.</summary>
    public const int CoGroupMapFieldNumber = 32;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.CoGroupMap CoGroupMap {
      get { return relTypeCase_ == RelTypeOneofCase.CoGroupMap ? (global::Spark.Connect.CoGroupMap) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.CoGroupMap;
      }
    }

    /// <summary>Field number for the "fill_na" field.</summary>
    public const int FillNaFieldNumber = 90;
    /// <summary>
    /// NA functions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.NAFill FillNa {
      get { return relTypeCase_ == RelTypeOneofCase.FillNa ? (global::Spark.Connect.NAFill) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.FillNa;
      }
    }

    /// <summary>Field number for the "drop_na" field.</summary>
    public const int DropNaFieldNumber = 91;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.NADrop DropNa {
      get { return relTypeCase_ == RelTypeOneofCase.DropNa ? (global::Spark.Connect.NADrop) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.DropNa;
      }
    }

    /// <summary>Field number for the "replace" field.</summary>
    public const int ReplaceFieldNumber = 92;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.NAReplace Replace {
      get { return relTypeCase_ == RelTypeOneofCase.Replace ? (global::Spark.Connect.NAReplace) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.Replace;
      }
    }

    /// <summary>Field number for the "summary" field.</summary>
    public const int SummaryFieldNumber = 100;
    /// <summary>
    /// stat functions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.StatSummary Summary {
      get { return relTypeCase_ == RelTypeOneofCase.Summary ? (global::Spark.Connect.StatSummary) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.Summary;
      }
    }

    /// <summary>Field number for the "crosstab" field.</summary>
    public const int CrosstabFieldNumber = 101;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.StatCrosstab Crosstab {
      get { return relTypeCase_ == RelTypeOneofCase.Crosstab ? (global::Spark.Connect.StatCrosstab) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.Crosstab;
      }
    }

    /// <summary>Field number for the "describe" field.</summary>
    public const int DescribeFieldNumber = 102;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.StatDescribe Describe {
      get { return relTypeCase_ == RelTypeOneofCase.Describe ? (global::Spark.Connect.StatDescribe) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.Describe;
      }
    }

    /// <summary>Field number for the "cov" field.</summary>
    public const int CovFieldNumber = 103;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.StatCov Cov {
      get { return relTypeCase_ == RelTypeOneofCase.Cov ? (global::Spark.Connect.StatCov) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.Cov;
      }
    }

    /// <summary>Field number for the "corr" field.</summary>
    public const int CorrFieldNumber = 104;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.StatCorr Corr {
      get { return relTypeCase_ == RelTypeOneofCase.Corr ? (global::Spark.Connect.StatCorr) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.Corr;
      }
    }

    /// <summary>Field number for the "approx_quantile" field.</summary>
    public const int ApproxQuantileFieldNumber = 105;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.StatApproxQuantile ApproxQuantile {
      get { return relTypeCase_ == RelTypeOneofCase.ApproxQuantile ? (global::Spark.Connect.StatApproxQuantile) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.ApproxQuantile;
      }
    }

    /// <summary>Field number for the "freq_items" field.</summary>
    public const int FreqItemsFieldNumber = 106;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.StatFreqItems FreqItems {
      get { return relTypeCase_ == RelTypeOneofCase.FreqItems ? (global::Spark.Connect.StatFreqItems) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.FreqItems;
      }
    }

    /// <summary>Field number for the "sample_by" field.</summary>
    public const int SampleByFieldNumber = 107;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.StatSampleBy SampleBy {
      get { return relTypeCase_ == RelTypeOneofCase.SampleBy ? (global::Spark.Connect.StatSampleBy) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.SampleBy;
      }
    }

    /// <summary>Field number for the "catalog" field.</summary>
    public const int CatalogFieldNumber = 200;
    /// <summary>
    /// Catalog API (experimental / unstable)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Catalog Catalog {
      get { return relTypeCase_ == RelTypeOneofCase.Catalog ? (global::Spark.Connect.Catalog) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.Catalog;
      }
    }

    /// <summary>Field number for the "extension" field.</summary>
    public const int ExtensionFieldNumber = 998;
    /// <summary>
    /// This field is used to mark extensions to the protocol. When plugins generate arbitrary
    /// relations they can add them here. During the planning the correct resolution is done.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Any Extension {
      get { return relTypeCase_ == RelTypeOneofCase.Extension ? (global::Google.Protobuf.WellKnownTypes.Any) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.Extension;
      }
    }

    /// <summary>Field number for the "unknown" field.</summary>
    public const int UnknownFieldNumber = 999;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Unknown Unknown {
      get { return relTypeCase_ == RelTypeOneofCase.Unknown ? (global::Spark.Connect.Unknown) relType_ : null; }
      set {
        relType_ = value;
        relTypeCase_ = value == null ? RelTypeOneofCase.None : RelTypeOneofCase.Unknown;
      }
    }

    private object relType_;
    /// <summary>Enum of possible cases for the "rel_type" oneof.</summary>
    public enum RelTypeOneofCase {
      None = 0,
      Read = 2,
      Project = 3,
      Filter = 4,
      Join = 5,
      SetOp = 6,
      Sort = 7,
      Limit = 8,
      Aggregate = 9,
      Sql = 10,
      LocalRelation = 11,
      Sample = 12,
      Offset = 13,
      Deduplicate = 14,
      Range = 15,
      SubqueryAlias = 16,
      Repartition = 17,
      ToDf = 18,
      WithColumnsRenamed = 19,
      ShowString = 20,
      Drop = 21,
      Tail = 22,
      WithColumns = 23,
      Hint = 24,
      Unpivot = 25,
      ToSchema = 26,
      RepartitionByExpression = 27,
      MapPartitions = 28,
      CollectMetrics = 29,
      Parse = 30,
      GroupMap = 31,
      CoGroupMap = 32,
      FillNa = 90,
      DropNa = 91,
      Replace = 92,
      Summary = 100,
      Crosstab = 101,
      Describe = 102,
      Cov = 103,
      Corr = 104,
      ApproxQuantile = 105,
      FreqItems = 106,
      SampleBy = 107,
      Catalog = 200,
      Extension = 998,
      Unknown = 999,
    }
    private RelTypeOneofCase relTypeCase_ = RelTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RelTypeOneofCase RelTypeCase {
      get { return relTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRelType() {
      relTypeCase_ = RelTypeOneofCase.None;
      relType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Relation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Relation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Common, other.Common)) return false;
      if (!object.Equals(Read, other.Read)) return false;
      if (!object.Equals(Project, other.Project)) return false;
      if (!object.Equals(Filter, other.Filter)) return false;
      if (!object.Equals(Join, other.Join)) return false;
      if (!object.Equals(SetOp, other.SetOp)) return false;
      if (!object.Equals(Sort, other.Sort)) return false;
      if (!object.Equals(Limit, other.Limit)) return false;
      if (!object.Equals(Aggregate, other.Aggregate)) return false;
      if (!object.Equals(Sql, other.Sql)) return false;
      if (!object.Equals(LocalRelation, other.LocalRelation)) return false;
      if (!object.Equals(Sample, other.Sample)) return false;
      if (!object.Equals(Offset, other.Offset)) return false;
      if (!object.Equals(Deduplicate, other.Deduplicate)) return false;
      if (!object.Equals(Range, other.Range)) return false;
      if (!object.Equals(SubqueryAlias, other.SubqueryAlias)) return false;
      if (!object.Equals(Repartition, other.Repartition)) return false;
      if (!object.Equals(ToDf, other.ToDf)) return false;
      if (!object.Equals(WithColumnsRenamed, other.WithColumnsRenamed)) return false;
      if (!object.Equals(ShowString, other.ShowString)) return false;
      if (!object.Equals(Drop, other.Drop)) return false;
      if (!object.Equals(Tail, other.Tail)) return false;
      if (!object.Equals(WithColumns, other.WithColumns)) return false;
      if (!object.Equals(Hint, other.Hint)) return false;
      if (!object.Equals(Unpivot, other.Unpivot)) return false;
      if (!object.Equals(ToSchema, other.ToSchema)) return false;
      if (!object.Equals(RepartitionByExpression, other.RepartitionByExpression)) return false;
      if (!object.Equals(MapPartitions, other.MapPartitions)) return false;
      if (!object.Equals(CollectMetrics, other.CollectMetrics)) return false;
      if (!object.Equals(Parse, other.Parse)) return false;
      if (!object.Equals(GroupMap, other.GroupMap)) return false;
      if (!object.Equals(CoGroupMap, other.CoGroupMap)) return false;
      if (!object.Equals(FillNa, other.FillNa)) return false;
      if (!object.Equals(DropNa, other.DropNa)) return false;
      if (!object.Equals(Replace, other.Replace)) return false;
      if (!object.Equals(Summary, other.Summary)) return false;
      if (!object.Equals(Crosstab, other.Crosstab)) return false;
      if (!object.Equals(Describe, other.Describe)) return false;
      if (!object.Equals(Cov, other.Cov)) return false;
      if (!object.Equals(Corr, other.Corr)) return false;
      if (!object.Equals(ApproxQuantile, other.ApproxQuantile)) return false;
      if (!object.Equals(FreqItems, other.FreqItems)) return false;
      if (!object.Equals(SampleBy, other.SampleBy)) return false;
      if (!object.Equals(Catalog, other.Catalog)) return false;
      if (!object.Equals(Extension, other.Extension)) return false;
      if (!object.Equals(Unknown, other.Unknown)) return false;
      if (RelTypeCase != other.RelTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (common_ != null) hash ^= Common.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.Read) hash ^= Read.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.Project) hash ^= Project.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.Filter) hash ^= Filter.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.Join) hash ^= Join.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.SetOp) hash ^= SetOp.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.Sort) hash ^= Sort.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.Limit) hash ^= Limit.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.Aggregate) hash ^= Aggregate.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.Sql) hash ^= Sql.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.LocalRelation) hash ^= LocalRelation.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.Sample) hash ^= Sample.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.Offset) hash ^= Offset.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.Deduplicate) hash ^= Deduplicate.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.Range) hash ^= Range.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.SubqueryAlias) hash ^= SubqueryAlias.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.Repartition) hash ^= Repartition.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.ToDf) hash ^= ToDf.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.WithColumnsRenamed) hash ^= WithColumnsRenamed.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.ShowString) hash ^= ShowString.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.Drop) hash ^= Drop.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.Tail) hash ^= Tail.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.WithColumns) hash ^= WithColumns.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.Hint) hash ^= Hint.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.Unpivot) hash ^= Unpivot.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.ToSchema) hash ^= ToSchema.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.RepartitionByExpression) hash ^= RepartitionByExpression.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.MapPartitions) hash ^= MapPartitions.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.CollectMetrics) hash ^= CollectMetrics.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.Parse) hash ^= Parse.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.GroupMap) hash ^= GroupMap.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.CoGroupMap) hash ^= CoGroupMap.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.FillNa) hash ^= FillNa.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.DropNa) hash ^= DropNa.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.Replace) hash ^= Replace.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.Summary) hash ^= Summary.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.Crosstab) hash ^= Crosstab.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.Describe) hash ^= Describe.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.Cov) hash ^= Cov.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.Corr) hash ^= Corr.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.ApproxQuantile) hash ^= ApproxQuantile.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.FreqItems) hash ^= FreqItems.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.SampleBy) hash ^= SampleBy.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.Catalog) hash ^= Catalog.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.Extension) hash ^= Extension.GetHashCode();
      if (relTypeCase_ == RelTypeOneofCase.Unknown) hash ^= Unknown.GetHashCode();
      hash ^= (int) relTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (common_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Common);
      }
      if (relTypeCase_ == RelTypeOneofCase.Read) {
        output.WriteRawTag(18);
        output.WriteMessage(Read);
      }
      if (relTypeCase_ == RelTypeOneofCase.Project) {
        output.WriteRawTag(26);
        output.WriteMessage(Project);
      }
      if (relTypeCase_ == RelTypeOneofCase.Filter) {
        output.WriteRawTag(34);
        output.WriteMessage(Filter);
      }
      if (relTypeCase_ == RelTypeOneofCase.Join) {
        output.WriteRawTag(42);
        output.WriteMessage(Join);
      }
      if (relTypeCase_ == RelTypeOneofCase.SetOp) {
        output.WriteRawTag(50);
        output.WriteMessage(SetOp);
      }
      if (relTypeCase_ == RelTypeOneofCase.Sort) {
        output.WriteRawTag(58);
        output.WriteMessage(Sort);
      }
      if (relTypeCase_ == RelTypeOneofCase.Limit) {
        output.WriteRawTag(66);
        output.WriteMessage(Limit);
      }
      if (relTypeCase_ == RelTypeOneofCase.Aggregate) {
        output.WriteRawTag(74);
        output.WriteMessage(Aggregate);
      }
      if (relTypeCase_ == RelTypeOneofCase.Sql) {
        output.WriteRawTag(82);
        output.WriteMessage(Sql);
      }
      if (relTypeCase_ == RelTypeOneofCase.LocalRelation) {
        output.WriteRawTag(90);
        output.WriteMessage(LocalRelation);
      }
      if (relTypeCase_ == RelTypeOneofCase.Sample) {
        output.WriteRawTag(98);
        output.WriteMessage(Sample);
      }
      if (relTypeCase_ == RelTypeOneofCase.Offset) {
        output.WriteRawTag(106);
        output.WriteMessage(Offset);
      }
      if (relTypeCase_ == RelTypeOneofCase.Deduplicate) {
        output.WriteRawTag(114);
        output.WriteMessage(Deduplicate);
      }
      if (relTypeCase_ == RelTypeOneofCase.Range) {
        output.WriteRawTag(122);
        output.WriteMessage(Range);
      }
      if (relTypeCase_ == RelTypeOneofCase.SubqueryAlias) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(SubqueryAlias);
      }
      if (relTypeCase_ == RelTypeOneofCase.Repartition) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Repartition);
      }
      if (relTypeCase_ == RelTypeOneofCase.ToDf) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(ToDf);
      }
      if (relTypeCase_ == RelTypeOneofCase.WithColumnsRenamed) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(WithColumnsRenamed);
      }
      if (relTypeCase_ == RelTypeOneofCase.ShowString) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(ShowString);
      }
      if (relTypeCase_ == RelTypeOneofCase.Drop) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Drop);
      }
      if (relTypeCase_ == RelTypeOneofCase.Tail) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(Tail);
      }
      if (relTypeCase_ == RelTypeOneofCase.WithColumns) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(WithColumns);
      }
      if (relTypeCase_ == RelTypeOneofCase.Hint) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(Hint);
      }
      if (relTypeCase_ == RelTypeOneofCase.Unpivot) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(Unpivot);
      }
      if (relTypeCase_ == RelTypeOneofCase.ToSchema) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(ToSchema);
      }
      if (relTypeCase_ == RelTypeOneofCase.RepartitionByExpression) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(RepartitionByExpression);
      }
      if (relTypeCase_ == RelTypeOneofCase.MapPartitions) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(MapPartitions);
      }
      if (relTypeCase_ == RelTypeOneofCase.CollectMetrics) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(CollectMetrics);
      }
      if (relTypeCase_ == RelTypeOneofCase.Parse) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(Parse);
      }
      if (relTypeCase_ == RelTypeOneofCase.GroupMap) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(GroupMap);
      }
      if (relTypeCase_ == RelTypeOneofCase.CoGroupMap) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(CoGroupMap);
      }
      if (relTypeCase_ == RelTypeOneofCase.FillNa) {
        output.WriteRawTag(210, 5);
        output.WriteMessage(FillNa);
      }
      if (relTypeCase_ == RelTypeOneofCase.DropNa) {
        output.WriteRawTag(218, 5);
        output.WriteMessage(DropNa);
      }
      if (relTypeCase_ == RelTypeOneofCase.Replace) {
        output.WriteRawTag(226, 5);
        output.WriteMessage(Replace);
      }
      if (relTypeCase_ == RelTypeOneofCase.Summary) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Summary);
      }
      if (relTypeCase_ == RelTypeOneofCase.Crosstab) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(Crosstab);
      }
      if (relTypeCase_ == RelTypeOneofCase.Describe) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(Describe);
      }
      if (relTypeCase_ == RelTypeOneofCase.Cov) {
        output.WriteRawTag(186, 6);
        output.WriteMessage(Cov);
      }
      if (relTypeCase_ == RelTypeOneofCase.Corr) {
        output.WriteRawTag(194, 6);
        output.WriteMessage(Corr);
      }
      if (relTypeCase_ == RelTypeOneofCase.ApproxQuantile) {
        output.WriteRawTag(202, 6);
        output.WriteMessage(ApproxQuantile);
      }
      if (relTypeCase_ == RelTypeOneofCase.FreqItems) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(FreqItems);
      }
      if (relTypeCase_ == RelTypeOneofCase.SampleBy) {
        output.WriteRawTag(218, 6);
        output.WriteMessage(SampleBy);
      }
      if (relTypeCase_ == RelTypeOneofCase.Catalog) {
        output.WriteRawTag(194, 12);
        output.WriteMessage(Catalog);
      }
      if (relTypeCase_ == RelTypeOneofCase.Extension) {
        output.WriteRawTag(178, 62);
        output.WriteMessage(Extension);
      }
      if (relTypeCase_ == RelTypeOneofCase.Unknown) {
        output.WriteRawTag(186, 62);
        output.WriteMessage(Unknown);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (common_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Common);
      }
      if (relTypeCase_ == RelTypeOneofCase.Read) {
        output.WriteRawTag(18);
        output.WriteMessage(Read);
      }
      if (relTypeCase_ == RelTypeOneofCase.Project) {
        output.WriteRawTag(26);
        output.WriteMessage(Project);
      }
      if (relTypeCase_ == RelTypeOneofCase.Filter) {
        output.WriteRawTag(34);
        output.WriteMessage(Filter);
      }
      if (relTypeCase_ == RelTypeOneofCase.Join) {
        output.WriteRawTag(42);
        output.WriteMessage(Join);
      }
      if (relTypeCase_ == RelTypeOneofCase.SetOp) {
        output.WriteRawTag(50);
        output.WriteMessage(SetOp);
      }
      if (relTypeCase_ == RelTypeOneofCase.Sort) {
        output.WriteRawTag(58);
        output.WriteMessage(Sort);
      }
      if (relTypeCase_ == RelTypeOneofCase.Limit) {
        output.WriteRawTag(66);
        output.WriteMessage(Limit);
      }
      if (relTypeCase_ == RelTypeOneofCase.Aggregate) {
        output.WriteRawTag(74);
        output.WriteMessage(Aggregate);
      }
      if (relTypeCase_ == RelTypeOneofCase.Sql) {
        output.WriteRawTag(82);
        output.WriteMessage(Sql);
      }
      if (relTypeCase_ == RelTypeOneofCase.LocalRelation) {
        output.WriteRawTag(90);
        output.WriteMessage(LocalRelation);
      }
      if (relTypeCase_ == RelTypeOneofCase.Sample) {
        output.WriteRawTag(98);
        output.WriteMessage(Sample);
      }
      if (relTypeCase_ == RelTypeOneofCase.Offset) {
        output.WriteRawTag(106);
        output.WriteMessage(Offset);
      }
      if (relTypeCase_ == RelTypeOneofCase.Deduplicate) {
        output.WriteRawTag(114);
        output.WriteMessage(Deduplicate);
      }
      if (relTypeCase_ == RelTypeOneofCase.Range) {
        output.WriteRawTag(122);
        output.WriteMessage(Range);
      }
      if (relTypeCase_ == RelTypeOneofCase.SubqueryAlias) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(SubqueryAlias);
      }
      if (relTypeCase_ == RelTypeOneofCase.Repartition) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Repartition);
      }
      if (relTypeCase_ == RelTypeOneofCase.ToDf) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(ToDf);
      }
      if (relTypeCase_ == RelTypeOneofCase.WithColumnsRenamed) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(WithColumnsRenamed);
      }
      if (relTypeCase_ == RelTypeOneofCase.ShowString) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(ShowString);
      }
      if (relTypeCase_ == RelTypeOneofCase.Drop) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Drop);
      }
      if (relTypeCase_ == RelTypeOneofCase.Tail) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(Tail);
      }
      if (relTypeCase_ == RelTypeOneofCase.WithColumns) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(WithColumns);
      }
      if (relTypeCase_ == RelTypeOneofCase.Hint) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(Hint);
      }
      if (relTypeCase_ == RelTypeOneofCase.Unpivot) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(Unpivot);
      }
      if (relTypeCase_ == RelTypeOneofCase.ToSchema) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(ToSchema);
      }
      if (relTypeCase_ == RelTypeOneofCase.RepartitionByExpression) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(RepartitionByExpression);
      }
      if (relTypeCase_ == RelTypeOneofCase.MapPartitions) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(MapPartitions);
      }
      if (relTypeCase_ == RelTypeOneofCase.CollectMetrics) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(CollectMetrics);
      }
      if (relTypeCase_ == RelTypeOneofCase.Parse) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(Parse);
      }
      if (relTypeCase_ == RelTypeOneofCase.GroupMap) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(GroupMap);
      }
      if (relTypeCase_ == RelTypeOneofCase.CoGroupMap) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(CoGroupMap);
      }
      if (relTypeCase_ == RelTypeOneofCase.FillNa) {
        output.WriteRawTag(210, 5);
        output.WriteMessage(FillNa);
      }
      if (relTypeCase_ == RelTypeOneofCase.DropNa) {
        output.WriteRawTag(218, 5);
        output.WriteMessage(DropNa);
      }
      if (relTypeCase_ == RelTypeOneofCase.Replace) {
        output.WriteRawTag(226, 5);
        output.WriteMessage(Replace);
      }
      if (relTypeCase_ == RelTypeOneofCase.Summary) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(Summary);
      }
      if (relTypeCase_ == RelTypeOneofCase.Crosstab) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(Crosstab);
      }
      if (relTypeCase_ == RelTypeOneofCase.Describe) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(Describe);
      }
      if (relTypeCase_ == RelTypeOneofCase.Cov) {
        output.WriteRawTag(186, 6);
        output.WriteMessage(Cov);
      }
      if (relTypeCase_ == RelTypeOneofCase.Corr) {
        output.WriteRawTag(194, 6);
        output.WriteMessage(Corr);
      }
      if (relTypeCase_ == RelTypeOneofCase.ApproxQuantile) {
        output.WriteRawTag(202, 6);
        output.WriteMessage(ApproxQuantile);
      }
      if (relTypeCase_ == RelTypeOneofCase.FreqItems) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(FreqItems);
      }
      if (relTypeCase_ == RelTypeOneofCase.SampleBy) {
        output.WriteRawTag(218, 6);
        output.WriteMessage(SampleBy);
      }
      if (relTypeCase_ == RelTypeOneofCase.Catalog) {
        output.WriteRawTag(194, 12);
        output.WriteMessage(Catalog);
      }
      if (relTypeCase_ == RelTypeOneofCase.Extension) {
        output.WriteRawTag(178, 62);
        output.WriteMessage(Extension);
      }
      if (relTypeCase_ == RelTypeOneofCase.Unknown) {
        output.WriteRawTag(186, 62);
        output.WriteMessage(Unknown);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      if (relTypeCase_ == RelTypeOneofCase.Read) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Read);
      }
      if (relTypeCase_ == RelTypeOneofCase.Project) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Project);
      }
      if (relTypeCase_ == RelTypeOneofCase.Filter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Filter);
      }
      if (relTypeCase_ == RelTypeOneofCase.Join) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Join);
      }
      if (relTypeCase_ == RelTypeOneofCase.SetOp) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SetOp);
      }
      if (relTypeCase_ == RelTypeOneofCase.Sort) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sort);
      }
      if (relTypeCase_ == RelTypeOneofCase.Limit) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Limit);
      }
      if (relTypeCase_ == RelTypeOneofCase.Aggregate) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Aggregate);
      }
      if (relTypeCase_ == RelTypeOneofCase.Sql) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sql);
      }
      if (relTypeCase_ == RelTypeOneofCase.LocalRelation) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalRelation);
      }
      if (relTypeCase_ == RelTypeOneofCase.Sample) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Sample);
      }
      if (relTypeCase_ == RelTypeOneofCase.Offset) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Offset);
      }
      if (relTypeCase_ == RelTypeOneofCase.Deduplicate) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deduplicate);
      }
      if (relTypeCase_ == RelTypeOneofCase.Range) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Range);
      }
      if (relTypeCase_ == RelTypeOneofCase.SubqueryAlias) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SubqueryAlias);
      }
      if (relTypeCase_ == RelTypeOneofCase.Repartition) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Repartition);
      }
      if (relTypeCase_ == RelTypeOneofCase.ToDf) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ToDf);
      }
      if (relTypeCase_ == RelTypeOneofCase.WithColumnsRenamed) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WithColumnsRenamed);
      }
      if (relTypeCase_ == RelTypeOneofCase.ShowString) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ShowString);
      }
      if (relTypeCase_ == RelTypeOneofCase.Drop) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Drop);
      }
      if (relTypeCase_ == RelTypeOneofCase.Tail) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Tail);
      }
      if (relTypeCase_ == RelTypeOneofCase.WithColumns) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WithColumns);
      }
      if (relTypeCase_ == RelTypeOneofCase.Hint) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Hint);
      }
      if (relTypeCase_ == RelTypeOneofCase.Unpivot) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Unpivot);
      }
      if (relTypeCase_ == RelTypeOneofCase.ToSchema) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ToSchema);
      }
      if (relTypeCase_ == RelTypeOneofCase.RepartitionByExpression) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RepartitionByExpression);
      }
      if (relTypeCase_ == RelTypeOneofCase.MapPartitions) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MapPartitions);
      }
      if (relTypeCase_ == RelTypeOneofCase.CollectMetrics) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CollectMetrics);
      }
      if (relTypeCase_ == RelTypeOneofCase.Parse) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Parse);
      }
      if (relTypeCase_ == RelTypeOneofCase.GroupMap) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GroupMap);
      }
      if (relTypeCase_ == RelTypeOneofCase.CoGroupMap) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CoGroupMap);
      }
      if (relTypeCase_ == RelTypeOneofCase.FillNa) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FillNa);
      }
      if (relTypeCase_ == RelTypeOneofCase.DropNa) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DropNa);
      }
      if (relTypeCase_ == RelTypeOneofCase.Replace) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Replace);
      }
      if (relTypeCase_ == RelTypeOneofCase.Summary) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Summary);
      }
      if (relTypeCase_ == RelTypeOneofCase.Crosstab) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Crosstab);
      }
      if (relTypeCase_ == RelTypeOneofCase.Describe) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Describe);
      }
      if (relTypeCase_ == RelTypeOneofCase.Cov) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Cov);
      }
      if (relTypeCase_ == RelTypeOneofCase.Corr) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Corr);
      }
      if (relTypeCase_ == RelTypeOneofCase.ApproxQuantile) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ApproxQuantile);
      }
      if (relTypeCase_ == RelTypeOneofCase.FreqItems) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FreqItems);
      }
      if (relTypeCase_ == RelTypeOneofCase.SampleBy) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SampleBy);
      }
      if (relTypeCase_ == RelTypeOneofCase.Catalog) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Catalog);
      }
      if (relTypeCase_ == RelTypeOneofCase.Extension) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Extension);
      }
      if (relTypeCase_ == RelTypeOneofCase.Unknown) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Unknown);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Relation other) {
      if (other == null) {
        return;
      }
      if (other.common_ != null) {
        if (common_ == null) {
          Common = new global::Spark.Connect.RelationCommon();
        }
        Common.MergeFrom(other.Common);
      }
      switch (other.RelTypeCase) {
        case RelTypeOneofCase.Read:
          if (Read == null) {
            Read = new global::Spark.Connect.Read();
          }
          Read.MergeFrom(other.Read);
          break;
        case RelTypeOneofCase.Project:
          if (Project == null) {
            Project = new global::Spark.Connect.Project();
          }
          Project.MergeFrom(other.Project);
          break;
        case RelTypeOneofCase.Filter:
          if (Filter == null) {
            Filter = new global::Spark.Connect.Filter();
          }
          Filter.MergeFrom(other.Filter);
          break;
        case RelTypeOneofCase.Join:
          if (Join == null) {
            Join = new global::Spark.Connect.Join();
          }
          Join.MergeFrom(other.Join);
          break;
        case RelTypeOneofCase.SetOp:
          if (SetOp == null) {
            SetOp = new global::Spark.Connect.SetOperation();
          }
          SetOp.MergeFrom(other.SetOp);
          break;
        case RelTypeOneofCase.Sort:
          if (Sort == null) {
            Sort = new global::Spark.Connect.Sort();
          }
          Sort.MergeFrom(other.Sort);
          break;
        case RelTypeOneofCase.Limit:
          if (Limit == null) {
            Limit = new global::Spark.Connect.Limit();
          }
          Limit.MergeFrom(other.Limit);
          break;
        case RelTypeOneofCase.Aggregate:
          if (Aggregate == null) {
            Aggregate = new global::Spark.Connect.Aggregate();
          }
          Aggregate.MergeFrom(other.Aggregate);
          break;
        case RelTypeOneofCase.Sql:
          if (Sql == null) {
            Sql = new global::Spark.Connect.SQL();
          }
          Sql.MergeFrom(other.Sql);
          break;
        case RelTypeOneofCase.LocalRelation:
          if (LocalRelation == null) {
            LocalRelation = new global::Spark.Connect.LocalRelation();
          }
          LocalRelation.MergeFrom(other.LocalRelation);
          break;
        case RelTypeOneofCase.Sample:
          if (Sample == null) {
            Sample = new global::Spark.Connect.Sample();
          }
          Sample.MergeFrom(other.Sample);
          break;
        case RelTypeOneofCase.Offset:
          if (Offset == null) {
            Offset = new global::Spark.Connect.Offset();
          }
          Offset.MergeFrom(other.Offset);
          break;
        case RelTypeOneofCase.Deduplicate:
          if (Deduplicate == null) {
            Deduplicate = new global::Spark.Connect.Deduplicate();
          }
          Deduplicate.MergeFrom(other.Deduplicate);
          break;
        case RelTypeOneofCase.Range:
          if (Range == null) {
            Range = new global::Spark.Connect.Range();
          }
          Range.MergeFrom(other.Range);
          break;
        case RelTypeOneofCase.SubqueryAlias:
          if (SubqueryAlias == null) {
            SubqueryAlias = new global::Spark.Connect.SubqueryAlias();
          }
          SubqueryAlias.MergeFrom(other.SubqueryAlias);
          break;
        case RelTypeOneofCase.Repartition:
          if (Repartition == null) {
            Repartition = new global::Spark.Connect.Repartition();
          }
          Repartition.MergeFrom(other.Repartition);
          break;
        case RelTypeOneofCase.ToDf:
          if (ToDf == null) {
            ToDf = new global::Spark.Connect.ToDF();
          }
          ToDf.MergeFrom(other.ToDf);
          break;
        case RelTypeOneofCase.WithColumnsRenamed:
          if (WithColumnsRenamed == null) {
            WithColumnsRenamed = new global::Spark.Connect.WithColumnsRenamed();
          }
          WithColumnsRenamed.MergeFrom(other.WithColumnsRenamed);
          break;
        case RelTypeOneofCase.ShowString:
          if (ShowString == null) {
            ShowString = new global::Spark.Connect.ShowString();
          }
          ShowString.MergeFrom(other.ShowString);
          break;
        case RelTypeOneofCase.Drop:
          if (Drop == null) {
            Drop = new global::Spark.Connect.Drop();
          }
          Drop.MergeFrom(other.Drop);
          break;
        case RelTypeOneofCase.Tail:
          if (Tail == null) {
            Tail = new global::Spark.Connect.Tail();
          }
          Tail.MergeFrom(other.Tail);
          break;
        case RelTypeOneofCase.WithColumns:
          if (WithColumns == null) {
            WithColumns = new global::Spark.Connect.WithColumns();
          }
          WithColumns.MergeFrom(other.WithColumns);
          break;
        case RelTypeOneofCase.Hint:
          if (Hint == null) {
            Hint = new global::Spark.Connect.Hint();
          }
          Hint.MergeFrom(other.Hint);
          break;
        case RelTypeOneofCase.Unpivot:
          if (Unpivot == null) {
            Unpivot = new global::Spark.Connect.Unpivot();
          }
          Unpivot.MergeFrom(other.Unpivot);
          break;
        case RelTypeOneofCase.ToSchema:
          if (ToSchema == null) {
            ToSchema = new global::Spark.Connect.ToSchema();
          }
          ToSchema.MergeFrom(other.ToSchema);
          break;
        case RelTypeOneofCase.RepartitionByExpression:
          if (RepartitionByExpression == null) {
            RepartitionByExpression = new global::Spark.Connect.RepartitionByExpression();
          }
          RepartitionByExpression.MergeFrom(other.RepartitionByExpression);
          break;
        case RelTypeOneofCase.MapPartitions:
          if (MapPartitions == null) {
            MapPartitions = new global::Spark.Connect.MapPartitions();
          }
          MapPartitions.MergeFrom(other.MapPartitions);
          break;
        case RelTypeOneofCase.CollectMetrics:
          if (CollectMetrics == null) {
            CollectMetrics = new global::Spark.Connect.CollectMetrics();
          }
          CollectMetrics.MergeFrom(other.CollectMetrics);
          break;
        case RelTypeOneofCase.Parse:
          if (Parse == null) {
            Parse = new global::Spark.Connect.Parse();
          }
          Parse.MergeFrom(other.Parse);
          break;
        case RelTypeOneofCase.GroupMap:
          if (GroupMap == null) {
            GroupMap = new global::Spark.Connect.GroupMap();
          }
          GroupMap.MergeFrom(other.GroupMap);
          break;
        case RelTypeOneofCase.CoGroupMap:
          if (CoGroupMap == null) {
            CoGroupMap = new global::Spark.Connect.CoGroupMap();
          }
          CoGroupMap.MergeFrom(other.CoGroupMap);
          break;
        case RelTypeOneofCase.FillNa:
          if (FillNa == null) {
            FillNa = new global::Spark.Connect.NAFill();
          }
          FillNa.MergeFrom(other.FillNa);
          break;
        case RelTypeOneofCase.DropNa:
          if (DropNa == null) {
            DropNa = new global::Spark.Connect.NADrop();
          }
          DropNa.MergeFrom(other.DropNa);
          break;
        case RelTypeOneofCase.Replace:
          if (Replace == null) {
            Replace = new global::Spark.Connect.NAReplace();
          }
          Replace.MergeFrom(other.Replace);
          break;
        case RelTypeOneofCase.Summary:
          if (Summary == null) {
            Summary = new global::Spark.Connect.StatSummary();
          }
          Summary.MergeFrom(other.Summary);
          break;
        case RelTypeOneofCase.Crosstab:
          if (Crosstab == null) {
            Crosstab = new global::Spark.Connect.StatCrosstab();
          }
          Crosstab.MergeFrom(other.Crosstab);
          break;
        case RelTypeOneofCase.Describe:
          if (Describe == null) {
            Describe = new global::Spark.Connect.StatDescribe();
          }
          Describe.MergeFrom(other.Describe);
          break;
        case RelTypeOneofCase.Cov:
          if (Cov == null) {
            Cov = new global::Spark.Connect.StatCov();
          }
          Cov.MergeFrom(other.Cov);
          break;
        case RelTypeOneofCase.Corr:
          if (Corr == null) {
            Corr = new global::Spark.Connect.StatCorr();
          }
          Corr.MergeFrom(other.Corr);
          break;
        case RelTypeOneofCase.ApproxQuantile:
          if (ApproxQuantile == null) {
            ApproxQuantile = new global::Spark.Connect.StatApproxQuantile();
          }
          ApproxQuantile.MergeFrom(other.ApproxQuantile);
          break;
        case RelTypeOneofCase.FreqItems:
          if (FreqItems == null) {
            FreqItems = new global::Spark.Connect.StatFreqItems();
          }
          FreqItems.MergeFrom(other.FreqItems);
          break;
        case RelTypeOneofCase.SampleBy:
          if (SampleBy == null) {
            SampleBy = new global::Spark.Connect.StatSampleBy();
          }
          SampleBy.MergeFrom(other.SampleBy);
          break;
        case RelTypeOneofCase.Catalog:
          if (Catalog == null) {
            Catalog = new global::Spark.Connect.Catalog();
          }
          Catalog.MergeFrom(other.Catalog);
          break;
        case RelTypeOneofCase.Extension:
          if (Extension == null) {
            Extension = new global::Google.Protobuf.WellKnownTypes.Any();
          }
          Extension.MergeFrom(other.Extension);
          break;
        case RelTypeOneofCase.Unknown:
          if (Unknown == null) {
            Unknown = new global::Spark.Connect.Unknown();
          }
          Unknown.MergeFrom(other.Unknown);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (common_ == null) {
              Common = new global::Spark.Connect.RelationCommon();
            }
            input.ReadMessage(Common);
            break;
          }
          case 18: {
            global::Spark.Connect.Read subBuilder = new global::Spark.Connect.Read();
            if (relTypeCase_ == RelTypeOneofCase.Read) {
              subBuilder.MergeFrom(Read);
            }
            input.ReadMessage(subBuilder);
            Read = subBuilder;
            break;
          }
          case 26: {
            global::Spark.Connect.Project subBuilder = new global::Spark.Connect.Project();
            if (relTypeCase_ == RelTypeOneofCase.Project) {
              subBuilder.MergeFrom(Project);
            }
            input.ReadMessage(subBuilder);
            Project = subBuilder;
            break;
          }
          case 34: {
            global::Spark.Connect.Filter subBuilder = new global::Spark.Connect.Filter();
            if (relTypeCase_ == RelTypeOneofCase.Filter) {
              subBuilder.MergeFrom(Filter);
            }
            input.ReadMessage(subBuilder);
            Filter = subBuilder;
            break;
          }
          case 42: {
            global::Spark.Connect.Join subBuilder = new global::Spark.Connect.Join();
            if (relTypeCase_ == RelTypeOneofCase.Join) {
              subBuilder.MergeFrom(Join);
            }
            input.ReadMessage(subBuilder);
            Join = subBuilder;
            break;
          }
          case 50: {
            global::Spark.Connect.SetOperation subBuilder = new global::Spark.Connect.SetOperation();
            if (relTypeCase_ == RelTypeOneofCase.SetOp) {
              subBuilder.MergeFrom(SetOp);
            }
            input.ReadMessage(subBuilder);
            SetOp = subBuilder;
            break;
          }
          case 58: {
            global::Spark.Connect.Sort subBuilder = new global::Spark.Connect.Sort();
            if (relTypeCase_ == RelTypeOneofCase.Sort) {
              subBuilder.MergeFrom(Sort);
            }
            input.ReadMessage(subBuilder);
            Sort = subBuilder;
            break;
          }
          case 66: {
            global::Spark.Connect.Limit subBuilder = new global::Spark.Connect.Limit();
            if (relTypeCase_ == RelTypeOneofCase.Limit) {
              subBuilder.MergeFrom(Limit);
            }
            input.ReadMessage(subBuilder);
            Limit = subBuilder;
            break;
          }
          case 74: {
            global::Spark.Connect.Aggregate subBuilder = new global::Spark.Connect.Aggregate();
            if (relTypeCase_ == RelTypeOneofCase.Aggregate) {
              subBuilder.MergeFrom(Aggregate);
            }
            input.ReadMessage(subBuilder);
            Aggregate = subBuilder;
            break;
          }
          case 82: {
            global::Spark.Connect.SQL subBuilder = new global::Spark.Connect.SQL();
            if (relTypeCase_ == RelTypeOneofCase.Sql) {
              subBuilder.MergeFrom(Sql);
            }
            input.ReadMessage(subBuilder);
            Sql = subBuilder;
            break;
          }
          case 90: {
            global::Spark.Connect.LocalRelation subBuilder = new global::Spark.Connect.LocalRelation();
            if (relTypeCase_ == RelTypeOneofCase.LocalRelation) {
              subBuilder.MergeFrom(LocalRelation);
            }
            input.ReadMessage(subBuilder);
            LocalRelation = subBuilder;
            break;
          }
          case 98: {
            global::Spark.Connect.Sample subBuilder = new global::Spark.Connect.Sample();
            if (relTypeCase_ == RelTypeOneofCase.Sample) {
              subBuilder.MergeFrom(Sample);
            }
            input.ReadMessage(subBuilder);
            Sample = subBuilder;
            break;
          }
          case 106: {
            global::Spark.Connect.Offset subBuilder = new global::Spark.Connect.Offset();
            if (relTypeCase_ == RelTypeOneofCase.Offset) {
              subBuilder.MergeFrom(Offset);
            }
            input.ReadMessage(subBuilder);
            Offset = subBuilder;
            break;
          }
          case 114: {
            global::Spark.Connect.Deduplicate subBuilder = new global::Spark.Connect.Deduplicate();
            if (relTypeCase_ == RelTypeOneofCase.Deduplicate) {
              subBuilder.MergeFrom(Deduplicate);
            }
            input.ReadMessage(subBuilder);
            Deduplicate = subBuilder;
            break;
          }
          case 122: {
            global::Spark.Connect.Range subBuilder = new global::Spark.Connect.Range();
            if (relTypeCase_ == RelTypeOneofCase.Range) {
              subBuilder.MergeFrom(Range);
            }
            input.ReadMessage(subBuilder);
            Range = subBuilder;
            break;
          }
          case 130: {
            global::Spark.Connect.SubqueryAlias subBuilder = new global::Spark.Connect.SubqueryAlias();
            if (relTypeCase_ == RelTypeOneofCase.SubqueryAlias) {
              subBuilder.MergeFrom(SubqueryAlias);
            }
            input.ReadMessage(subBuilder);
            SubqueryAlias = subBuilder;
            break;
          }
          case 138: {
            global::Spark.Connect.Repartition subBuilder = new global::Spark.Connect.Repartition();
            if (relTypeCase_ == RelTypeOneofCase.Repartition) {
              subBuilder.MergeFrom(Repartition);
            }
            input.ReadMessage(subBuilder);
            Repartition = subBuilder;
            break;
          }
          case 146: {
            global::Spark.Connect.ToDF subBuilder = new global::Spark.Connect.ToDF();
            if (relTypeCase_ == RelTypeOneofCase.ToDf) {
              subBuilder.MergeFrom(ToDf);
            }
            input.ReadMessage(subBuilder);
            ToDf = subBuilder;
            break;
          }
          case 154: {
            global::Spark.Connect.WithColumnsRenamed subBuilder = new global::Spark.Connect.WithColumnsRenamed();
            if (relTypeCase_ == RelTypeOneofCase.WithColumnsRenamed) {
              subBuilder.MergeFrom(WithColumnsRenamed);
            }
            input.ReadMessage(subBuilder);
            WithColumnsRenamed = subBuilder;
            break;
          }
          case 162: {
            global::Spark.Connect.ShowString subBuilder = new global::Spark.Connect.ShowString();
            if (relTypeCase_ == RelTypeOneofCase.ShowString) {
              subBuilder.MergeFrom(ShowString);
            }
            input.ReadMessage(subBuilder);
            ShowString = subBuilder;
            break;
          }
          case 170: {
            global::Spark.Connect.Drop subBuilder = new global::Spark.Connect.Drop();
            if (relTypeCase_ == RelTypeOneofCase.Drop) {
              subBuilder.MergeFrom(Drop);
            }
            input.ReadMessage(subBuilder);
            Drop = subBuilder;
            break;
          }
          case 178: {
            global::Spark.Connect.Tail subBuilder = new global::Spark.Connect.Tail();
            if (relTypeCase_ == RelTypeOneofCase.Tail) {
              subBuilder.MergeFrom(Tail);
            }
            input.ReadMessage(subBuilder);
            Tail = subBuilder;
            break;
          }
          case 186: {
            global::Spark.Connect.WithColumns subBuilder = new global::Spark.Connect.WithColumns();
            if (relTypeCase_ == RelTypeOneofCase.WithColumns) {
              subBuilder.MergeFrom(WithColumns);
            }
            input.ReadMessage(subBuilder);
            WithColumns = subBuilder;
            break;
          }
          case 194: {
            global::Spark.Connect.Hint subBuilder = new global::Spark.Connect.Hint();
            if (relTypeCase_ == RelTypeOneofCase.Hint) {
              subBuilder.MergeFrom(Hint);
            }
            input.ReadMessage(subBuilder);
            Hint = subBuilder;
            break;
          }
          case 202: {
            global::Spark.Connect.Unpivot subBuilder = new global::Spark.Connect.Unpivot();
            if (relTypeCase_ == RelTypeOneofCase.Unpivot) {
              subBuilder.MergeFrom(Unpivot);
            }
            input.ReadMessage(subBuilder);
            Unpivot = subBuilder;
            break;
          }
          case 210: {
            global::Spark.Connect.ToSchema subBuilder = new global::Spark.Connect.ToSchema();
            if (relTypeCase_ == RelTypeOneofCase.ToSchema) {
              subBuilder.MergeFrom(ToSchema);
            }
            input.ReadMessage(subBuilder);
            ToSchema = subBuilder;
            break;
          }
          case 218: {
            global::Spark.Connect.RepartitionByExpression subBuilder = new global::Spark.Connect.RepartitionByExpression();
            if (relTypeCase_ == RelTypeOneofCase.RepartitionByExpression) {
              subBuilder.MergeFrom(RepartitionByExpression);
            }
            input.ReadMessage(subBuilder);
            RepartitionByExpression = subBuilder;
            break;
          }
          case 226: {
            global::Spark.Connect.MapPartitions subBuilder = new global::Spark.Connect.MapPartitions();
            if (relTypeCase_ == RelTypeOneofCase.MapPartitions) {
              subBuilder.MergeFrom(MapPartitions);
            }
            input.ReadMessage(subBuilder);
            MapPartitions = subBuilder;
            break;
          }
          case 234: {
            global::Spark.Connect.CollectMetrics subBuilder = new global::Spark.Connect.CollectMetrics();
            if (relTypeCase_ == RelTypeOneofCase.CollectMetrics) {
              subBuilder.MergeFrom(CollectMetrics);
            }
            input.ReadMessage(subBuilder);
            CollectMetrics = subBuilder;
            break;
          }
          case 242: {
            global::Spark.Connect.Parse subBuilder = new global::Spark.Connect.Parse();
            if (relTypeCase_ == RelTypeOneofCase.Parse) {
              subBuilder.MergeFrom(Parse);
            }
            input.ReadMessage(subBuilder);
            Parse = subBuilder;
            break;
          }
          case 250: {
            global::Spark.Connect.GroupMap subBuilder = new global::Spark.Connect.GroupMap();
            if (relTypeCase_ == RelTypeOneofCase.GroupMap) {
              subBuilder.MergeFrom(GroupMap);
            }
            input.ReadMessage(subBuilder);
            GroupMap = subBuilder;
            break;
          }
          case 258: {
            global::Spark.Connect.CoGroupMap subBuilder = new global::Spark.Connect.CoGroupMap();
            if (relTypeCase_ == RelTypeOneofCase.CoGroupMap) {
              subBuilder.MergeFrom(CoGroupMap);
            }
            input.ReadMessage(subBuilder);
            CoGroupMap = subBuilder;
            break;
          }
          case 722: {
            global::Spark.Connect.NAFill subBuilder = new global::Spark.Connect.NAFill();
            if (relTypeCase_ == RelTypeOneofCase.FillNa) {
              subBuilder.MergeFrom(FillNa);
            }
            input.ReadMessage(subBuilder);
            FillNa = subBuilder;
            break;
          }
          case 730: {
            global::Spark.Connect.NADrop subBuilder = new global::Spark.Connect.NADrop();
            if (relTypeCase_ == RelTypeOneofCase.DropNa) {
              subBuilder.MergeFrom(DropNa);
            }
            input.ReadMessage(subBuilder);
            DropNa = subBuilder;
            break;
          }
          case 738: {
            global::Spark.Connect.NAReplace subBuilder = new global::Spark.Connect.NAReplace();
            if (relTypeCase_ == RelTypeOneofCase.Replace) {
              subBuilder.MergeFrom(Replace);
            }
            input.ReadMessage(subBuilder);
            Replace = subBuilder;
            break;
          }
          case 802: {
            global::Spark.Connect.StatSummary subBuilder = new global::Spark.Connect.StatSummary();
            if (relTypeCase_ == RelTypeOneofCase.Summary) {
              subBuilder.MergeFrom(Summary);
            }
            input.ReadMessage(subBuilder);
            Summary = subBuilder;
            break;
          }
          case 810: {
            global::Spark.Connect.StatCrosstab subBuilder = new global::Spark.Connect.StatCrosstab();
            if (relTypeCase_ == RelTypeOneofCase.Crosstab) {
              subBuilder.MergeFrom(Crosstab);
            }
            input.ReadMessage(subBuilder);
            Crosstab = subBuilder;
            break;
          }
          case 818: {
            global::Spark.Connect.StatDescribe subBuilder = new global::Spark.Connect.StatDescribe();
            if (relTypeCase_ == RelTypeOneofCase.Describe) {
              subBuilder.MergeFrom(Describe);
            }
            input.ReadMessage(subBuilder);
            Describe = subBuilder;
            break;
          }
          case 826: {
            global::Spark.Connect.StatCov subBuilder = new global::Spark.Connect.StatCov();
            if (relTypeCase_ == RelTypeOneofCase.Cov) {
              subBuilder.MergeFrom(Cov);
            }
            input.ReadMessage(subBuilder);
            Cov = subBuilder;
            break;
          }
          case 834: {
            global::Spark.Connect.StatCorr subBuilder = new global::Spark.Connect.StatCorr();
            if (relTypeCase_ == RelTypeOneofCase.Corr) {
              subBuilder.MergeFrom(Corr);
            }
            input.ReadMessage(subBuilder);
            Corr = subBuilder;
            break;
          }
          case 842: {
            global::Spark.Connect.StatApproxQuantile subBuilder = new global::Spark.Connect.StatApproxQuantile();
            if (relTypeCase_ == RelTypeOneofCase.ApproxQuantile) {
              subBuilder.MergeFrom(ApproxQuantile);
            }
            input.ReadMessage(subBuilder);
            ApproxQuantile = subBuilder;
            break;
          }
          case 850: {
            global::Spark.Connect.StatFreqItems subBuilder = new global::Spark.Connect.StatFreqItems();
            if (relTypeCase_ == RelTypeOneofCase.FreqItems) {
              subBuilder.MergeFrom(FreqItems);
            }
            input.ReadMessage(subBuilder);
            FreqItems = subBuilder;
            break;
          }
          case 858: {
            global::Spark.Connect.StatSampleBy subBuilder = new global::Spark.Connect.StatSampleBy();
            if (relTypeCase_ == RelTypeOneofCase.SampleBy) {
              subBuilder.MergeFrom(SampleBy);
            }
            input.ReadMessage(subBuilder);
            SampleBy = subBuilder;
            break;
          }
          case 1602: {
            global::Spark.Connect.Catalog subBuilder = new global::Spark.Connect.Catalog();
            if (relTypeCase_ == RelTypeOneofCase.Catalog) {
              subBuilder.MergeFrom(Catalog);
            }
            input.ReadMessage(subBuilder);
            Catalog = subBuilder;
            break;
          }
          case 7986: {
            global::Google.Protobuf.WellKnownTypes.Any subBuilder = new global::Google.Protobuf.WellKnownTypes.Any();
            if (relTypeCase_ == RelTypeOneofCase.Extension) {
              subBuilder.MergeFrom(Extension);
            }
            input.ReadMessage(subBuilder);
            Extension = subBuilder;
            break;
          }
          case 7994: {
            global::Spark.Connect.Unknown subBuilder = new global::Spark.Connect.Unknown();
            if (relTypeCase_ == RelTypeOneofCase.Unknown) {
              subBuilder.MergeFrom(Unknown);
            }
            input.ReadMessage(subBuilder);
            Unknown = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (common_ == null) {
              Common = new global::Spark.Connect.RelationCommon();
            }
            input.ReadMessage(Common);
            break;
          }
          case 18: {
            global::Spark.Connect.Read subBuilder = new global::Spark.Connect.Read();
            if (relTypeCase_ == RelTypeOneofCase.Read) {
              subBuilder.MergeFrom(Read);
            }
            input.ReadMessage(subBuilder);
            Read = subBuilder;
            break;
          }
          case 26: {
            global::Spark.Connect.Project subBuilder = new global::Spark.Connect.Project();
            if (relTypeCase_ == RelTypeOneofCase.Project) {
              subBuilder.MergeFrom(Project);
            }
            input.ReadMessage(subBuilder);
            Project = subBuilder;
            break;
          }
          case 34: {
            global::Spark.Connect.Filter subBuilder = new global::Spark.Connect.Filter();
            if (relTypeCase_ == RelTypeOneofCase.Filter) {
              subBuilder.MergeFrom(Filter);
            }
            input.ReadMessage(subBuilder);
            Filter = subBuilder;
            break;
          }
          case 42: {
            global::Spark.Connect.Join subBuilder = new global::Spark.Connect.Join();
            if (relTypeCase_ == RelTypeOneofCase.Join) {
              subBuilder.MergeFrom(Join);
            }
            input.ReadMessage(subBuilder);
            Join = subBuilder;
            break;
          }
          case 50: {
            global::Spark.Connect.SetOperation subBuilder = new global::Spark.Connect.SetOperation();
            if (relTypeCase_ == RelTypeOneofCase.SetOp) {
              subBuilder.MergeFrom(SetOp);
            }
            input.ReadMessage(subBuilder);
            SetOp = subBuilder;
            break;
          }
          case 58: {
            global::Spark.Connect.Sort subBuilder = new global::Spark.Connect.Sort();
            if (relTypeCase_ == RelTypeOneofCase.Sort) {
              subBuilder.MergeFrom(Sort);
            }
            input.ReadMessage(subBuilder);
            Sort = subBuilder;
            break;
          }
          case 66: {
            global::Spark.Connect.Limit subBuilder = new global::Spark.Connect.Limit();
            if (relTypeCase_ == RelTypeOneofCase.Limit) {
              subBuilder.MergeFrom(Limit);
            }
            input.ReadMessage(subBuilder);
            Limit = subBuilder;
            break;
          }
          case 74: {
            global::Spark.Connect.Aggregate subBuilder = new global::Spark.Connect.Aggregate();
            if (relTypeCase_ == RelTypeOneofCase.Aggregate) {
              subBuilder.MergeFrom(Aggregate);
            }
            input.ReadMessage(subBuilder);
            Aggregate = subBuilder;
            break;
          }
          case 82: {
            global::Spark.Connect.SQL subBuilder = new global::Spark.Connect.SQL();
            if (relTypeCase_ == RelTypeOneofCase.Sql) {
              subBuilder.MergeFrom(Sql);
            }
            input.ReadMessage(subBuilder);
            Sql = subBuilder;
            break;
          }
          case 90: {
            global::Spark.Connect.LocalRelation subBuilder = new global::Spark.Connect.LocalRelation();
            if (relTypeCase_ == RelTypeOneofCase.LocalRelation) {
              subBuilder.MergeFrom(LocalRelation);
            }
            input.ReadMessage(subBuilder);
            LocalRelation = subBuilder;
            break;
          }
          case 98: {
            global::Spark.Connect.Sample subBuilder = new global::Spark.Connect.Sample();
            if (relTypeCase_ == RelTypeOneofCase.Sample) {
              subBuilder.MergeFrom(Sample);
            }
            input.ReadMessage(subBuilder);
            Sample = subBuilder;
            break;
          }
          case 106: {
            global::Spark.Connect.Offset subBuilder = new global::Spark.Connect.Offset();
            if (relTypeCase_ == RelTypeOneofCase.Offset) {
              subBuilder.MergeFrom(Offset);
            }
            input.ReadMessage(subBuilder);
            Offset = subBuilder;
            break;
          }
          case 114: {
            global::Spark.Connect.Deduplicate subBuilder = new global::Spark.Connect.Deduplicate();
            if (relTypeCase_ == RelTypeOneofCase.Deduplicate) {
              subBuilder.MergeFrom(Deduplicate);
            }
            input.ReadMessage(subBuilder);
            Deduplicate = subBuilder;
            break;
          }
          case 122: {
            global::Spark.Connect.Range subBuilder = new global::Spark.Connect.Range();
            if (relTypeCase_ == RelTypeOneofCase.Range) {
              subBuilder.MergeFrom(Range);
            }
            input.ReadMessage(subBuilder);
            Range = subBuilder;
            break;
          }
          case 130: {
            global::Spark.Connect.SubqueryAlias subBuilder = new global::Spark.Connect.SubqueryAlias();
            if (relTypeCase_ == RelTypeOneofCase.SubqueryAlias) {
              subBuilder.MergeFrom(SubqueryAlias);
            }
            input.ReadMessage(subBuilder);
            SubqueryAlias = subBuilder;
            break;
          }
          case 138: {
            global::Spark.Connect.Repartition subBuilder = new global::Spark.Connect.Repartition();
            if (relTypeCase_ == RelTypeOneofCase.Repartition) {
              subBuilder.MergeFrom(Repartition);
            }
            input.ReadMessage(subBuilder);
            Repartition = subBuilder;
            break;
          }
          case 146: {
            global::Spark.Connect.ToDF subBuilder = new global::Spark.Connect.ToDF();
            if (relTypeCase_ == RelTypeOneofCase.ToDf) {
              subBuilder.MergeFrom(ToDf);
            }
            input.ReadMessage(subBuilder);
            ToDf = subBuilder;
            break;
          }
          case 154: {
            global::Spark.Connect.WithColumnsRenamed subBuilder = new global::Spark.Connect.WithColumnsRenamed();
            if (relTypeCase_ == RelTypeOneofCase.WithColumnsRenamed) {
              subBuilder.MergeFrom(WithColumnsRenamed);
            }
            input.ReadMessage(subBuilder);
            WithColumnsRenamed = subBuilder;
            break;
          }
          case 162: {
            global::Spark.Connect.ShowString subBuilder = new global::Spark.Connect.ShowString();
            if (relTypeCase_ == RelTypeOneofCase.ShowString) {
              subBuilder.MergeFrom(ShowString);
            }
            input.ReadMessage(subBuilder);
            ShowString = subBuilder;
            break;
          }
          case 170: {
            global::Spark.Connect.Drop subBuilder = new global::Spark.Connect.Drop();
            if (relTypeCase_ == RelTypeOneofCase.Drop) {
              subBuilder.MergeFrom(Drop);
            }
            input.ReadMessage(subBuilder);
            Drop = subBuilder;
            break;
          }
          case 178: {
            global::Spark.Connect.Tail subBuilder = new global::Spark.Connect.Tail();
            if (relTypeCase_ == RelTypeOneofCase.Tail) {
              subBuilder.MergeFrom(Tail);
            }
            input.ReadMessage(subBuilder);
            Tail = subBuilder;
            break;
          }
          case 186: {
            global::Spark.Connect.WithColumns subBuilder = new global::Spark.Connect.WithColumns();
            if (relTypeCase_ == RelTypeOneofCase.WithColumns) {
              subBuilder.MergeFrom(WithColumns);
            }
            input.ReadMessage(subBuilder);
            WithColumns = subBuilder;
            break;
          }
          case 194: {
            global::Spark.Connect.Hint subBuilder = new global::Spark.Connect.Hint();
            if (relTypeCase_ == RelTypeOneofCase.Hint) {
              subBuilder.MergeFrom(Hint);
            }
            input.ReadMessage(subBuilder);
            Hint = subBuilder;
            break;
          }
          case 202: {
            global::Spark.Connect.Unpivot subBuilder = new global::Spark.Connect.Unpivot();
            if (relTypeCase_ == RelTypeOneofCase.Unpivot) {
              subBuilder.MergeFrom(Unpivot);
            }
            input.ReadMessage(subBuilder);
            Unpivot = subBuilder;
            break;
          }
          case 210: {
            global::Spark.Connect.ToSchema subBuilder = new global::Spark.Connect.ToSchema();
            if (relTypeCase_ == RelTypeOneofCase.ToSchema) {
              subBuilder.MergeFrom(ToSchema);
            }
            input.ReadMessage(subBuilder);
            ToSchema = subBuilder;
            break;
          }
          case 218: {
            global::Spark.Connect.RepartitionByExpression subBuilder = new global::Spark.Connect.RepartitionByExpression();
            if (relTypeCase_ == RelTypeOneofCase.RepartitionByExpression) {
              subBuilder.MergeFrom(RepartitionByExpression);
            }
            input.ReadMessage(subBuilder);
            RepartitionByExpression = subBuilder;
            break;
          }
          case 226: {
            global::Spark.Connect.MapPartitions subBuilder = new global::Spark.Connect.MapPartitions();
            if (relTypeCase_ == RelTypeOneofCase.MapPartitions) {
              subBuilder.MergeFrom(MapPartitions);
            }
            input.ReadMessage(subBuilder);
            MapPartitions = subBuilder;
            break;
          }
          case 234: {
            global::Spark.Connect.CollectMetrics subBuilder = new global::Spark.Connect.CollectMetrics();
            if (relTypeCase_ == RelTypeOneofCase.CollectMetrics) {
              subBuilder.MergeFrom(CollectMetrics);
            }
            input.ReadMessage(subBuilder);
            CollectMetrics = subBuilder;
            break;
          }
          case 242: {
            global::Spark.Connect.Parse subBuilder = new global::Spark.Connect.Parse();
            if (relTypeCase_ == RelTypeOneofCase.Parse) {
              subBuilder.MergeFrom(Parse);
            }
            input.ReadMessage(subBuilder);
            Parse = subBuilder;
            break;
          }
          case 250: {
            global::Spark.Connect.GroupMap subBuilder = new global::Spark.Connect.GroupMap();
            if (relTypeCase_ == RelTypeOneofCase.GroupMap) {
              subBuilder.MergeFrom(GroupMap);
            }
            input.ReadMessage(subBuilder);
            GroupMap = subBuilder;
            break;
          }
          case 258: {
            global::Spark.Connect.CoGroupMap subBuilder = new global::Spark.Connect.CoGroupMap();
            if (relTypeCase_ == RelTypeOneofCase.CoGroupMap) {
              subBuilder.MergeFrom(CoGroupMap);
            }
            input.ReadMessage(subBuilder);
            CoGroupMap = subBuilder;
            break;
          }
          case 722: {
            global::Spark.Connect.NAFill subBuilder = new global::Spark.Connect.NAFill();
            if (relTypeCase_ == RelTypeOneofCase.FillNa) {
              subBuilder.MergeFrom(FillNa);
            }
            input.ReadMessage(subBuilder);
            FillNa = subBuilder;
            break;
          }
          case 730: {
            global::Spark.Connect.NADrop subBuilder = new global::Spark.Connect.NADrop();
            if (relTypeCase_ == RelTypeOneofCase.DropNa) {
              subBuilder.MergeFrom(DropNa);
            }
            input.ReadMessage(subBuilder);
            DropNa = subBuilder;
            break;
          }
          case 738: {
            global::Spark.Connect.NAReplace subBuilder = new global::Spark.Connect.NAReplace();
            if (relTypeCase_ == RelTypeOneofCase.Replace) {
              subBuilder.MergeFrom(Replace);
            }
            input.ReadMessage(subBuilder);
            Replace = subBuilder;
            break;
          }
          case 802: {
            global::Spark.Connect.StatSummary subBuilder = new global::Spark.Connect.StatSummary();
            if (relTypeCase_ == RelTypeOneofCase.Summary) {
              subBuilder.MergeFrom(Summary);
            }
            input.ReadMessage(subBuilder);
            Summary = subBuilder;
            break;
          }
          case 810: {
            global::Spark.Connect.StatCrosstab subBuilder = new global::Spark.Connect.StatCrosstab();
            if (relTypeCase_ == RelTypeOneofCase.Crosstab) {
              subBuilder.MergeFrom(Crosstab);
            }
            input.ReadMessage(subBuilder);
            Crosstab = subBuilder;
            break;
          }
          case 818: {
            global::Spark.Connect.StatDescribe subBuilder = new global::Spark.Connect.StatDescribe();
            if (relTypeCase_ == RelTypeOneofCase.Describe) {
              subBuilder.MergeFrom(Describe);
            }
            input.ReadMessage(subBuilder);
            Describe = subBuilder;
            break;
          }
          case 826: {
            global::Spark.Connect.StatCov subBuilder = new global::Spark.Connect.StatCov();
            if (relTypeCase_ == RelTypeOneofCase.Cov) {
              subBuilder.MergeFrom(Cov);
            }
            input.ReadMessage(subBuilder);
            Cov = subBuilder;
            break;
          }
          case 834: {
            global::Spark.Connect.StatCorr subBuilder = new global::Spark.Connect.StatCorr();
            if (relTypeCase_ == RelTypeOneofCase.Corr) {
              subBuilder.MergeFrom(Corr);
            }
            input.ReadMessage(subBuilder);
            Corr = subBuilder;
            break;
          }
          case 842: {
            global::Spark.Connect.StatApproxQuantile subBuilder = new global::Spark.Connect.StatApproxQuantile();
            if (relTypeCase_ == RelTypeOneofCase.ApproxQuantile) {
              subBuilder.MergeFrom(ApproxQuantile);
            }
            input.ReadMessage(subBuilder);
            ApproxQuantile = subBuilder;
            break;
          }
          case 850: {
            global::Spark.Connect.StatFreqItems subBuilder = new global::Spark.Connect.StatFreqItems();
            if (relTypeCase_ == RelTypeOneofCase.FreqItems) {
              subBuilder.MergeFrom(FreqItems);
            }
            input.ReadMessage(subBuilder);
            FreqItems = subBuilder;
            break;
          }
          case 858: {
            global::Spark.Connect.StatSampleBy subBuilder = new global::Spark.Connect.StatSampleBy();
            if (relTypeCase_ == RelTypeOneofCase.SampleBy) {
              subBuilder.MergeFrom(SampleBy);
            }
            input.ReadMessage(subBuilder);
            SampleBy = subBuilder;
            break;
          }
          case 1602: {
            global::Spark.Connect.Catalog subBuilder = new global::Spark.Connect.Catalog();
            if (relTypeCase_ == RelTypeOneofCase.Catalog) {
              subBuilder.MergeFrom(Catalog);
            }
            input.ReadMessage(subBuilder);
            Catalog = subBuilder;
            break;
          }
          case 7986: {
            global::Google.Protobuf.WellKnownTypes.Any subBuilder = new global::Google.Protobuf.WellKnownTypes.Any();
            if (relTypeCase_ == RelTypeOneofCase.Extension) {
              subBuilder.MergeFrom(Extension);
            }
            input.ReadMessage(subBuilder);
            Extension = subBuilder;
            break;
          }
          case 7994: {
            global::Spark.Connect.Unknown subBuilder = new global::Spark.Connect.Unknown();
            if (relTypeCase_ == RelTypeOneofCase.Unknown) {
              subBuilder.MergeFrom(Unknown);
            }
            input.ReadMessage(subBuilder);
            Unknown = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Used for testing purposes only.
  /// </summary>
  public sealed partial class Unknown : pb::IMessage<Unknown>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Unknown> _parser = new pb::MessageParser<Unknown>(() => new Unknown());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Unknown> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Unknown() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Unknown(Unknown other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Unknown Clone() {
      return new Unknown(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Unknown);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Unknown other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Unknown other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Common metadata of all relations.
  /// </summary>
  public sealed partial class RelationCommon : pb::IMessage<RelationCommon>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RelationCommon> _parser = new pb::MessageParser<RelationCommon>(() => new RelationCommon());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RelationCommon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RelationCommon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RelationCommon(RelationCommon other) : this() {
      _hasBits0 = other._hasBits0;
      sourceInfo_ = other.sourceInfo_;
      planId_ = other.planId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RelationCommon Clone() {
      return new RelationCommon(this);
    }

    /// <summary>Field number for the "source_info" field.</summary>
    public const int SourceInfoFieldNumber = 1;
    private string sourceInfo_ = "";
    /// <summary>
    /// (Required) Shared relation metadata.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SourceInfo {
      get { return sourceInfo_; }
      set {
        sourceInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "plan_id" field.</summary>
    public const int PlanIdFieldNumber = 2;
    private readonly static long PlanIdDefaultValue = 0L;

    private long planId_;
    /// <summary>
    /// (Optional) A per-client globally unique id for a given connect plan.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PlanId {
      get { if ((_hasBits0 & 1) != 0) { return planId_; } else { return PlanIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        planId_ = value;
      }
    }
    /// <summary>Gets whether the "plan_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPlanId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "plan_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPlanId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RelationCommon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RelationCommon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourceInfo != other.SourceInfo) return false;
      if (PlanId != other.PlanId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (SourceInfo.Length != 0) hash ^= SourceInfo.GetHashCode();
      if (HasPlanId) hash ^= PlanId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SourceInfo.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SourceInfo);
      }
      if (HasPlanId) {
        output.WriteRawTag(16);
        output.WriteInt64(PlanId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SourceInfo.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SourceInfo);
      }
      if (HasPlanId) {
        output.WriteRawTag(16);
        output.WriteInt64(PlanId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (SourceInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceInfo);
      }
      if (HasPlanId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlanId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RelationCommon other) {
      if (other == null) {
        return;
      }
      if (other.SourceInfo.Length != 0) {
        SourceInfo = other.SourceInfo;
      }
      if (other.HasPlanId) {
        PlanId = other.PlanId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SourceInfo = input.ReadString();
            break;
          }
          case 16: {
            PlanId = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            SourceInfo = input.ReadString();
            break;
          }
          case 16: {
            PlanId = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Relation that uses a SQL query to generate the output.
  /// </summary>
  public sealed partial class SQL : pb::IMessage<SQL>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SQL> _parser = new pb::MessageParser<SQL>(() => new SQL());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SQL> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SQL() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SQL(SQL other) : this() {
      query_ = other.query_;
      args_ = other.args_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SQL Clone() {
      return new SQL(this);
    }

    /// <summary>Field number for the "query" field.</summary>
    public const int QueryFieldNumber = 1;
    private string query_ = "";
    /// <summary>
    /// (Required) The SQL query.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Query {
      get { return query_; }
      set {
        query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "args" field.</summary>
    public const int ArgsFieldNumber = 2;
    private static readonly pbc::MapField<string, global::Spark.Connect.Expression.Types.Literal>.Codec _map_args_codec
        = new pbc::MapField<string, global::Spark.Connect.Expression.Types.Literal>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::Spark.Connect.Expression.Types.Literal.Parser), 18);
    private readonly pbc::MapField<string, global::Spark.Connect.Expression.Types.Literal> args_ = new pbc::MapField<string, global::Spark.Connect.Expression.Types.Literal>();
    /// <summary>
    /// (Optional) A map of parameter names to literal expressions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<string, global::Spark.Connect.Expression.Types.Literal> Args {
      get { return args_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SQL);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SQL other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Query != other.Query) return false;
      if (!Args.Equals(other.Args)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Query.Length != 0) hash ^= Query.GetHashCode();
      hash ^= Args.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Query.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Query);
      }
      args_.WriteTo(output, _map_args_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Query.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Query);
      }
      args_.WriteTo(ref output, _map_args_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Query.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
      }
      size += args_.CalculateSize(_map_args_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SQL other) {
      if (other == null) {
        return;
      }
      if (other.Query.Length != 0) {
        Query = other.Query;
      }
      args_.MergeFrom(other.args_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Query = input.ReadString();
            break;
          }
          case 18: {
            args_.AddEntriesFrom(input, _map_args_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Query = input.ReadString();
            break;
          }
          case 18: {
            args_.AddEntriesFrom(ref input, _map_args_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Relation that reads from a file / table or other data source. Does not have additional
  /// inputs.
  /// </summary>
  public sealed partial class Read : pb::IMessage<Read>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Read> _parser = new pb::MessageParser<Read>(() => new Read());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Read> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Read() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Read(Read other) : this() {
      switch (other.ReadTypeCase) {
        case ReadTypeOneofCase.NamedTable:
          NamedTable = other.NamedTable.Clone();
          break;
        case ReadTypeOneofCase.DataSource:
          DataSource = other.DataSource.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Read Clone() {
      return new Read(this);
    }

    /// <summary>Field number for the "named_table" field.</summary>
    public const int NamedTableFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Read.Types.NamedTable NamedTable {
      get { return readTypeCase_ == ReadTypeOneofCase.NamedTable ? (global::Spark.Connect.Read.Types.NamedTable) readType_ : null; }
      set {
        readType_ = value;
        readTypeCase_ = value == null ? ReadTypeOneofCase.None : ReadTypeOneofCase.NamedTable;
      }
    }

    /// <summary>Field number for the "data_source" field.</summary>
    public const int DataSourceFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Read.Types.DataSource DataSource {
      get { return readTypeCase_ == ReadTypeOneofCase.DataSource ? (global::Spark.Connect.Read.Types.DataSource) readType_ : null; }
      set {
        readType_ = value;
        readTypeCase_ = value == null ? ReadTypeOneofCase.None : ReadTypeOneofCase.DataSource;
      }
    }

    private object readType_;
    /// <summary>Enum of possible cases for the "read_type" oneof.</summary>
    public enum ReadTypeOneofCase {
      None = 0,
      NamedTable = 1,
      DataSource = 2,
    }
    private ReadTypeOneofCase readTypeCase_ = ReadTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ReadTypeOneofCase ReadTypeCase {
      get { return readTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReadType() {
      readTypeCase_ = ReadTypeOneofCase.None;
      readType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Read);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Read other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(NamedTable, other.NamedTable)) return false;
      if (!object.Equals(DataSource, other.DataSource)) return false;
      if (ReadTypeCase != other.ReadTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (readTypeCase_ == ReadTypeOneofCase.NamedTable) hash ^= NamedTable.GetHashCode();
      if (readTypeCase_ == ReadTypeOneofCase.DataSource) hash ^= DataSource.GetHashCode();
      hash ^= (int) readTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (readTypeCase_ == ReadTypeOneofCase.NamedTable) {
        output.WriteRawTag(10);
        output.WriteMessage(NamedTable);
      }
      if (readTypeCase_ == ReadTypeOneofCase.DataSource) {
        output.WriteRawTag(18);
        output.WriteMessage(DataSource);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (readTypeCase_ == ReadTypeOneofCase.NamedTable) {
        output.WriteRawTag(10);
        output.WriteMessage(NamedTable);
      }
      if (readTypeCase_ == ReadTypeOneofCase.DataSource) {
        output.WriteRawTag(18);
        output.WriteMessage(DataSource);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (readTypeCase_ == ReadTypeOneofCase.NamedTable) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NamedTable);
      }
      if (readTypeCase_ == ReadTypeOneofCase.DataSource) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataSource);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Read other) {
      if (other == null) {
        return;
      }
      switch (other.ReadTypeCase) {
        case ReadTypeOneofCase.NamedTable:
          if (NamedTable == null) {
            NamedTable = new global::Spark.Connect.Read.Types.NamedTable();
          }
          NamedTable.MergeFrom(other.NamedTable);
          break;
        case ReadTypeOneofCase.DataSource:
          if (DataSource == null) {
            DataSource = new global::Spark.Connect.Read.Types.DataSource();
          }
          DataSource.MergeFrom(other.DataSource);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Spark.Connect.Read.Types.NamedTable subBuilder = new global::Spark.Connect.Read.Types.NamedTable();
            if (readTypeCase_ == ReadTypeOneofCase.NamedTable) {
              subBuilder.MergeFrom(NamedTable);
            }
            input.ReadMessage(subBuilder);
            NamedTable = subBuilder;
            break;
          }
          case 18: {
            global::Spark.Connect.Read.Types.DataSource subBuilder = new global::Spark.Connect.Read.Types.DataSource();
            if (readTypeCase_ == ReadTypeOneofCase.DataSource) {
              subBuilder.MergeFrom(DataSource);
            }
            input.ReadMessage(subBuilder);
            DataSource = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Spark.Connect.Read.Types.NamedTable subBuilder = new global::Spark.Connect.Read.Types.NamedTable();
            if (readTypeCase_ == ReadTypeOneofCase.NamedTable) {
              subBuilder.MergeFrom(NamedTable);
            }
            input.ReadMessage(subBuilder);
            NamedTable = subBuilder;
            break;
          }
          case 18: {
            global::Spark.Connect.Read.Types.DataSource subBuilder = new global::Spark.Connect.Read.Types.DataSource();
            if (readTypeCase_ == ReadTypeOneofCase.DataSource) {
              subBuilder.MergeFrom(DataSource);
            }
            input.ReadMessage(subBuilder);
            DataSource = subBuilder;
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Read message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class NamedTable : pb::IMessage<NamedTable>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<NamedTable> _parser = new pb::MessageParser<NamedTable>(() => new NamedTable());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<NamedTable> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spark.Connect.Read.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public NamedTable() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public NamedTable(NamedTable other) : this() {
          unparsedIdentifier_ = other.unparsedIdentifier_;
          options_ = other.options_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public NamedTable Clone() {
          return new NamedTable(this);
        }

        /// <summary>Field number for the "unparsed_identifier" field.</summary>
        public const int UnparsedIdentifierFieldNumber = 1;
        private string unparsedIdentifier_ = "";
        /// <summary>
        /// (Required) Unparsed identifier for the table.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string UnparsedIdentifier {
          get { return unparsedIdentifier_; }
          set {
            unparsedIdentifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "options" field.</summary>
        public const int OptionsFieldNumber = 2;
        private static readonly pbc::MapField<string, string>.Codec _map_options_codec
            = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 18);
        private readonly pbc::MapField<string, string> options_ = new pbc::MapField<string, string>();
        /// <summary>
        /// Options for the named table. The map key is case insensitive.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::MapField<string, string> Options {
          get { return options_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as NamedTable);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(NamedTable other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (UnparsedIdentifier != other.UnparsedIdentifier) return false;
          if (!Options.Equals(other.Options)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (UnparsedIdentifier.Length != 0) hash ^= UnparsedIdentifier.GetHashCode();
          hash ^= Options.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (UnparsedIdentifier.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(UnparsedIdentifier);
          }
          options_.WriteTo(output, _map_options_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (UnparsedIdentifier.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(UnparsedIdentifier);
          }
          options_.WriteTo(ref output, _map_options_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (UnparsedIdentifier.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(UnparsedIdentifier);
          }
          size += options_.CalculateSize(_map_options_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(NamedTable other) {
          if (other == null) {
            return;
          }
          if (other.UnparsedIdentifier.Length != 0) {
            UnparsedIdentifier = other.UnparsedIdentifier;
          }
          options_.MergeFrom(other.options_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                UnparsedIdentifier = input.ReadString();
                break;
              }
              case 18: {
                options_.AddEntriesFrom(input, _map_options_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                UnparsedIdentifier = input.ReadString();
                break;
              }
              case 18: {
                options_.AddEntriesFrom(ref input, _map_options_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class DataSource : pb::IMessage<DataSource>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<DataSource> _parser = new pb::MessageParser<DataSource>(() => new DataSource());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<DataSource> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spark.Connect.Read.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public DataSource() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public DataSource(DataSource other) : this() {
          format_ = other.format_;
          schema_ = other.schema_;
          options_ = other.options_.Clone();
          paths_ = other.paths_.Clone();
          predicates_ = other.predicates_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public DataSource Clone() {
          return new DataSource(this);
        }

        /// <summary>Field number for the "format" field.</summary>
        public const int FormatFieldNumber = 1;
        private readonly static string FormatDefaultValue = "";

        private string format_;
        /// <summary>
        /// (Optional) Supported formats include: parquet, orc, text, json, parquet, csv, avro.
        ///
        /// If not set, the value from SQL conf 'spark.sql.sources.default' will be used.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Format {
          get { return format_ ?? FormatDefaultValue; }
          set {
            format_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "format" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasFormat {
          get { return format_ != null; }
        }
        /// <summary>Clears the value of the "format" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearFormat() {
          format_ = null;
        }

        /// <summary>Field number for the "schema" field.</summary>
        public const int SchemaFieldNumber = 2;
        private readonly static string SchemaDefaultValue = "";

        private string schema_;
        /// <summary>
        /// (Optional) If not set, Spark will infer the schema.
        ///
        /// This schema string should be either DDL-formatted or JSON-formatted.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Schema {
          get { return schema_ ?? SchemaDefaultValue; }
          set {
            schema_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "schema" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasSchema {
          get { return schema_ != null; }
        }
        /// <summary>Clears the value of the "schema" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearSchema() {
          schema_ = null;
        }

        /// <summary>Field number for the "options" field.</summary>
        public const int OptionsFieldNumber = 3;
        private static readonly pbc::MapField<string, string>.Codec _map_options_codec
            = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 26);
        private readonly pbc::MapField<string, string> options_ = new pbc::MapField<string, string>();
        /// <summary>
        /// Options for the data source. The context of this map varies based on the
        /// data source format. This options could be empty for valid data source format.
        /// The map key is case insensitive.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::MapField<string, string> Options {
          get { return options_; }
        }

        /// <summary>Field number for the "paths" field.</summary>
        public const int PathsFieldNumber = 4;
        private static readonly pb::FieldCodec<string> _repeated_paths_codec
            = pb::FieldCodec.ForString(34);
        private readonly pbc::RepeatedField<string> paths_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// (Optional) A list of path for file-system backed data sources.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<string> Paths {
          get { return paths_; }
        }

        /// <summary>Field number for the "predicates" field.</summary>
        public const int PredicatesFieldNumber = 5;
        private static readonly pb::FieldCodec<string> _repeated_predicates_codec
            = pb::FieldCodec.ForString(42);
        private readonly pbc::RepeatedField<string> predicates_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// (Optional) Condition in the where clause for each partition.
        ///
        /// This is only supported by the JDBC data source.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<string> Predicates {
          get { return predicates_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as DataSource);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(DataSource other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Format != other.Format) return false;
          if (Schema != other.Schema) return false;
          if (!Options.Equals(other.Options)) return false;
          if(!paths_.Equals(other.paths_)) return false;
          if(!predicates_.Equals(other.predicates_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (HasFormat) hash ^= Format.GetHashCode();
          if (HasSchema) hash ^= Schema.GetHashCode();
          hash ^= Options.GetHashCode();
          hash ^= paths_.GetHashCode();
          hash ^= predicates_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasFormat) {
            output.WriteRawTag(10);
            output.WriteString(Format);
          }
          if (HasSchema) {
            output.WriteRawTag(18);
            output.WriteString(Schema);
          }
          options_.WriteTo(output, _map_options_codec);
          paths_.WriteTo(output, _repeated_paths_codec);
          predicates_.WriteTo(output, _repeated_predicates_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasFormat) {
            output.WriteRawTag(10);
            output.WriteString(Format);
          }
          if (HasSchema) {
            output.WriteRawTag(18);
            output.WriteString(Schema);
          }
          options_.WriteTo(ref output, _map_options_codec);
          paths_.WriteTo(ref output, _repeated_paths_codec);
          predicates_.WriteTo(ref output, _repeated_predicates_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (HasFormat) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Format);
          }
          if (HasSchema) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Schema);
          }
          size += options_.CalculateSize(_map_options_codec);
          size += paths_.CalculateSize(_repeated_paths_codec);
          size += predicates_.CalculateSize(_repeated_predicates_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(DataSource other) {
          if (other == null) {
            return;
          }
          if (other.HasFormat) {
            Format = other.Format;
          }
          if (other.HasSchema) {
            Schema = other.Schema;
          }
          options_.MergeFrom(other.options_);
          paths_.Add(other.paths_);
          predicates_.Add(other.predicates_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Format = input.ReadString();
                break;
              }
              case 18: {
                Schema = input.ReadString();
                break;
              }
              case 26: {
                options_.AddEntriesFrom(input, _map_options_codec);
                break;
              }
              case 34: {
                paths_.AddEntriesFrom(input, _repeated_paths_codec);
                break;
              }
              case 42: {
                predicates_.AddEntriesFrom(input, _repeated_predicates_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Format = input.ReadString();
                break;
              }
              case 18: {
                Schema = input.ReadString();
                break;
              }
              case 26: {
                options_.AddEntriesFrom(ref input, _map_options_codec);
                break;
              }
              case 34: {
                paths_.AddEntriesFrom(ref input, _repeated_paths_codec);
                break;
              }
              case 42: {
                predicates_.AddEntriesFrom(ref input, _repeated_predicates_codec);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// Projection of a bag of expressions for a given input relation.
  ///
  /// The input relation must be specified.
  /// The projected expression can be an arbitrary expression.
  /// </summary>
  public sealed partial class Project : pb::IMessage<Project>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Project> _parser = new pb::MessageParser<Project>(() => new Project());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Project> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Project() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Project(Project other) : this() {
      input_ = other.input_ != null ? other.input_.Clone() : null;
      expressions_ = other.expressions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Project Clone() {
      return new Project(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Optional) Input relation is optional for Project.
    ///
    /// For example, `SELECT ABS(-1)` is valid plan without an input plan.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "expressions" field.</summary>
    public const int ExpressionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Spark.Connect.Expression> _repeated_expressions_codec
        = pb::FieldCodec.ForMessage(26, global::Spark.Connect.Expression.Parser);
    private readonly pbc::RepeatedField<global::Spark.Connect.Expression> expressions_ = new pbc::RepeatedField<global::Spark.Connect.Expression>();
    /// <summary>
    /// (Required) A Project requires at least one expression.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Spark.Connect.Expression> Expressions {
      get { return expressions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Project);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Project other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if(!expressions_.Equals(other.expressions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      hash ^= expressions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      expressions_.WriteTo(output, _repeated_expressions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      expressions_.WriteTo(ref output, _repeated_expressions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      size += expressions_.CalculateSize(_repeated_expressions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Project other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      expressions_.Add(other.expressions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 26: {
            expressions_.AddEntriesFrom(input, _repeated_expressions_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 26: {
            expressions_.AddEntriesFrom(ref input, _repeated_expressions_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Relation that applies a boolean expression `condition` on each row of `input` to produce
  /// the output result.
  /// </summary>
  public sealed partial class Filter : pb::IMessage<Filter>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Filter> _parser = new pb::MessageParser<Filter>(() => new Filter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Filter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Filter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Filter(Filter other) : this() {
      input_ = other.input_ != null ? other.input_.Clone() : null;
      condition_ = other.condition_ != null ? other.condition_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Filter Clone() {
      return new Filter(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) Input relation for a Filter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "condition" field.</summary>
    public const int ConditionFieldNumber = 2;
    private global::Spark.Connect.Expression condition_;
    /// <summary>
    /// (Required) A Filter must have a condition expression.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Expression Condition {
      get { return condition_; }
      set {
        condition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Filter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Filter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if (!object.Equals(Condition, other.Condition)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      if (condition_ != null) hash ^= Condition.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (condition_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Condition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (condition_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Condition);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      if (condition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Condition);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Filter other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      if (other.condition_ != null) {
        if (condition_ == null) {
          Condition = new global::Spark.Connect.Expression();
        }
        Condition.MergeFrom(other.Condition);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            if (condition_ == null) {
              Condition = new global::Spark.Connect.Expression();
            }
            input.ReadMessage(Condition);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            if (condition_ == null) {
              Condition = new global::Spark.Connect.Expression();
            }
            input.ReadMessage(Condition);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Relation of type [[Join]].
  ///
  /// `left` and `right` must be present.
  /// </summary>
  public sealed partial class Join : pb::IMessage<Join>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Join> _parser = new pb::MessageParser<Join>(() => new Join());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Join> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Join() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Join(Join other) : this() {
      left_ = other.left_ != null ? other.left_.Clone() : null;
      right_ = other.right_ != null ? other.right_.Clone() : null;
      joinCondition_ = other.joinCondition_ != null ? other.joinCondition_.Clone() : null;
      joinType_ = other.joinType_;
      usingColumns_ = other.usingColumns_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Join Clone() {
      return new Join(this);
    }

    /// <summary>Field number for the "left" field.</summary>
    public const int LeftFieldNumber = 1;
    private global::Spark.Connect.Relation left_;
    /// <summary>
    /// (Required) Left input relation for a Join.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Left {
      get { return left_; }
      set {
        left_ = value;
      }
    }

    /// <summary>Field number for the "right" field.</summary>
    public const int RightFieldNumber = 2;
    private global::Spark.Connect.Relation right_;
    /// <summary>
    /// (Required) Right input relation for a Join.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Right {
      get { return right_; }
      set {
        right_ = value;
      }
    }

    /// <summary>Field number for the "join_condition" field.</summary>
    public const int JoinConditionFieldNumber = 3;
    private global::Spark.Connect.Expression joinCondition_;
    /// <summary>
    /// (Optional) The join condition. Could be unset when `using_columns` is utilized.
    ///
    /// This field does not co-exist with using_columns.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Expression JoinCondition {
      get { return joinCondition_; }
      set {
        joinCondition_ = value;
      }
    }

    /// <summary>Field number for the "join_type" field.</summary>
    public const int JoinTypeFieldNumber = 4;
    private global::Spark.Connect.Join.Types.JoinType joinType_ = global::Spark.Connect.Join.Types.JoinType.Unspecified;
    /// <summary>
    /// (Required) The join type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Join.Types.JoinType JoinType {
      get { return joinType_; }
      set {
        joinType_ = value;
      }
    }

    /// <summary>Field number for the "using_columns" field.</summary>
    public const int UsingColumnsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_usingColumns_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> usingColumns_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Optional. using_columns provides a list of columns that should present on both sides of
    /// the join inputs that this Join will join on. For example A JOIN B USING col_name is
    /// equivalent to A JOIN B on A.col_name = B.col_name.
    ///
    /// This field does not co-exist with join_condition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> UsingColumns {
      get { return usingColumns_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Join);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Join other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Left, other.Left)) return false;
      if (!object.Equals(Right, other.Right)) return false;
      if (!object.Equals(JoinCondition, other.JoinCondition)) return false;
      if (JoinType != other.JoinType) return false;
      if(!usingColumns_.Equals(other.usingColumns_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (left_ != null) hash ^= Left.GetHashCode();
      if (right_ != null) hash ^= Right.GetHashCode();
      if (joinCondition_ != null) hash ^= JoinCondition.GetHashCode();
      if (JoinType != global::Spark.Connect.Join.Types.JoinType.Unspecified) hash ^= JoinType.GetHashCode();
      hash ^= usingColumns_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (left_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Left);
      }
      if (right_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Right);
      }
      if (joinCondition_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(JoinCondition);
      }
      if (JoinType != global::Spark.Connect.Join.Types.JoinType.Unspecified) {
        output.WriteRawTag(32);
        output.WriteEnum((int) JoinType);
      }
      usingColumns_.WriteTo(output, _repeated_usingColumns_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (left_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Left);
      }
      if (right_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Right);
      }
      if (joinCondition_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(JoinCondition);
      }
      if (JoinType != global::Spark.Connect.Join.Types.JoinType.Unspecified) {
        output.WriteRawTag(32);
        output.WriteEnum((int) JoinType);
      }
      usingColumns_.WriteTo(ref output, _repeated_usingColumns_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (left_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Left);
      }
      if (right_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Right);
      }
      if (joinCondition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(JoinCondition);
      }
      if (JoinType != global::Spark.Connect.Join.Types.JoinType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) JoinType);
      }
      size += usingColumns_.CalculateSize(_repeated_usingColumns_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Join other) {
      if (other == null) {
        return;
      }
      if (other.left_ != null) {
        if (left_ == null) {
          Left = new global::Spark.Connect.Relation();
        }
        Left.MergeFrom(other.Left);
      }
      if (other.right_ != null) {
        if (right_ == null) {
          Right = new global::Spark.Connect.Relation();
        }
        Right.MergeFrom(other.Right);
      }
      if (other.joinCondition_ != null) {
        if (joinCondition_ == null) {
          JoinCondition = new global::Spark.Connect.Expression();
        }
        JoinCondition.MergeFrom(other.JoinCondition);
      }
      if (other.JoinType != global::Spark.Connect.Join.Types.JoinType.Unspecified) {
        JoinType = other.JoinType;
      }
      usingColumns_.Add(other.usingColumns_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (left_ == null) {
              Left = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Left);
            break;
          }
          case 18: {
            if (right_ == null) {
              Right = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Right);
            break;
          }
          case 26: {
            if (joinCondition_ == null) {
              JoinCondition = new global::Spark.Connect.Expression();
            }
            input.ReadMessage(JoinCondition);
            break;
          }
          case 32: {
            JoinType = (global::Spark.Connect.Join.Types.JoinType) input.ReadEnum();
            break;
          }
          case 42: {
            usingColumns_.AddEntriesFrom(input, _repeated_usingColumns_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (left_ == null) {
              Left = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Left);
            break;
          }
          case 18: {
            if (right_ == null) {
              Right = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Right);
            break;
          }
          case 26: {
            if (joinCondition_ == null) {
              JoinCondition = new global::Spark.Connect.Expression();
            }
            input.ReadMessage(JoinCondition);
            break;
          }
          case 32: {
            JoinType = (global::Spark.Connect.Join.Types.JoinType) input.ReadEnum();
            break;
          }
          case 42: {
            usingColumns_.AddEntriesFrom(ref input, _repeated_usingColumns_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Join message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum JoinType {
        [pbr::OriginalName("JOIN_TYPE_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("JOIN_TYPE_INNER")] Inner = 1,
        [pbr::OriginalName("JOIN_TYPE_FULL_OUTER")] FullOuter = 2,
        [pbr::OriginalName("JOIN_TYPE_LEFT_OUTER")] LeftOuter = 3,
        [pbr::OriginalName("JOIN_TYPE_RIGHT_OUTER")] RightOuter = 4,
        [pbr::OriginalName("JOIN_TYPE_LEFT_ANTI")] LeftAnti = 5,
        [pbr::OriginalName("JOIN_TYPE_LEFT_SEMI")] LeftSemi = 6,
        [pbr::OriginalName("JOIN_TYPE_CROSS")] Cross = 7,
      }

    }
    #endregion

  }

  /// <summary>
  /// Relation of type [[SetOperation]]
  /// </summary>
  public sealed partial class SetOperation : pb::IMessage<SetOperation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SetOperation> _parser = new pb::MessageParser<SetOperation>(() => new SetOperation());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SetOperation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SetOperation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SetOperation(SetOperation other) : this() {
      _hasBits0 = other._hasBits0;
      leftInput_ = other.leftInput_ != null ? other.leftInput_.Clone() : null;
      rightInput_ = other.rightInput_ != null ? other.rightInput_.Clone() : null;
      setOpType_ = other.setOpType_;
      isAll_ = other.isAll_;
      byName_ = other.byName_;
      allowMissingColumns_ = other.allowMissingColumns_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SetOperation Clone() {
      return new SetOperation(this);
    }

    /// <summary>Field number for the "left_input" field.</summary>
    public const int LeftInputFieldNumber = 1;
    private global::Spark.Connect.Relation leftInput_;
    /// <summary>
    /// (Required) Left input relation for a Set operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation LeftInput {
      get { return leftInput_; }
      set {
        leftInput_ = value;
      }
    }

    /// <summary>Field number for the "right_input" field.</summary>
    public const int RightInputFieldNumber = 2;
    private global::Spark.Connect.Relation rightInput_;
    /// <summary>
    /// (Required) Right input relation for a Set operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation RightInput {
      get { return rightInput_; }
      set {
        rightInput_ = value;
      }
    }

    /// <summary>Field number for the "set_op_type" field.</summary>
    public const int SetOpTypeFieldNumber = 3;
    private global::Spark.Connect.SetOperation.Types.SetOpType setOpType_ = global::Spark.Connect.SetOperation.Types.SetOpType.Unspecified;
    /// <summary>
    /// (Required) The Set operation type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.SetOperation.Types.SetOpType SetOpType {
      get { return setOpType_; }
      set {
        setOpType_ = value;
      }
    }

    /// <summary>Field number for the "is_all" field.</summary>
    public const int IsAllFieldNumber = 4;
    private readonly static bool IsAllDefaultValue = false;

    private bool isAll_;
    /// <summary>
    /// (Optional) If to remove duplicate rows.
    ///
    /// True to preserve all results.
    /// False to remove duplicate rows.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsAll {
      get { if ((_hasBits0 & 1) != 0) { return isAll_; } else { return IsAllDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isAll_ = value;
      }
    }
    /// <summary>Gets whether the "is_all" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsAll {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "is_all" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsAll() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "by_name" field.</summary>
    public const int ByNameFieldNumber = 5;
    private readonly static bool ByNameDefaultValue = false;

    private bool byName_;
    /// <summary>
    /// (Optional) If to perform the Set operation based on name resolution.
    ///
    /// Only UNION supports this option.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ByName {
      get { if ((_hasBits0 & 2) != 0) { return byName_; } else { return ByNameDefaultValue; } }
      set {
        _hasBits0 |= 2;
        byName_ = value;
      }
    }
    /// <summary>Gets whether the "by_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasByName {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "by_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearByName() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "allow_missing_columns" field.</summary>
    public const int AllowMissingColumnsFieldNumber = 6;
    private readonly static bool AllowMissingColumnsDefaultValue = false;

    private bool allowMissingColumns_;
    /// <summary>
    /// (Optional) If to perform the Set operation and allow missing columns.
    ///
    /// Only UNION supports this option.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AllowMissingColumns {
      get { if ((_hasBits0 & 4) != 0) { return allowMissingColumns_; } else { return AllowMissingColumnsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        allowMissingColumns_ = value;
      }
    }
    /// <summary>Gets whether the "allow_missing_columns" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAllowMissingColumns {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "allow_missing_columns" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAllowMissingColumns() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SetOperation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SetOperation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LeftInput, other.LeftInput)) return false;
      if (!object.Equals(RightInput, other.RightInput)) return false;
      if (SetOpType != other.SetOpType) return false;
      if (IsAll != other.IsAll) return false;
      if (ByName != other.ByName) return false;
      if (AllowMissingColumns != other.AllowMissingColumns) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (leftInput_ != null) hash ^= LeftInput.GetHashCode();
      if (rightInput_ != null) hash ^= RightInput.GetHashCode();
      if (SetOpType != global::Spark.Connect.SetOperation.Types.SetOpType.Unspecified) hash ^= SetOpType.GetHashCode();
      if (HasIsAll) hash ^= IsAll.GetHashCode();
      if (HasByName) hash ^= ByName.GetHashCode();
      if (HasAllowMissingColumns) hash ^= AllowMissingColumns.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (leftInput_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LeftInput);
      }
      if (rightInput_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RightInput);
      }
      if (SetOpType != global::Spark.Connect.SetOperation.Types.SetOpType.Unspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) SetOpType);
      }
      if (HasIsAll) {
        output.WriteRawTag(32);
        output.WriteBool(IsAll);
      }
      if (HasByName) {
        output.WriteRawTag(40);
        output.WriteBool(ByName);
      }
      if (HasAllowMissingColumns) {
        output.WriteRawTag(48);
        output.WriteBool(AllowMissingColumns);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (leftInput_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LeftInput);
      }
      if (rightInput_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RightInput);
      }
      if (SetOpType != global::Spark.Connect.SetOperation.Types.SetOpType.Unspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) SetOpType);
      }
      if (HasIsAll) {
        output.WriteRawTag(32);
        output.WriteBool(IsAll);
      }
      if (HasByName) {
        output.WriteRawTag(40);
        output.WriteBool(ByName);
      }
      if (HasAllowMissingColumns) {
        output.WriteRawTag(48);
        output.WriteBool(AllowMissingColumns);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (leftInput_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeftInput);
      }
      if (rightInput_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RightInput);
      }
      if (SetOpType != global::Spark.Connect.SetOperation.Types.SetOpType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SetOpType);
      }
      if (HasIsAll) {
        size += 1 + 1;
      }
      if (HasByName) {
        size += 1 + 1;
      }
      if (HasAllowMissingColumns) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SetOperation other) {
      if (other == null) {
        return;
      }
      if (other.leftInput_ != null) {
        if (leftInput_ == null) {
          LeftInput = new global::Spark.Connect.Relation();
        }
        LeftInput.MergeFrom(other.LeftInput);
      }
      if (other.rightInput_ != null) {
        if (rightInput_ == null) {
          RightInput = new global::Spark.Connect.Relation();
        }
        RightInput.MergeFrom(other.RightInput);
      }
      if (other.SetOpType != global::Spark.Connect.SetOperation.Types.SetOpType.Unspecified) {
        SetOpType = other.SetOpType;
      }
      if (other.HasIsAll) {
        IsAll = other.IsAll;
      }
      if (other.HasByName) {
        ByName = other.ByName;
      }
      if (other.HasAllowMissingColumns) {
        AllowMissingColumns = other.AllowMissingColumns;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (leftInput_ == null) {
              LeftInput = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(LeftInput);
            break;
          }
          case 18: {
            if (rightInput_ == null) {
              RightInput = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(RightInput);
            break;
          }
          case 24: {
            SetOpType = (global::Spark.Connect.SetOperation.Types.SetOpType) input.ReadEnum();
            break;
          }
          case 32: {
            IsAll = input.ReadBool();
            break;
          }
          case 40: {
            ByName = input.ReadBool();
            break;
          }
          case 48: {
            AllowMissingColumns = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (leftInput_ == null) {
              LeftInput = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(LeftInput);
            break;
          }
          case 18: {
            if (rightInput_ == null) {
              RightInput = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(RightInput);
            break;
          }
          case 24: {
            SetOpType = (global::Spark.Connect.SetOperation.Types.SetOpType) input.ReadEnum();
            break;
          }
          case 32: {
            IsAll = input.ReadBool();
            break;
          }
          case 40: {
            ByName = input.ReadBool();
            break;
          }
          case 48: {
            AllowMissingColumns = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the SetOperation message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum SetOpType {
        [pbr::OriginalName("SET_OP_TYPE_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("SET_OP_TYPE_INTERSECT")] Intersect = 1,
        [pbr::OriginalName("SET_OP_TYPE_UNION")] Union = 2,
        [pbr::OriginalName("SET_OP_TYPE_EXCEPT")] Except = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// Relation of type [[Limit]] that is used to `limit` rows from the input relation.
  /// </summary>
  public sealed partial class Limit : pb::IMessage<Limit>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Limit> _parser = new pb::MessageParser<Limit>(() => new Limit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Limit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Limit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Limit(Limit other) : this() {
      input_ = other.input_ != null ? other.input_.Clone() : null;
      limit_ = other.limit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Limit Clone() {
      return new Limit(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) Input relation for a Limit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int Limit_FieldNumber = 2;
    private int limit_;
    /// <summary>
    /// (Required) the limit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Limit_ {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Limit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Limit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if (Limit_ != other.Limit_) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      if (Limit_ != 0) hash ^= Limit_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (Limit_ != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Limit_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (Limit_ != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Limit_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      if (Limit_ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Limit_);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Limit other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      if (other.Limit_ != 0) {
        Limit_ = other.Limit_;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 16: {
            Limit_ = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 16: {
            Limit_ = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Relation of type [[Offset]] that is used to read rows staring from the `offset` on
  /// the input relation.
  /// </summary>
  public sealed partial class Offset : pb::IMessage<Offset>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Offset> _parser = new pb::MessageParser<Offset>(() => new Offset());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Offset> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Offset() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Offset(Offset other) : this() {
      input_ = other.input_ != null ? other.input_.Clone() : null;
      offset_ = other.offset_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Offset Clone() {
      return new Offset(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) Input relation for an Offset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int Offset_FieldNumber = 2;
    private int offset_;
    /// <summary>
    /// (Required) the limit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Offset_ {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Offset);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Offset other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if (Offset_ != other.Offset_) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      if (Offset_ != 0) hash ^= Offset_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (Offset_ != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Offset_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (Offset_ != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Offset_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      if (Offset_ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Offset_);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Offset other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      if (other.Offset_ != 0) {
        Offset_ = other.Offset_;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 16: {
            Offset_ = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 16: {
            Offset_ = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Relation of type [[Tail]] that is used to fetch `limit` rows from the last of the input relation.
  /// </summary>
  public sealed partial class Tail : pb::IMessage<Tail>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Tail> _parser = new pb::MessageParser<Tail>(() => new Tail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Tail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Tail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Tail(Tail other) : this() {
      input_ = other.input_ != null ? other.input_.Clone() : null;
      limit_ = other.limit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Tail Clone() {
      return new Tail(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) Input relation for an Tail.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 2;
    private int limit_;
    /// <summary>
    /// (Required) the limit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Tail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Tail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if (Limit != other.Limit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      if (Limit != 0) hash ^= Limit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (Limit != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Limit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (Limit != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Limit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      if (Limit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Limit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Tail other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      if (other.Limit != 0) {
        Limit = other.Limit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 16: {
            Limit = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 16: {
            Limit = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Relation of type [[Aggregate]].
  /// </summary>
  public sealed partial class Aggregate : pb::IMessage<Aggregate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Aggregate> _parser = new pb::MessageParser<Aggregate>(() => new Aggregate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Aggregate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Aggregate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Aggregate(Aggregate other) : this() {
      input_ = other.input_ != null ? other.input_.Clone() : null;
      groupType_ = other.groupType_;
      groupingExpressions_ = other.groupingExpressions_.Clone();
      aggregateExpressions_ = other.aggregateExpressions_.Clone();
      pivot_ = other.pivot_ != null ? other.pivot_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Aggregate Clone() {
      return new Aggregate(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) Input relation for a RelationalGroupedDataset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "group_type" field.</summary>
    public const int GroupTypeFieldNumber = 2;
    private global::Spark.Connect.Aggregate.Types.GroupType groupType_ = global::Spark.Connect.Aggregate.Types.GroupType.Unspecified;
    /// <summary>
    /// (Required) How the RelationalGroupedDataset was built.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Aggregate.Types.GroupType GroupType {
      get { return groupType_; }
      set {
        groupType_ = value;
      }
    }

    /// <summary>Field number for the "grouping_expressions" field.</summary>
    public const int GroupingExpressionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Spark.Connect.Expression> _repeated_groupingExpressions_codec
        = pb::FieldCodec.ForMessage(26, global::Spark.Connect.Expression.Parser);
    private readonly pbc::RepeatedField<global::Spark.Connect.Expression> groupingExpressions_ = new pbc::RepeatedField<global::Spark.Connect.Expression>();
    /// <summary>
    /// (Required) Expressions for grouping keys
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Spark.Connect.Expression> GroupingExpressions {
      get { return groupingExpressions_; }
    }

    /// <summary>Field number for the "aggregate_expressions" field.</summary>
    public const int AggregateExpressionsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Spark.Connect.Expression> _repeated_aggregateExpressions_codec
        = pb::FieldCodec.ForMessage(34, global::Spark.Connect.Expression.Parser);
    private readonly pbc::RepeatedField<global::Spark.Connect.Expression> aggregateExpressions_ = new pbc::RepeatedField<global::Spark.Connect.Expression>();
    /// <summary>
    /// (Required) List of values that will be translated to columns in the output DataFrame.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Spark.Connect.Expression> AggregateExpressions {
      get { return aggregateExpressions_; }
    }

    /// <summary>Field number for the "pivot" field.</summary>
    public const int PivotFieldNumber = 5;
    private global::Spark.Connect.Aggregate.Types.Pivot pivot_;
    /// <summary>
    /// (Optional) Pivots a column of the current `DataFrame` and performs the specified aggregation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Aggregate.Types.Pivot Pivot {
      get { return pivot_; }
      set {
        pivot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Aggregate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Aggregate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if (GroupType != other.GroupType) return false;
      if(!groupingExpressions_.Equals(other.groupingExpressions_)) return false;
      if(!aggregateExpressions_.Equals(other.aggregateExpressions_)) return false;
      if (!object.Equals(Pivot, other.Pivot)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      if (GroupType != global::Spark.Connect.Aggregate.Types.GroupType.Unspecified) hash ^= GroupType.GetHashCode();
      hash ^= groupingExpressions_.GetHashCode();
      hash ^= aggregateExpressions_.GetHashCode();
      if (pivot_ != null) hash ^= Pivot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (GroupType != global::Spark.Connect.Aggregate.Types.GroupType.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) GroupType);
      }
      groupingExpressions_.WriteTo(output, _repeated_groupingExpressions_codec);
      aggregateExpressions_.WriteTo(output, _repeated_aggregateExpressions_codec);
      if (pivot_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Pivot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (GroupType != global::Spark.Connect.Aggregate.Types.GroupType.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) GroupType);
      }
      groupingExpressions_.WriteTo(ref output, _repeated_groupingExpressions_codec);
      aggregateExpressions_.WriteTo(ref output, _repeated_aggregateExpressions_codec);
      if (pivot_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Pivot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      if (GroupType != global::Spark.Connect.Aggregate.Types.GroupType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GroupType);
      }
      size += groupingExpressions_.CalculateSize(_repeated_groupingExpressions_codec);
      size += aggregateExpressions_.CalculateSize(_repeated_aggregateExpressions_codec);
      if (pivot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pivot);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Aggregate other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      if (other.GroupType != global::Spark.Connect.Aggregate.Types.GroupType.Unspecified) {
        GroupType = other.GroupType;
      }
      groupingExpressions_.Add(other.groupingExpressions_);
      aggregateExpressions_.Add(other.aggregateExpressions_);
      if (other.pivot_ != null) {
        if (pivot_ == null) {
          Pivot = new global::Spark.Connect.Aggregate.Types.Pivot();
        }
        Pivot.MergeFrom(other.Pivot);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 16: {
            GroupType = (global::Spark.Connect.Aggregate.Types.GroupType) input.ReadEnum();
            break;
          }
          case 26: {
            groupingExpressions_.AddEntriesFrom(input, _repeated_groupingExpressions_codec);
            break;
          }
          case 34: {
            aggregateExpressions_.AddEntriesFrom(input, _repeated_aggregateExpressions_codec);
            break;
          }
          case 42: {
            if (pivot_ == null) {
              Pivot = new global::Spark.Connect.Aggregate.Types.Pivot();
            }
            input.ReadMessage(Pivot);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 16: {
            GroupType = (global::Spark.Connect.Aggregate.Types.GroupType) input.ReadEnum();
            break;
          }
          case 26: {
            groupingExpressions_.AddEntriesFrom(ref input, _repeated_groupingExpressions_codec);
            break;
          }
          case 34: {
            aggregateExpressions_.AddEntriesFrom(ref input, _repeated_aggregateExpressions_codec);
            break;
          }
          case 42: {
            if (pivot_ == null) {
              Pivot = new global::Spark.Connect.Aggregate.Types.Pivot();
            }
            input.ReadMessage(Pivot);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Aggregate message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum GroupType {
        [pbr::OriginalName("GROUP_TYPE_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("GROUP_TYPE_GROUPBY")] Groupby = 1,
        [pbr::OriginalName("GROUP_TYPE_ROLLUP")] Rollup = 2,
        [pbr::OriginalName("GROUP_TYPE_CUBE")] Cube = 3,
        [pbr::OriginalName("GROUP_TYPE_PIVOT")] Pivot = 4,
      }

      public sealed partial class Pivot : pb::IMessage<Pivot>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Pivot> _parser = new pb::MessageParser<Pivot>(() => new Pivot());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Pivot> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spark.Connect.Aggregate.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Pivot() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Pivot(Pivot other) : this() {
          col_ = other.col_ != null ? other.col_.Clone() : null;
          values_ = other.values_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Pivot Clone() {
          return new Pivot(this);
        }

        /// <summary>Field number for the "col" field.</summary>
        public const int ColFieldNumber = 1;
        private global::Spark.Connect.Expression col_;
        /// <summary>
        /// (Required) The column to pivot
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spark.Connect.Expression Col {
          get { return col_; }
          set {
            col_ = value;
          }
        }

        /// <summary>Field number for the "values" field.</summary>
        public const int ValuesFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Spark.Connect.Expression.Types.Literal> _repeated_values_codec
            = pb::FieldCodec.ForMessage(18, global::Spark.Connect.Expression.Types.Literal.Parser);
        private readonly pbc::RepeatedField<global::Spark.Connect.Expression.Types.Literal> values_ = new pbc::RepeatedField<global::Spark.Connect.Expression.Types.Literal>();
        /// <summary>
        /// (Optional) List of values that will be translated to columns in the output DataFrame.
        ///
        /// Note that if it is empty, the server side will immediately trigger a job to collect
        /// the distinct values of the column.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<global::Spark.Connect.Expression.Types.Literal> Values {
          get { return values_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Pivot);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Pivot other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Col, other.Col)) return false;
          if(!values_.Equals(other.values_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (col_ != null) hash ^= Col.GetHashCode();
          hash ^= values_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (col_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Col);
          }
          values_.WriteTo(output, _repeated_values_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (col_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Col);
          }
          values_.WriteTo(ref output, _repeated_values_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (col_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Col);
          }
          size += values_.CalculateSize(_repeated_values_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Pivot other) {
          if (other == null) {
            return;
          }
          if (other.col_ != null) {
            if (col_ == null) {
              Col = new global::Spark.Connect.Expression();
            }
            Col.MergeFrom(other.Col);
          }
          values_.Add(other.values_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (col_ == null) {
                  Col = new global::Spark.Connect.Expression();
                }
                input.ReadMessage(Col);
                break;
              }
              case 18: {
                values_.AddEntriesFrom(input, _repeated_values_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (col_ == null) {
                  Col = new global::Spark.Connect.Expression();
                }
                input.ReadMessage(Col);
                break;
              }
              case 18: {
                values_.AddEntriesFrom(ref input, _repeated_values_codec);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// Relation of type [[Sort]].
  /// </summary>
  public sealed partial class Sort : pb::IMessage<Sort>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Sort> _parser = new pb::MessageParser<Sort>(() => new Sort());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Sort> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Sort() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Sort(Sort other) : this() {
      _hasBits0 = other._hasBits0;
      input_ = other.input_ != null ? other.input_.Clone() : null;
      order_ = other.order_.Clone();
      isGlobal_ = other.isGlobal_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Sort Clone() {
      return new Sort(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) Input relation for a Sort.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Spark.Connect.Expression.Types.SortOrder> _repeated_order_codec
        = pb::FieldCodec.ForMessage(18, global::Spark.Connect.Expression.Types.SortOrder.Parser);
    private readonly pbc::RepeatedField<global::Spark.Connect.Expression.Types.SortOrder> order_ = new pbc::RepeatedField<global::Spark.Connect.Expression.Types.SortOrder>();
    /// <summary>
    /// (Required) The ordering expressions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Spark.Connect.Expression.Types.SortOrder> Order {
      get { return order_; }
    }

    /// <summary>Field number for the "is_global" field.</summary>
    public const int IsGlobalFieldNumber = 3;
    private readonly static bool IsGlobalDefaultValue = false;

    private bool isGlobal_;
    /// <summary>
    /// (Optional) if this is a global sort.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsGlobal {
      get { if ((_hasBits0 & 1) != 0) { return isGlobal_; } else { return IsGlobalDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isGlobal_ = value;
      }
    }
    /// <summary>Gets whether the "is_global" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsGlobal {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "is_global" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsGlobal() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Sort);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Sort other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if(!order_.Equals(other.order_)) return false;
      if (IsGlobal != other.IsGlobal) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      hash ^= order_.GetHashCode();
      if (HasIsGlobal) hash ^= IsGlobal.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      order_.WriteTo(output, _repeated_order_codec);
      if (HasIsGlobal) {
        output.WriteRawTag(24);
        output.WriteBool(IsGlobal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      order_.WriteTo(ref output, _repeated_order_codec);
      if (HasIsGlobal) {
        output.WriteRawTag(24);
        output.WriteBool(IsGlobal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      size += order_.CalculateSize(_repeated_order_codec);
      if (HasIsGlobal) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Sort other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      order_.Add(other.order_);
      if (other.HasIsGlobal) {
        IsGlobal = other.IsGlobal;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            order_.AddEntriesFrom(input, _repeated_order_codec);
            break;
          }
          case 24: {
            IsGlobal = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            order_.AddEntriesFrom(ref input, _repeated_order_codec);
            break;
          }
          case 24: {
            IsGlobal = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Drop specified columns.
  /// </summary>
  public sealed partial class Drop : pb::IMessage<Drop>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Drop> _parser = new pb::MessageParser<Drop>(() => new Drop());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Drop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Drop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Drop(Drop other) : this() {
      input_ = other.input_ != null ? other.input_.Clone() : null;
      columns_ = other.columns_.Clone();
      columnNames_ = other.columnNames_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Drop Clone() {
      return new Drop(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) The input relation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Spark.Connect.Expression> _repeated_columns_codec
        = pb::FieldCodec.ForMessage(18, global::Spark.Connect.Expression.Parser);
    private readonly pbc::RepeatedField<global::Spark.Connect.Expression> columns_ = new pbc::RepeatedField<global::Spark.Connect.Expression>();
    /// <summary>
    /// (Optional) columns to drop.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Spark.Connect.Expression> Columns {
      get { return columns_; }
    }

    /// <summary>Field number for the "column_names" field.</summary>
    public const int ColumnNamesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_columnNames_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> columnNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// (Optional) names of columns to drop.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> ColumnNames {
      get { return columnNames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Drop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Drop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if(!columns_.Equals(other.columns_)) return false;
      if(!columnNames_.Equals(other.columnNames_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      hash ^= columns_.GetHashCode();
      hash ^= columnNames_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      columns_.WriteTo(output, _repeated_columns_codec);
      columnNames_.WriteTo(output, _repeated_columnNames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      columns_.WriteTo(ref output, _repeated_columns_codec);
      columnNames_.WriteTo(ref output, _repeated_columnNames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      size += columns_.CalculateSize(_repeated_columns_codec);
      size += columnNames_.CalculateSize(_repeated_columnNames_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Drop other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      columns_.Add(other.columns_);
      columnNames_.Add(other.columnNames_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            columns_.AddEntriesFrom(input, _repeated_columns_codec);
            break;
          }
          case 26: {
            columnNames_.AddEntriesFrom(input, _repeated_columnNames_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            columns_.AddEntriesFrom(ref input, _repeated_columns_codec);
            break;
          }
          case 26: {
            columnNames_.AddEntriesFrom(ref input, _repeated_columnNames_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Relation of type [[Deduplicate]] which have duplicate rows removed, could consider either only
  /// the subset of columns or all the columns.
  /// </summary>
  public sealed partial class Deduplicate : pb::IMessage<Deduplicate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Deduplicate> _parser = new pb::MessageParser<Deduplicate>(() => new Deduplicate());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Deduplicate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Deduplicate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Deduplicate(Deduplicate other) : this() {
      _hasBits0 = other._hasBits0;
      input_ = other.input_ != null ? other.input_.Clone() : null;
      columnNames_ = other.columnNames_.Clone();
      allColumnsAsKeys_ = other.allColumnsAsKeys_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Deduplicate Clone() {
      return new Deduplicate(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) Input relation for a Deduplicate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "column_names" field.</summary>
    public const int ColumnNamesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_columnNames_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> columnNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// (Optional) Deduplicate based on a list of column names.
    ///
    /// This field does not co-use with `all_columns_as_keys`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> ColumnNames {
      get { return columnNames_; }
    }

    /// <summary>Field number for the "all_columns_as_keys" field.</summary>
    public const int AllColumnsAsKeysFieldNumber = 3;
    private readonly static bool AllColumnsAsKeysDefaultValue = false;

    private bool allColumnsAsKeys_;
    /// <summary>
    /// (Optional) Deduplicate based on all the columns of the input relation.
    ///
    /// This field does not co-use with `column_names`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AllColumnsAsKeys {
      get { if ((_hasBits0 & 1) != 0) { return allColumnsAsKeys_; } else { return AllColumnsAsKeysDefaultValue; } }
      set {
        _hasBits0 |= 1;
        allColumnsAsKeys_ = value;
      }
    }
    /// <summary>Gets whether the "all_columns_as_keys" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAllColumnsAsKeys {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "all_columns_as_keys" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAllColumnsAsKeys() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Deduplicate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Deduplicate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if(!columnNames_.Equals(other.columnNames_)) return false;
      if (AllColumnsAsKeys != other.AllColumnsAsKeys) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      hash ^= columnNames_.GetHashCode();
      if (HasAllColumnsAsKeys) hash ^= AllColumnsAsKeys.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      columnNames_.WriteTo(output, _repeated_columnNames_codec);
      if (HasAllColumnsAsKeys) {
        output.WriteRawTag(24);
        output.WriteBool(AllColumnsAsKeys);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      columnNames_.WriteTo(ref output, _repeated_columnNames_codec);
      if (HasAllColumnsAsKeys) {
        output.WriteRawTag(24);
        output.WriteBool(AllColumnsAsKeys);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      size += columnNames_.CalculateSize(_repeated_columnNames_codec);
      if (HasAllColumnsAsKeys) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Deduplicate other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      columnNames_.Add(other.columnNames_);
      if (other.HasAllColumnsAsKeys) {
        AllColumnsAsKeys = other.AllColumnsAsKeys;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            columnNames_.AddEntriesFrom(input, _repeated_columnNames_codec);
            break;
          }
          case 24: {
            AllColumnsAsKeys = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            columnNames_.AddEntriesFrom(ref input, _repeated_columnNames_codec);
            break;
          }
          case 24: {
            AllColumnsAsKeys = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A relation that does not need to be qualified by name.
  /// </summary>
  public sealed partial class LocalRelation : pb::IMessage<LocalRelation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LocalRelation> _parser = new pb::MessageParser<LocalRelation>(() => new LocalRelation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LocalRelation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LocalRelation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LocalRelation(LocalRelation other) : this() {
      data_ = other.data_;
      schema_ = other.schema_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LocalRelation Clone() {
      return new LocalRelation(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private readonly static pb::ByteString DataDefaultValue = pb::ByteString.Empty;

    private pb::ByteString data_;
    /// <summary>
    /// (Optional) Local collection data serialized into Arrow IPC streaming format which contains
    /// the schema of the data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Data {
      get { return data_ ?? DataDefaultValue; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasData {
      get { return data_ != null; }
    }
    /// <summary>Clears the value of the "data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearData() {
      data_ = null;
    }

    /// <summary>Field number for the "schema" field.</summary>
    public const int SchemaFieldNumber = 2;
    private readonly static string SchemaDefaultValue = "";

    private string schema_;
    /// <summary>
    /// (Optional) The schema of local data.
    /// It should be either a DDL-formatted type string or a JSON string.
    ///
    /// The server side will update the column names and data types according to this schema.
    /// If the 'data' is not provided, then this schema will be required.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Schema {
      get { return schema_ ?? SchemaDefaultValue; }
      set {
        schema_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "schema" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSchema {
      get { return schema_ != null; }
    }
    /// <summary>Clears the value of the "schema" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSchema() {
      schema_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LocalRelation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LocalRelation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      if (Schema != other.Schema) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasData) hash ^= Data.GetHashCode();
      if (HasSchema) hash ^= Schema.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasData) {
        output.WriteRawTag(10);
        output.WriteBytes(Data);
      }
      if (HasSchema) {
        output.WriteRawTag(18);
        output.WriteString(Schema);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasData) {
        output.WriteRawTag(10);
        output.WriteBytes(Data);
      }
      if (HasSchema) {
        output.WriteRawTag(18);
        output.WriteString(Schema);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasData) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (HasSchema) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Schema);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LocalRelation other) {
      if (other == null) {
        return;
      }
      if (other.HasData) {
        Data = other.Data;
      }
      if (other.HasSchema) {
        Schema = other.Schema;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Data = input.ReadBytes();
            break;
          }
          case 18: {
            Schema = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Data = input.ReadBytes();
            break;
          }
          case 18: {
            Schema = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Relation of type [[Sample]] that samples a fraction of the dataset.
  /// </summary>
  public sealed partial class Sample : pb::IMessage<Sample>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Sample> _parser = new pb::MessageParser<Sample>(() => new Sample());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Sample> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Sample() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Sample(Sample other) : this() {
      _hasBits0 = other._hasBits0;
      input_ = other.input_ != null ? other.input_.Clone() : null;
      lowerBound_ = other.lowerBound_;
      upperBound_ = other.upperBound_;
      withReplacement_ = other.withReplacement_;
      seed_ = other.seed_;
      deterministicOrder_ = other.deterministicOrder_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Sample Clone() {
      return new Sample(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) Input relation for a Sample.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "lower_bound" field.</summary>
    public const int LowerBoundFieldNumber = 2;
    private double lowerBound_;
    /// <summary>
    /// (Required) lower bound.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LowerBound {
      get { return lowerBound_; }
      set {
        lowerBound_ = value;
      }
    }

    /// <summary>Field number for the "upper_bound" field.</summary>
    public const int UpperBoundFieldNumber = 3;
    private double upperBound_;
    /// <summary>
    /// (Required) upper bound.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double UpperBound {
      get { return upperBound_; }
      set {
        upperBound_ = value;
      }
    }

    /// <summary>Field number for the "with_replacement" field.</summary>
    public const int WithReplacementFieldNumber = 4;
    private readonly static bool WithReplacementDefaultValue = false;

    private bool withReplacement_;
    /// <summary>
    /// (Optional) Whether to sample with replacement.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool WithReplacement {
      get { if ((_hasBits0 & 1) != 0) { return withReplacement_; } else { return WithReplacementDefaultValue; } }
      set {
        _hasBits0 |= 1;
        withReplacement_ = value;
      }
    }
    /// <summary>Gets whether the "with_replacement" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWithReplacement {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "with_replacement" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWithReplacement() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "seed" field.</summary>
    public const int SeedFieldNumber = 5;
    private readonly static long SeedDefaultValue = 0L;

    private long seed_;
    /// <summary>
    /// (Optional) The random seed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Seed {
      get { if ((_hasBits0 & 2) != 0) { return seed_; } else { return SeedDefaultValue; } }
      set {
        _hasBits0 |= 2;
        seed_ = value;
      }
    }
    /// <summary>Gets whether the "seed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSeed {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "seed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSeed() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "deterministic_order" field.</summary>
    public const int DeterministicOrderFieldNumber = 6;
    private bool deterministicOrder_;
    /// <summary>
    /// (Required) Explicitly sort the underlying plan to make the ordering deterministic or cache it.
    /// This flag is true when invoking `dataframe.randomSplit` to randomly splits DataFrame with the
    /// provided weights. Otherwise, it is false.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DeterministicOrder {
      get { return deterministicOrder_; }
      set {
        deterministicOrder_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Sample);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Sample other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LowerBound, other.LowerBound)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UpperBound, other.UpperBound)) return false;
      if (WithReplacement != other.WithReplacement) return false;
      if (Seed != other.Seed) return false;
      if (DeterministicOrder != other.DeterministicOrder) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      if (LowerBound != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LowerBound);
      if (UpperBound != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UpperBound);
      if (HasWithReplacement) hash ^= WithReplacement.GetHashCode();
      if (HasSeed) hash ^= Seed.GetHashCode();
      if (DeterministicOrder != false) hash ^= DeterministicOrder.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (LowerBound != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(LowerBound);
      }
      if (UpperBound != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(UpperBound);
      }
      if (HasWithReplacement) {
        output.WriteRawTag(32);
        output.WriteBool(WithReplacement);
      }
      if (HasSeed) {
        output.WriteRawTag(40);
        output.WriteInt64(Seed);
      }
      if (DeterministicOrder != false) {
        output.WriteRawTag(48);
        output.WriteBool(DeterministicOrder);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (LowerBound != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(LowerBound);
      }
      if (UpperBound != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(UpperBound);
      }
      if (HasWithReplacement) {
        output.WriteRawTag(32);
        output.WriteBool(WithReplacement);
      }
      if (HasSeed) {
        output.WriteRawTag(40);
        output.WriteInt64(Seed);
      }
      if (DeterministicOrder != false) {
        output.WriteRawTag(48);
        output.WriteBool(DeterministicOrder);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      if (LowerBound != 0D) {
        size += 1 + 8;
      }
      if (UpperBound != 0D) {
        size += 1 + 8;
      }
      if (HasWithReplacement) {
        size += 1 + 1;
      }
      if (HasSeed) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Seed);
      }
      if (DeterministicOrder != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Sample other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      if (other.LowerBound != 0D) {
        LowerBound = other.LowerBound;
      }
      if (other.UpperBound != 0D) {
        UpperBound = other.UpperBound;
      }
      if (other.HasWithReplacement) {
        WithReplacement = other.WithReplacement;
      }
      if (other.HasSeed) {
        Seed = other.Seed;
      }
      if (other.DeterministicOrder != false) {
        DeterministicOrder = other.DeterministicOrder;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 17: {
            LowerBound = input.ReadDouble();
            break;
          }
          case 25: {
            UpperBound = input.ReadDouble();
            break;
          }
          case 32: {
            WithReplacement = input.ReadBool();
            break;
          }
          case 40: {
            Seed = input.ReadInt64();
            break;
          }
          case 48: {
            DeterministicOrder = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 17: {
            LowerBound = input.ReadDouble();
            break;
          }
          case 25: {
            UpperBound = input.ReadDouble();
            break;
          }
          case 32: {
            WithReplacement = input.ReadBool();
            break;
          }
          case 40: {
            Seed = input.ReadInt64();
            break;
          }
          case 48: {
            DeterministicOrder = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Relation of type [[Range]] that generates a sequence of integers.
  /// </summary>
  public sealed partial class Range : pb::IMessage<Range>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Range> _parser = new pb::MessageParser<Range>(() => new Range());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Range> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Range() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Range(Range other) : this() {
      _hasBits0 = other._hasBits0;
      start_ = other.start_;
      end_ = other.end_;
      step_ = other.step_;
      numPartitions_ = other.numPartitions_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Range Clone() {
      return new Range(this);
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 1;
    private readonly static long StartDefaultValue = 0L;

    private long start_;
    /// <summary>
    /// (Optional) Default value = 0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Start {
      get { if ((_hasBits0 & 1) != 0) { return start_; } else { return StartDefaultValue; } }
      set {
        _hasBits0 |= 1;
        start_ = value;
      }
    }
    /// <summary>Gets whether the "start" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStart {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "start" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStart() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 2;
    private long end_;
    /// <summary>
    /// (Required)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    /// <summary>Field number for the "step" field.</summary>
    public const int StepFieldNumber = 3;
    private long step_;
    /// <summary>
    /// (Required)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Step {
      get { return step_; }
      set {
        step_ = value;
      }
    }

    /// <summary>Field number for the "num_partitions" field.</summary>
    public const int NumPartitionsFieldNumber = 4;
    private readonly static int NumPartitionsDefaultValue = 0;

    private int numPartitions_;
    /// <summary>
    /// Optional. Default value is assigned by 1) SQL conf "spark.sql.leafNodeDefaultParallelism" if
    /// it is set, or 2) spark default parallelism.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumPartitions {
      get { if ((_hasBits0 & 2) != 0) { return numPartitions_; } else { return NumPartitionsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        numPartitions_ = value;
      }
    }
    /// <summary>Gets whether the "num_partitions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNumPartitions {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "num_partitions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNumPartitions() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Range);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Range other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Start != other.Start) return false;
      if (End != other.End) return false;
      if (Step != other.Step) return false;
      if (NumPartitions != other.NumPartitions) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasStart) hash ^= Start.GetHashCode();
      if (End != 0L) hash ^= End.GetHashCode();
      if (Step != 0L) hash ^= Step.GetHashCode();
      if (HasNumPartitions) hash ^= NumPartitions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasStart) {
        output.WriteRawTag(8);
        output.WriteInt64(Start);
      }
      if (End != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(End);
      }
      if (Step != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Step);
      }
      if (HasNumPartitions) {
        output.WriteRawTag(32);
        output.WriteInt32(NumPartitions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasStart) {
        output.WriteRawTag(8);
        output.WriteInt64(Start);
      }
      if (End != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(End);
      }
      if (Step != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Step);
      }
      if (HasNumPartitions) {
        output.WriteRawTag(32);
        output.WriteInt32(NumPartitions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasStart) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Start);
      }
      if (End != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(End);
      }
      if (Step != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Step);
      }
      if (HasNumPartitions) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumPartitions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Range other) {
      if (other == null) {
        return;
      }
      if (other.HasStart) {
        Start = other.Start;
      }
      if (other.End != 0L) {
        End = other.End;
      }
      if (other.Step != 0L) {
        Step = other.Step;
      }
      if (other.HasNumPartitions) {
        NumPartitions = other.NumPartitions;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Start = input.ReadInt64();
            break;
          }
          case 16: {
            End = input.ReadInt64();
            break;
          }
          case 24: {
            Step = input.ReadInt64();
            break;
          }
          case 32: {
            NumPartitions = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Start = input.ReadInt64();
            break;
          }
          case 16: {
            End = input.ReadInt64();
            break;
          }
          case 24: {
            Step = input.ReadInt64();
            break;
          }
          case 32: {
            NumPartitions = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Relation alias.
  /// </summary>
  public sealed partial class SubqueryAlias : pb::IMessage<SubqueryAlias>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SubqueryAlias> _parser = new pb::MessageParser<SubqueryAlias>(() => new SubqueryAlias());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SubqueryAlias> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SubqueryAlias() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SubqueryAlias(SubqueryAlias other) : this() {
      input_ = other.input_ != null ? other.input_.Clone() : null;
      alias_ = other.alias_;
      qualifier_ = other.qualifier_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SubqueryAlias Clone() {
      return new SubqueryAlias(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) The input relation of SubqueryAlias.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "alias" field.</summary>
    public const int AliasFieldNumber = 2;
    private string alias_ = "";
    /// <summary>
    /// (Required) The alias.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Alias {
      get { return alias_; }
      set {
        alias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "qualifier" field.</summary>
    public const int QualifierFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_qualifier_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> qualifier_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// (Optional) Qualifier of the alias.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> Qualifier {
      get { return qualifier_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SubqueryAlias);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SubqueryAlias other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if (Alias != other.Alias) return false;
      if(!qualifier_.Equals(other.qualifier_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      if (Alias.Length != 0) hash ^= Alias.GetHashCode();
      hash ^= qualifier_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (Alias.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Alias);
      }
      qualifier_.WriteTo(output, _repeated_qualifier_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (Alias.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Alias);
      }
      qualifier_.WriteTo(ref output, _repeated_qualifier_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      if (Alias.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Alias);
      }
      size += qualifier_.CalculateSize(_repeated_qualifier_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SubqueryAlias other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      if (other.Alias.Length != 0) {
        Alias = other.Alias;
      }
      qualifier_.Add(other.qualifier_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            Alias = input.ReadString();
            break;
          }
          case 26: {
            qualifier_.AddEntriesFrom(input, _repeated_qualifier_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            Alias = input.ReadString();
            break;
          }
          case 26: {
            qualifier_.AddEntriesFrom(ref input, _repeated_qualifier_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Relation repartition.
  /// </summary>
  public sealed partial class Repartition : pb::IMessage<Repartition>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Repartition> _parser = new pb::MessageParser<Repartition>(() => new Repartition());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Repartition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Repartition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Repartition(Repartition other) : this() {
      _hasBits0 = other._hasBits0;
      input_ = other.input_ != null ? other.input_.Clone() : null;
      numPartitions_ = other.numPartitions_;
      shuffle_ = other.shuffle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Repartition Clone() {
      return new Repartition(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) The input relation of Repartition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "num_partitions" field.</summary>
    public const int NumPartitionsFieldNumber = 2;
    private int numPartitions_;
    /// <summary>
    /// (Required) Must be positive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumPartitions {
      get { return numPartitions_; }
      set {
        numPartitions_ = value;
      }
    }

    /// <summary>Field number for the "shuffle" field.</summary>
    public const int ShuffleFieldNumber = 3;
    private readonly static bool ShuffleDefaultValue = false;

    private bool shuffle_;
    /// <summary>
    /// (Optional) Default value is false.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Shuffle {
      get { if ((_hasBits0 & 1) != 0) { return shuffle_; } else { return ShuffleDefaultValue; } }
      set {
        _hasBits0 |= 1;
        shuffle_ = value;
      }
    }
    /// <summary>Gets whether the "shuffle" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasShuffle {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "shuffle" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearShuffle() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Repartition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Repartition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if (NumPartitions != other.NumPartitions) return false;
      if (Shuffle != other.Shuffle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      if (NumPartitions != 0) hash ^= NumPartitions.GetHashCode();
      if (HasShuffle) hash ^= Shuffle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (NumPartitions != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NumPartitions);
      }
      if (HasShuffle) {
        output.WriteRawTag(24);
        output.WriteBool(Shuffle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (NumPartitions != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NumPartitions);
      }
      if (HasShuffle) {
        output.WriteRawTag(24);
        output.WriteBool(Shuffle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      if (NumPartitions != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumPartitions);
      }
      if (HasShuffle) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Repartition other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      if (other.NumPartitions != 0) {
        NumPartitions = other.NumPartitions;
      }
      if (other.HasShuffle) {
        Shuffle = other.Shuffle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 16: {
            NumPartitions = input.ReadInt32();
            break;
          }
          case 24: {
            Shuffle = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 16: {
            NumPartitions = input.ReadInt32();
            break;
          }
          case 24: {
            Shuffle = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Compose the string representing rows for output.
  /// It will invoke 'Dataset.showString' to compute the results.
  /// </summary>
  public sealed partial class ShowString : pb::IMessage<ShowString>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ShowString> _parser = new pb::MessageParser<ShowString>(() => new ShowString());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ShowString> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ShowString() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ShowString(ShowString other) : this() {
      input_ = other.input_ != null ? other.input_.Clone() : null;
      numRows_ = other.numRows_;
      truncate_ = other.truncate_;
      vertical_ = other.vertical_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ShowString Clone() {
      return new ShowString(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) The input relation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "num_rows" field.</summary>
    public const int NumRowsFieldNumber = 2;
    private int numRows_;
    /// <summary>
    /// (Required) Number of rows to show.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumRows {
      get { return numRows_; }
      set {
        numRows_ = value;
      }
    }

    /// <summary>Field number for the "truncate" field.</summary>
    public const int TruncateFieldNumber = 3;
    private int truncate_;
    /// <summary>
    /// (Required) If set to more than 0, truncates strings to
    /// `truncate` characters and all cells will be aligned right.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Truncate {
      get { return truncate_; }
      set {
        truncate_ = value;
      }
    }

    /// <summary>Field number for the "vertical" field.</summary>
    public const int VerticalFieldNumber = 4;
    private bool vertical_;
    /// <summary>
    /// (Required) If set to true, prints output rows vertically (one line per column value).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Vertical {
      get { return vertical_; }
      set {
        vertical_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ShowString);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ShowString other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if (NumRows != other.NumRows) return false;
      if (Truncate != other.Truncate) return false;
      if (Vertical != other.Vertical) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      if (NumRows != 0) hash ^= NumRows.GetHashCode();
      if (Truncate != 0) hash ^= Truncate.GetHashCode();
      if (Vertical != false) hash ^= Vertical.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (NumRows != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NumRows);
      }
      if (Truncate != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Truncate);
      }
      if (Vertical != false) {
        output.WriteRawTag(32);
        output.WriteBool(Vertical);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (NumRows != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NumRows);
      }
      if (Truncate != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Truncate);
      }
      if (Vertical != false) {
        output.WriteRawTag(32);
        output.WriteBool(Vertical);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      if (NumRows != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumRows);
      }
      if (Truncate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Truncate);
      }
      if (Vertical != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ShowString other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      if (other.NumRows != 0) {
        NumRows = other.NumRows;
      }
      if (other.Truncate != 0) {
        Truncate = other.Truncate;
      }
      if (other.Vertical != false) {
        Vertical = other.Vertical;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 16: {
            NumRows = input.ReadInt32();
            break;
          }
          case 24: {
            Truncate = input.ReadInt32();
            break;
          }
          case 32: {
            Vertical = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 16: {
            NumRows = input.ReadInt32();
            break;
          }
          case 24: {
            Truncate = input.ReadInt32();
            break;
          }
          case 32: {
            Vertical = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Computes specified statistics for numeric and string columns.
  /// It will invoke 'Dataset.summary' (same as 'StatFunctions.summary')
  /// to compute the results.
  /// </summary>
  public sealed partial class StatSummary : pb::IMessage<StatSummary>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StatSummary> _parser = new pb::MessageParser<StatSummary>(() => new StatSummary());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<StatSummary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StatSummary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StatSummary(StatSummary other) : this() {
      input_ = other.input_ != null ? other.input_.Clone() : null;
      statistics_ = other.statistics_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StatSummary Clone() {
      return new StatSummary(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) The input relation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "statistics" field.</summary>
    public const int StatisticsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_statistics_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> statistics_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// (Optional) Statistics from to be computed.
    ///
    /// Available statistics are:
    ///  count
    ///  mean
    ///  stddev
    ///  min
    ///  max
    ///  arbitrary approximate percentiles specified as a percentage (e.g. 75%)
    ///  count_distinct
    ///  approx_count_distinct
    ///
    /// If no statistics are given, this function computes 'count', 'mean', 'stddev', 'min',
    /// 'approximate quartiles' (percentiles at 25%, 50%, and 75%), and 'max'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> Statistics {
      get { return statistics_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as StatSummary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(StatSummary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if(!statistics_.Equals(other.statistics_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      hash ^= statistics_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      statistics_.WriteTo(output, _repeated_statistics_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      statistics_.WriteTo(ref output, _repeated_statistics_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      size += statistics_.CalculateSize(_repeated_statistics_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(StatSummary other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      statistics_.Add(other.statistics_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            statistics_.AddEntriesFrom(input, _repeated_statistics_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            statistics_.AddEntriesFrom(ref input, _repeated_statistics_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Computes basic statistics for numeric and string columns, including count, mean, stddev, min,
  /// and max. If no columns are given, this function computes statistics for all numerical or
  /// string columns.
  /// </summary>
  public sealed partial class StatDescribe : pb::IMessage<StatDescribe>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StatDescribe> _parser = new pb::MessageParser<StatDescribe>(() => new StatDescribe());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<StatDescribe> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StatDescribe() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StatDescribe(StatDescribe other) : this() {
      input_ = other.input_ != null ? other.input_.Clone() : null;
      cols_ = other.cols_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StatDescribe Clone() {
      return new StatDescribe(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) The input relation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "cols" field.</summary>
    public const int ColsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_cols_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> cols_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// (Optional) Columns to compute statistics on.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> Cols {
      get { return cols_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as StatDescribe);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(StatDescribe other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if(!cols_.Equals(other.cols_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      hash ^= cols_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      cols_.WriteTo(output, _repeated_cols_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      cols_.WriteTo(ref output, _repeated_cols_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      size += cols_.CalculateSize(_repeated_cols_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(StatDescribe other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      cols_.Add(other.cols_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            cols_.AddEntriesFrom(input, _repeated_cols_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            cols_.AddEntriesFrom(ref input, _repeated_cols_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Computes a pair-wise frequency table of the given columns. Also known as a contingency table.
  /// It will invoke 'Dataset.stat.crosstab' (same as 'StatFunctions.crossTabulate')
  /// to compute the results.
  /// </summary>
  public sealed partial class StatCrosstab : pb::IMessage<StatCrosstab>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StatCrosstab> _parser = new pb::MessageParser<StatCrosstab>(() => new StatCrosstab());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<StatCrosstab> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StatCrosstab() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StatCrosstab(StatCrosstab other) : this() {
      input_ = other.input_ != null ? other.input_.Clone() : null;
      col1_ = other.col1_;
      col2_ = other.col2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StatCrosstab Clone() {
      return new StatCrosstab(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) The input relation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "col1" field.</summary>
    public const int Col1FieldNumber = 2;
    private string col1_ = "";
    /// <summary>
    /// (Required) The name of the first column.
    ///
    /// Distinct items will make the first item of each row.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Col1 {
      get { return col1_; }
      set {
        col1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "col2" field.</summary>
    public const int Col2FieldNumber = 3;
    private string col2_ = "";
    /// <summary>
    /// (Required) The name of the second column.
    ///
    /// Distinct items will make the column names of the DataFrame.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Col2 {
      get { return col2_; }
      set {
        col2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as StatCrosstab);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(StatCrosstab other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if (Col1 != other.Col1) return false;
      if (Col2 != other.Col2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      if (Col1.Length != 0) hash ^= Col1.GetHashCode();
      if (Col2.Length != 0) hash ^= Col2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (Col1.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Col1);
      }
      if (Col2.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Col2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (Col1.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Col1);
      }
      if (Col2.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Col2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      if (Col1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Col1);
      }
      if (Col2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Col2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(StatCrosstab other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      if (other.Col1.Length != 0) {
        Col1 = other.Col1;
      }
      if (other.Col2.Length != 0) {
        Col2 = other.Col2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            Col1 = input.ReadString();
            break;
          }
          case 26: {
            Col2 = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            Col1 = input.ReadString();
            break;
          }
          case 26: {
            Col2 = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Calculate the sample covariance of two numerical columns of a DataFrame.
  /// It will invoke 'Dataset.stat.cov' (same as 'StatFunctions.calculateCov') to compute the results.
  /// </summary>
  public sealed partial class StatCov : pb::IMessage<StatCov>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StatCov> _parser = new pb::MessageParser<StatCov>(() => new StatCov());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<StatCov> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StatCov() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StatCov(StatCov other) : this() {
      input_ = other.input_ != null ? other.input_.Clone() : null;
      col1_ = other.col1_;
      col2_ = other.col2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StatCov Clone() {
      return new StatCov(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) The input relation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "col1" field.</summary>
    public const int Col1FieldNumber = 2;
    private string col1_ = "";
    /// <summary>
    /// (Required) The name of the first column.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Col1 {
      get { return col1_; }
      set {
        col1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "col2" field.</summary>
    public const int Col2FieldNumber = 3;
    private string col2_ = "";
    /// <summary>
    /// (Required) The name of the second column.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Col2 {
      get { return col2_; }
      set {
        col2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as StatCov);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(StatCov other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if (Col1 != other.Col1) return false;
      if (Col2 != other.Col2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      if (Col1.Length != 0) hash ^= Col1.GetHashCode();
      if (Col2.Length != 0) hash ^= Col2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (Col1.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Col1);
      }
      if (Col2.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Col2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (Col1.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Col1);
      }
      if (Col2.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Col2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      if (Col1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Col1);
      }
      if (Col2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Col2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(StatCov other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      if (other.Col1.Length != 0) {
        Col1 = other.Col1;
      }
      if (other.Col2.Length != 0) {
        Col2 = other.Col2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            Col1 = input.ReadString();
            break;
          }
          case 26: {
            Col2 = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            Col1 = input.ReadString();
            break;
          }
          case 26: {
            Col2 = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Calculates the correlation of two columns of a DataFrame. Currently only supports the Pearson
  /// Correlation Coefficient. It will invoke 'Dataset.stat.corr' (same as
  /// 'StatFunctions.pearsonCorrelation') to compute the results.
  /// </summary>
  public sealed partial class StatCorr : pb::IMessage<StatCorr>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StatCorr> _parser = new pb::MessageParser<StatCorr>(() => new StatCorr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<StatCorr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StatCorr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StatCorr(StatCorr other) : this() {
      input_ = other.input_ != null ? other.input_.Clone() : null;
      col1_ = other.col1_;
      col2_ = other.col2_;
      method_ = other.method_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StatCorr Clone() {
      return new StatCorr(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) The input relation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "col1" field.</summary>
    public const int Col1FieldNumber = 2;
    private string col1_ = "";
    /// <summary>
    /// (Required) The name of the first column.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Col1 {
      get { return col1_; }
      set {
        col1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "col2" field.</summary>
    public const int Col2FieldNumber = 3;
    private string col2_ = "";
    /// <summary>
    /// (Required) The name of the second column.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Col2 {
      get { return col2_; }
      set {
        col2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "method" field.</summary>
    public const int MethodFieldNumber = 4;
    private readonly static string MethodDefaultValue = "";

    private string method_;
    /// <summary>
    /// (Optional) Default value is 'pearson'.
    ///
    /// Currently only supports the Pearson Correlation Coefficient.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Method {
      get { return method_ ?? MethodDefaultValue; }
      set {
        method_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "method" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMethod {
      get { return method_ != null; }
    }
    /// <summary>Clears the value of the "method" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMethod() {
      method_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as StatCorr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(StatCorr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if (Col1 != other.Col1) return false;
      if (Col2 != other.Col2) return false;
      if (Method != other.Method) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      if (Col1.Length != 0) hash ^= Col1.GetHashCode();
      if (Col2.Length != 0) hash ^= Col2.GetHashCode();
      if (HasMethod) hash ^= Method.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (Col1.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Col1);
      }
      if (Col2.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Col2);
      }
      if (HasMethod) {
        output.WriteRawTag(34);
        output.WriteString(Method);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (Col1.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Col1);
      }
      if (Col2.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Col2);
      }
      if (HasMethod) {
        output.WriteRawTag(34);
        output.WriteString(Method);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      if (Col1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Col1);
      }
      if (Col2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Col2);
      }
      if (HasMethod) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Method);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(StatCorr other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      if (other.Col1.Length != 0) {
        Col1 = other.Col1;
      }
      if (other.Col2.Length != 0) {
        Col2 = other.Col2;
      }
      if (other.HasMethod) {
        Method = other.Method;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            Col1 = input.ReadString();
            break;
          }
          case 26: {
            Col2 = input.ReadString();
            break;
          }
          case 34: {
            Method = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            Col1 = input.ReadString();
            break;
          }
          case 26: {
            Col2 = input.ReadString();
            break;
          }
          case 34: {
            Method = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Calculates the approximate quantiles of numerical columns of a DataFrame.
  /// It will invoke 'Dataset.stat.approxQuantile' (same as 'StatFunctions.approxQuantile')
  /// to compute the results.
  /// </summary>
  public sealed partial class StatApproxQuantile : pb::IMessage<StatApproxQuantile>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StatApproxQuantile> _parser = new pb::MessageParser<StatApproxQuantile>(() => new StatApproxQuantile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<StatApproxQuantile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StatApproxQuantile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StatApproxQuantile(StatApproxQuantile other) : this() {
      input_ = other.input_ != null ? other.input_.Clone() : null;
      cols_ = other.cols_.Clone();
      probabilities_ = other.probabilities_.Clone();
      relativeError_ = other.relativeError_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StatApproxQuantile Clone() {
      return new StatApproxQuantile(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) The input relation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "cols" field.</summary>
    public const int ColsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_cols_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> cols_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// (Required) The names of the numerical columns.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> Cols {
      get { return cols_; }
    }

    /// <summary>Field number for the "probabilities" field.</summary>
    public const int ProbabilitiesFieldNumber = 3;
    private static readonly pb::FieldCodec<double> _repeated_probabilities_codec
        = pb::FieldCodec.ForDouble(26);
    private readonly pbc::RepeatedField<double> probabilities_ = new pbc::RepeatedField<double>();
    /// <summary>
    /// (Required) A list of quantile probabilities.
    ///
    /// Each number must belong to [0, 1].
    /// For example 0 is the minimum, 0.5 is the median, 1 is the maximum.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> Probabilities {
      get { return probabilities_; }
    }

    /// <summary>Field number for the "relative_error" field.</summary>
    public const int RelativeErrorFieldNumber = 4;
    private double relativeError_;
    /// <summary>
    /// (Required) The relative target precision to achieve (greater than or equal to 0).
    ///
    /// If set to zero, the exact quantiles are computed, which could be very expensive.
    /// Note that values greater than 1 are accepted but give the same result as 1.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RelativeError {
      get { return relativeError_; }
      set {
        relativeError_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as StatApproxQuantile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(StatApproxQuantile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if(!cols_.Equals(other.cols_)) return false;
      if(!probabilities_.Equals(other.probabilities_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RelativeError, other.RelativeError)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      hash ^= cols_.GetHashCode();
      hash ^= probabilities_.GetHashCode();
      if (RelativeError != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RelativeError);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      cols_.WriteTo(output, _repeated_cols_codec);
      probabilities_.WriteTo(output, _repeated_probabilities_codec);
      if (RelativeError != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(RelativeError);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      cols_.WriteTo(ref output, _repeated_cols_codec);
      probabilities_.WriteTo(ref output, _repeated_probabilities_codec);
      if (RelativeError != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(RelativeError);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      size += cols_.CalculateSize(_repeated_cols_codec);
      size += probabilities_.CalculateSize(_repeated_probabilities_codec);
      if (RelativeError != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(StatApproxQuantile other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      cols_.Add(other.cols_);
      probabilities_.Add(other.probabilities_);
      if (other.RelativeError != 0D) {
        RelativeError = other.RelativeError;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            cols_.AddEntriesFrom(input, _repeated_cols_codec);
            break;
          }
          case 26:
          case 25: {
            probabilities_.AddEntriesFrom(input, _repeated_probabilities_codec);
            break;
          }
          case 33: {
            RelativeError = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            cols_.AddEntriesFrom(ref input, _repeated_cols_codec);
            break;
          }
          case 26:
          case 25: {
            probabilities_.AddEntriesFrom(ref input, _repeated_probabilities_codec);
            break;
          }
          case 33: {
            RelativeError = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Finding frequent items for columns, possibly with false positives.
  /// It will invoke 'Dataset.stat.freqItems' (same as 'StatFunctions.freqItems')
  /// to compute the results.
  /// </summary>
  public sealed partial class StatFreqItems : pb::IMessage<StatFreqItems>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StatFreqItems> _parser = new pb::MessageParser<StatFreqItems>(() => new StatFreqItems());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<StatFreqItems> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StatFreqItems() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StatFreqItems(StatFreqItems other) : this() {
      _hasBits0 = other._hasBits0;
      input_ = other.input_ != null ? other.input_.Clone() : null;
      cols_ = other.cols_.Clone();
      support_ = other.support_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StatFreqItems Clone() {
      return new StatFreqItems(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) The input relation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "cols" field.</summary>
    public const int ColsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_cols_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> cols_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// (Required) The names of the columns to search frequent items in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> Cols {
      get { return cols_; }
    }

    /// <summary>Field number for the "support" field.</summary>
    public const int SupportFieldNumber = 3;
    private readonly static double SupportDefaultValue = 0D;

    private double support_;
    /// <summary>
    /// (Optional) The minimum frequency for an item to be considered `frequent`.
    /// Should be greater than 1e-4.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Support {
      get { if ((_hasBits0 & 1) != 0) { return support_; } else { return SupportDefaultValue; } }
      set {
        _hasBits0 |= 1;
        support_ = value;
      }
    }
    /// <summary>Gets whether the "support" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSupport {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "support" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSupport() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as StatFreqItems);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(StatFreqItems other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if(!cols_.Equals(other.cols_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Support, other.Support)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      hash ^= cols_.GetHashCode();
      if (HasSupport) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Support);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      cols_.WriteTo(output, _repeated_cols_codec);
      if (HasSupport) {
        output.WriteRawTag(25);
        output.WriteDouble(Support);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      cols_.WriteTo(ref output, _repeated_cols_codec);
      if (HasSupport) {
        output.WriteRawTag(25);
        output.WriteDouble(Support);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      size += cols_.CalculateSize(_repeated_cols_codec);
      if (HasSupport) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(StatFreqItems other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      cols_.Add(other.cols_);
      if (other.HasSupport) {
        Support = other.Support;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            cols_.AddEntriesFrom(input, _repeated_cols_codec);
            break;
          }
          case 25: {
            Support = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            cols_.AddEntriesFrom(ref input, _repeated_cols_codec);
            break;
          }
          case 25: {
            Support = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Returns a stratified sample without replacement based on the fraction
  /// given on each stratum.
  /// It will invoke 'Dataset.stat.freqItems' (same as 'StatFunctions.freqItems')
  /// to compute the results.
  /// </summary>
  public sealed partial class StatSampleBy : pb::IMessage<StatSampleBy>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StatSampleBy> _parser = new pb::MessageParser<StatSampleBy>(() => new StatSampleBy());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<StatSampleBy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StatSampleBy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StatSampleBy(StatSampleBy other) : this() {
      _hasBits0 = other._hasBits0;
      input_ = other.input_ != null ? other.input_.Clone() : null;
      col_ = other.col_ != null ? other.col_.Clone() : null;
      fractions_ = other.fractions_.Clone();
      seed_ = other.seed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StatSampleBy Clone() {
      return new StatSampleBy(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) The input relation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "col" field.</summary>
    public const int ColFieldNumber = 2;
    private global::Spark.Connect.Expression col_;
    /// <summary>
    /// (Required) The column that defines strata.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Expression Col {
      get { return col_; }
      set {
        col_ = value;
      }
    }

    /// <summary>Field number for the "fractions" field.</summary>
    public const int FractionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Spark.Connect.StatSampleBy.Types.Fraction> _repeated_fractions_codec
        = pb::FieldCodec.ForMessage(26, global::Spark.Connect.StatSampleBy.Types.Fraction.Parser);
    private readonly pbc::RepeatedField<global::Spark.Connect.StatSampleBy.Types.Fraction> fractions_ = new pbc::RepeatedField<global::Spark.Connect.StatSampleBy.Types.Fraction>();
    /// <summary>
    /// (Required) Sampling fraction for each stratum.
    ///
    /// If a stratum is not specified, we treat its fraction as zero.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Spark.Connect.StatSampleBy.Types.Fraction> Fractions {
      get { return fractions_; }
    }

    /// <summary>Field number for the "seed" field.</summary>
    public const int SeedFieldNumber = 5;
    private readonly static long SeedDefaultValue = 0L;

    private long seed_;
    /// <summary>
    /// (Optional) The random seed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Seed {
      get { if ((_hasBits0 & 1) != 0) { return seed_; } else { return SeedDefaultValue; } }
      set {
        _hasBits0 |= 1;
        seed_ = value;
      }
    }
    /// <summary>Gets whether the "seed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSeed {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "seed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSeed() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as StatSampleBy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(StatSampleBy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if (!object.Equals(Col, other.Col)) return false;
      if(!fractions_.Equals(other.fractions_)) return false;
      if (Seed != other.Seed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      if (col_ != null) hash ^= Col.GetHashCode();
      hash ^= fractions_.GetHashCode();
      if (HasSeed) hash ^= Seed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (col_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Col);
      }
      fractions_.WriteTo(output, _repeated_fractions_codec);
      if (HasSeed) {
        output.WriteRawTag(40);
        output.WriteInt64(Seed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (col_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Col);
      }
      fractions_.WriteTo(ref output, _repeated_fractions_codec);
      if (HasSeed) {
        output.WriteRawTag(40);
        output.WriteInt64(Seed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      if (col_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Col);
      }
      size += fractions_.CalculateSize(_repeated_fractions_codec);
      if (HasSeed) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Seed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(StatSampleBy other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      if (other.col_ != null) {
        if (col_ == null) {
          Col = new global::Spark.Connect.Expression();
        }
        Col.MergeFrom(other.Col);
      }
      fractions_.Add(other.fractions_);
      if (other.HasSeed) {
        Seed = other.Seed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            if (col_ == null) {
              Col = new global::Spark.Connect.Expression();
            }
            input.ReadMessage(Col);
            break;
          }
          case 26: {
            fractions_.AddEntriesFrom(input, _repeated_fractions_codec);
            break;
          }
          case 40: {
            Seed = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            if (col_ == null) {
              Col = new global::Spark.Connect.Expression();
            }
            input.ReadMessage(Col);
            break;
          }
          case 26: {
            fractions_.AddEntriesFrom(ref input, _repeated_fractions_codec);
            break;
          }
          case 40: {
            Seed = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the StatSampleBy message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class Fraction : pb::IMessage<Fraction>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Fraction> _parser = new pb::MessageParser<Fraction>(() => new Fraction());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Fraction> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spark.Connect.StatSampleBy.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Fraction() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Fraction(Fraction other) : this() {
          stratum_ = other.stratum_ != null ? other.stratum_.Clone() : null;
          fraction_ = other.fraction_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Fraction Clone() {
          return new Fraction(this);
        }

        /// <summary>Field number for the "stratum" field.</summary>
        public const int StratumFieldNumber = 1;
        private global::Spark.Connect.Expression.Types.Literal stratum_;
        /// <summary>
        /// (Required) The stratum.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spark.Connect.Expression.Types.Literal Stratum {
          get { return stratum_; }
          set {
            stratum_ = value;
          }
        }

        /// <summary>Field number for the "fraction" field.</summary>
        public const int Fraction_FieldNumber = 2;
        private double fraction_;
        /// <summary>
        /// (Required) The fraction value. Must be in [0, 1].
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Fraction_ {
          get { return fraction_; }
          set {
            fraction_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Fraction);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Fraction other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Stratum, other.Stratum)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Fraction_, other.Fraction_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (stratum_ != null) hash ^= Stratum.GetHashCode();
          if (Fraction_ != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Fraction_);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (stratum_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Stratum);
          }
          if (Fraction_ != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Fraction_);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (stratum_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Stratum);
          }
          if (Fraction_ != 0D) {
            output.WriteRawTag(17);
            output.WriteDouble(Fraction_);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (stratum_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stratum);
          }
          if (Fraction_ != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Fraction other) {
          if (other == null) {
            return;
          }
          if (other.stratum_ != null) {
            if (stratum_ == null) {
              Stratum = new global::Spark.Connect.Expression.Types.Literal();
            }
            Stratum.MergeFrom(other.Stratum);
          }
          if (other.Fraction_ != 0D) {
            Fraction_ = other.Fraction_;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (stratum_ == null) {
                  Stratum = new global::Spark.Connect.Expression.Types.Literal();
                }
                input.ReadMessage(Stratum);
                break;
              }
              case 17: {
                Fraction_ = input.ReadDouble();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (stratum_ == null) {
                  Stratum = new global::Spark.Connect.Expression.Types.Literal();
                }
                input.ReadMessage(Stratum);
                break;
              }
              case 17: {
                Fraction_ = input.ReadDouble();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// Replaces null values.
  /// It will invoke 'Dataset.na.fill' (same as 'DataFrameNaFunctions.fill') to compute the results.
  /// Following 3 parameter combinations are supported:
  ///  1, 'values' only contains 1 item, 'cols' is empty:
  ///    replaces null values in all type-compatible columns.
  ///  2, 'values' only contains 1 item, 'cols' is not empty:
  ///    replaces null values in specified columns.
  ///  3, 'values' contains more than 1 items, then 'cols' is required to have the same length:
  ///    replaces each specified column with corresponding value.
  /// </summary>
  public sealed partial class NAFill : pb::IMessage<NAFill>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NAFill> _parser = new pb::MessageParser<NAFill>(() => new NAFill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<NAFill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NAFill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NAFill(NAFill other) : this() {
      input_ = other.input_ != null ? other.input_.Clone() : null;
      cols_ = other.cols_.Clone();
      values_ = other.values_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NAFill Clone() {
      return new NAFill(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) The input relation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "cols" field.</summary>
    public const int ColsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_cols_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> cols_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// (Optional) Optional list of column names to consider.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> Cols {
      get { return cols_; }
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Spark.Connect.Expression.Types.Literal> _repeated_values_codec
        = pb::FieldCodec.ForMessage(26, global::Spark.Connect.Expression.Types.Literal.Parser);
    private readonly pbc::RepeatedField<global::Spark.Connect.Expression.Types.Literal> values_ = new pbc::RepeatedField<global::Spark.Connect.Expression.Types.Literal>();
    /// <summary>
    /// (Required) Values to replace null values with.
    ///
    /// Should contain at least 1 item.
    /// Only 4 data types are supported now: bool, long, double, string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Spark.Connect.Expression.Types.Literal> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as NAFill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(NAFill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if(!cols_.Equals(other.cols_)) return false;
      if(!values_.Equals(other.values_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      hash ^= cols_.GetHashCode();
      hash ^= values_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      cols_.WriteTo(output, _repeated_cols_codec);
      values_.WriteTo(output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      cols_.WriteTo(ref output, _repeated_cols_codec);
      values_.WriteTo(ref output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      size += cols_.CalculateSize(_repeated_cols_codec);
      size += values_.CalculateSize(_repeated_values_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(NAFill other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      cols_.Add(other.cols_);
      values_.Add(other.values_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            cols_.AddEntriesFrom(input, _repeated_cols_codec);
            break;
          }
          case 26: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            cols_.AddEntriesFrom(ref input, _repeated_cols_codec);
            break;
          }
          case 26: {
            values_.AddEntriesFrom(ref input, _repeated_values_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Drop rows containing null values.
  /// It will invoke 'Dataset.na.drop' (same as 'DataFrameNaFunctions.drop') to compute the results.
  /// </summary>
  public sealed partial class NADrop : pb::IMessage<NADrop>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NADrop> _parser = new pb::MessageParser<NADrop>(() => new NADrop());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<NADrop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NADrop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NADrop(NADrop other) : this() {
      _hasBits0 = other._hasBits0;
      input_ = other.input_ != null ? other.input_.Clone() : null;
      cols_ = other.cols_.Clone();
      minNonNulls_ = other.minNonNulls_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NADrop Clone() {
      return new NADrop(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) The input relation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "cols" field.</summary>
    public const int ColsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_cols_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> cols_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// (Optional) Optional list of column names to consider.
    ///
    /// When it is empty, all the columns in the input relation will be considered.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> Cols {
      get { return cols_; }
    }

    /// <summary>Field number for the "min_non_nulls" field.</summary>
    public const int MinNonNullsFieldNumber = 3;
    private readonly static int MinNonNullsDefaultValue = 0;

    private int minNonNulls_;
    /// <summary>
    /// (Optional) The minimum number of non-null and non-NaN values required to keep.
    ///
    /// When not set, it is equivalent to the number of considered columns, which means
    /// a row will be kept only if all columns are non-null.
    ///
    /// 'how' options ('all', 'any') can be easily converted to this field:
    ///   - 'all' -> set 'min_non_nulls' 1;
    ///   - 'any' -> keep 'min_non_nulls' unset;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MinNonNulls {
      get { if ((_hasBits0 & 1) != 0) { return minNonNulls_; } else { return MinNonNullsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        minNonNulls_ = value;
      }
    }
    /// <summary>Gets whether the "min_non_nulls" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinNonNulls {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "min_non_nulls" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinNonNulls() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as NADrop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(NADrop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if(!cols_.Equals(other.cols_)) return false;
      if (MinNonNulls != other.MinNonNulls) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      hash ^= cols_.GetHashCode();
      if (HasMinNonNulls) hash ^= MinNonNulls.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      cols_.WriteTo(output, _repeated_cols_codec);
      if (HasMinNonNulls) {
        output.WriteRawTag(24);
        output.WriteInt32(MinNonNulls);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      cols_.WriteTo(ref output, _repeated_cols_codec);
      if (HasMinNonNulls) {
        output.WriteRawTag(24);
        output.WriteInt32(MinNonNulls);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      size += cols_.CalculateSize(_repeated_cols_codec);
      if (HasMinNonNulls) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinNonNulls);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(NADrop other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      cols_.Add(other.cols_);
      if (other.HasMinNonNulls) {
        MinNonNulls = other.MinNonNulls;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            cols_.AddEntriesFrom(input, _repeated_cols_codec);
            break;
          }
          case 24: {
            MinNonNulls = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            cols_.AddEntriesFrom(ref input, _repeated_cols_codec);
            break;
          }
          case 24: {
            MinNonNulls = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Replaces old values with the corresponding values.
  /// It will invoke 'Dataset.na.replace' (same as 'DataFrameNaFunctions.replace')
  /// to compute the results.
  /// </summary>
  public sealed partial class NAReplace : pb::IMessage<NAReplace>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NAReplace> _parser = new pb::MessageParser<NAReplace>(() => new NAReplace());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<NAReplace> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NAReplace() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NAReplace(NAReplace other) : this() {
      input_ = other.input_ != null ? other.input_.Clone() : null;
      cols_ = other.cols_.Clone();
      replacements_ = other.replacements_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public NAReplace Clone() {
      return new NAReplace(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) The input relation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "cols" field.</summary>
    public const int ColsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_cols_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> cols_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// (Optional) List of column names to consider.
    ///
    /// When it is empty, all the type-compatible columns in the input relation will be considered.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> Cols {
      get { return cols_; }
    }

    /// <summary>Field number for the "replacements" field.</summary>
    public const int ReplacementsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Spark.Connect.NAReplace.Types.Replacement> _repeated_replacements_codec
        = pb::FieldCodec.ForMessage(26, global::Spark.Connect.NAReplace.Types.Replacement.Parser);
    private readonly pbc::RepeatedField<global::Spark.Connect.NAReplace.Types.Replacement> replacements_ = new pbc::RepeatedField<global::Spark.Connect.NAReplace.Types.Replacement>();
    /// <summary>
    /// (Optional) The value replacement mapping.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Spark.Connect.NAReplace.Types.Replacement> Replacements {
      get { return replacements_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as NAReplace);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(NAReplace other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if(!cols_.Equals(other.cols_)) return false;
      if(!replacements_.Equals(other.replacements_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      hash ^= cols_.GetHashCode();
      hash ^= replacements_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      cols_.WriteTo(output, _repeated_cols_codec);
      replacements_.WriteTo(output, _repeated_replacements_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      cols_.WriteTo(ref output, _repeated_cols_codec);
      replacements_.WriteTo(ref output, _repeated_replacements_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      size += cols_.CalculateSize(_repeated_cols_codec);
      size += replacements_.CalculateSize(_repeated_replacements_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(NAReplace other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      cols_.Add(other.cols_);
      replacements_.Add(other.replacements_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            cols_.AddEntriesFrom(input, _repeated_cols_codec);
            break;
          }
          case 26: {
            replacements_.AddEntriesFrom(input, _repeated_replacements_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            cols_.AddEntriesFrom(ref input, _repeated_cols_codec);
            break;
          }
          case 26: {
            replacements_.AddEntriesFrom(ref input, _repeated_replacements_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the NAReplace message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class Replacement : pb::IMessage<Replacement>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Replacement> _parser = new pb::MessageParser<Replacement>(() => new Replacement());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Replacement> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spark.Connect.NAReplace.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Replacement() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Replacement(Replacement other) : this() {
          oldValue_ = other.oldValue_ != null ? other.oldValue_.Clone() : null;
          newValue_ = other.newValue_ != null ? other.newValue_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Replacement Clone() {
          return new Replacement(this);
        }

        /// <summary>Field number for the "old_value" field.</summary>
        public const int OldValueFieldNumber = 1;
        private global::Spark.Connect.Expression.Types.Literal oldValue_;
        /// <summary>
        /// (Required) The old value.
        ///
        /// Only 4 data types are supported now: null, bool, double, string.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spark.Connect.Expression.Types.Literal OldValue {
          get { return oldValue_; }
          set {
            oldValue_ = value;
          }
        }

        /// <summary>Field number for the "new_value" field.</summary>
        public const int NewValueFieldNumber = 2;
        private global::Spark.Connect.Expression.Types.Literal newValue_;
        /// <summary>
        /// (Required) The new value.
        ///
        /// Should be of the same data type with the old value.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spark.Connect.Expression.Types.Literal NewValue {
          get { return newValue_; }
          set {
            newValue_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Replacement);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Replacement other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(OldValue, other.OldValue)) return false;
          if (!object.Equals(NewValue, other.NewValue)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (oldValue_ != null) hash ^= OldValue.GetHashCode();
          if (newValue_ != null) hash ^= NewValue.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (oldValue_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(OldValue);
          }
          if (newValue_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(NewValue);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (oldValue_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(OldValue);
          }
          if (newValue_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(NewValue);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (oldValue_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(OldValue);
          }
          if (newValue_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewValue);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Replacement other) {
          if (other == null) {
            return;
          }
          if (other.oldValue_ != null) {
            if (oldValue_ == null) {
              OldValue = new global::Spark.Connect.Expression.Types.Literal();
            }
            OldValue.MergeFrom(other.OldValue);
          }
          if (other.newValue_ != null) {
            if (newValue_ == null) {
              NewValue = new global::Spark.Connect.Expression.Types.Literal();
            }
            NewValue.MergeFrom(other.NewValue);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (oldValue_ == null) {
                  OldValue = new global::Spark.Connect.Expression.Types.Literal();
                }
                input.ReadMessage(OldValue);
                break;
              }
              case 18: {
                if (newValue_ == null) {
                  NewValue = new global::Spark.Connect.Expression.Types.Literal();
                }
                input.ReadMessage(NewValue);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (oldValue_ == null) {
                  OldValue = new global::Spark.Connect.Expression.Types.Literal();
                }
                input.ReadMessage(OldValue);
                break;
              }
              case 18: {
                if (newValue_ == null) {
                  NewValue = new global::Spark.Connect.Expression.Types.Literal();
                }
                input.ReadMessage(NewValue);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// Rename columns on the input relation by the same length of names.
  /// </summary>
  public sealed partial class ToDF : pb::IMessage<ToDF>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ToDF> _parser = new pb::MessageParser<ToDF>(() => new ToDF());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ToDF> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ToDF() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ToDF(ToDF other) : this() {
      input_ = other.input_ != null ? other.input_.Clone() : null;
      columnNames_ = other.columnNames_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ToDF Clone() {
      return new ToDF(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) The input relation of RenameColumnsBySameLengthNames.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "column_names" field.</summary>
    public const int ColumnNamesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_columnNames_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> columnNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// (Required)
    ///
    /// The number of columns of the input relation must be equal to the length
    /// of this field. If this is not true, an exception will be returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> ColumnNames {
      get { return columnNames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ToDF);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ToDF other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if(!columnNames_.Equals(other.columnNames_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      hash ^= columnNames_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      columnNames_.WriteTo(output, _repeated_columnNames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      columnNames_.WriteTo(ref output, _repeated_columnNames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      size += columnNames_.CalculateSize(_repeated_columnNames_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ToDF other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      columnNames_.Add(other.columnNames_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            columnNames_.AddEntriesFrom(input, _repeated_columnNames_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            columnNames_.AddEntriesFrom(ref input, _repeated_columnNames_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Rename columns on the input relation by a map with name to name mapping.
  /// </summary>
  public sealed partial class WithColumnsRenamed : pb::IMessage<WithColumnsRenamed>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WithColumnsRenamed> _parser = new pb::MessageParser<WithColumnsRenamed>(() => new WithColumnsRenamed());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<WithColumnsRenamed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WithColumnsRenamed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WithColumnsRenamed(WithColumnsRenamed other) : this() {
      input_ = other.input_ != null ? other.input_.Clone() : null;
      renameColumnsMap_ = other.renameColumnsMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WithColumnsRenamed Clone() {
      return new WithColumnsRenamed(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) The input relation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "rename_columns_map" field.</summary>
    public const int RenameColumnsMapFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_renameColumnsMap_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 18);
    private readonly pbc::MapField<string, string> renameColumnsMap_ = new pbc::MapField<string, string>();
    /// <summary>
    /// (Required)
    ///
    /// Renaming column names of input relation from A to B where A is the map key
    /// and B is the map value. This is a no-op if schema doesn't contain any A. It
    /// does not require that all input relation column names to present as keys.
    /// duplicated B are not allowed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<string, string> RenameColumnsMap {
      get { return renameColumnsMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as WithColumnsRenamed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(WithColumnsRenamed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if (!RenameColumnsMap.Equals(other.RenameColumnsMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      hash ^= RenameColumnsMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      renameColumnsMap_.WriteTo(output, _map_renameColumnsMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      renameColumnsMap_.WriteTo(ref output, _map_renameColumnsMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      size += renameColumnsMap_.CalculateSize(_map_renameColumnsMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(WithColumnsRenamed other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      renameColumnsMap_.MergeFrom(other.renameColumnsMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            renameColumnsMap_.AddEntriesFrom(input, _map_renameColumnsMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            renameColumnsMap_.AddEntriesFrom(ref input, _map_renameColumnsMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Adding columns or replacing the existing columns that have the same names.
  /// </summary>
  public sealed partial class WithColumns : pb::IMessage<WithColumns>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WithColumns> _parser = new pb::MessageParser<WithColumns>(() => new WithColumns());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<WithColumns> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WithColumns() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WithColumns(WithColumns other) : this() {
      input_ = other.input_ != null ? other.input_.Clone() : null;
      aliases_ = other.aliases_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WithColumns Clone() {
      return new WithColumns(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) The input relation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "aliases" field.</summary>
    public const int AliasesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Spark.Connect.Expression.Types.Alias> _repeated_aliases_codec
        = pb::FieldCodec.ForMessage(18, global::Spark.Connect.Expression.Types.Alias.Parser);
    private readonly pbc::RepeatedField<global::Spark.Connect.Expression.Types.Alias> aliases_ = new pbc::RepeatedField<global::Spark.Connect.Expression.Types.Alias>();
    /// <summary>
    /// (Required)
    ///
    /// Given a column name, apply the corresponding expression on the column. If column
    /// name exists in the input relation, then replace the column. If the column name
    /// does not exist in the input relation, then adds it as a new column.
    ///
    /// Only one name part is expected from each Expression.Alias.
    ///
    /// An exception is thrown when duplicated names are present in the mapping.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Spark.Connect.Expression.Types.Alias> Aliases {
      get { return aliases_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as WithColumns);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(WithColumns other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if(!aliases_.Equals(other.aliases_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      hash ^= aliases_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      aliases_.WriteTo(output, _repeated_aliases_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      aliases_.WriteTo(ref output, _repeated_aliases_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      size += aliases_.CalculateSize(_repeated_aliases_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(WithColumns other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      aliases_.Add(other.aliases_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            aliases_.AddEntriesFrom(input, _repeated_aliases_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            aliases_.AddEntriesFrom(ref input, _repeated_aliases_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Specify a hint over a relation. Hint should have a name and optional parameters.
  /// </summary>
  public sealed partial class Hint : pb::IMessage<Hint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Hint> _parser = new pb::MessageParser<Hint>(() => new Hint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Hint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Hint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Hint(Hint other) : this() {
      input_ = other.input_ != null ? other.input_.Clone() : null;
      name_ = other.name_;
      parameters_ = other.parameters_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Hint Clone() {
      return new Hint(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) The input relation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// (Required) Hint name.
    ///
    /// Supported Join hints include BROADCAST, MERGE, SHUFFLE_HASH, SHUFFLE_REPLICATE_NL.
    ///
    /// Supported partitioning hints include COALESCE, REPARTITION, REPARTITION_BY_RANGE.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parameters" field.</summary>
    public const int ParametersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Spark.Connect.Expression> _repeated_parameters_codec
        = pb::FieldCodec.ForMessage(26, global::Spark.Connect.Expression.Parser);
    private readonly pbc::RepeatedField<global::Spark.Connect.Expression> parameters_ = new pbc::RepeatedField<global::Spark.Connect.Expression>();
    /// <summary>
    /// (Optional) Hint parameters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Spark.Connect.Expression> Parameters {
      get { return parameters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Hint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Hint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if (Name != other.Name) return false;
      if(!parameters_.Equals(other.parameters_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= parameters_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      parameters_.WriteTo(output, _repeated_parameters_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      parameters_.WriteTo(ref output, _repeated_parameters_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += parameters_.CalculateSize(_repeated_parameters_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Hint other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      parameters_.Add(other.parameters_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            parameters_.AddEntriesFrom(input, _repeated_parameters_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            parameters_.AddEntriesFrom(ref input, _repeated_parameters_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Unpivot a DataFrame from wide format to long format, optionally leaving identifier columns set.
  /// </summary>
  public sealed partial class Unpivot : pb::IMessage<Unpivot>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Unpivot> _parser = new pb::MessageParser<Unpivot>(() => new Unpivot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Unpivot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Unpivot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Unpivot(Unpivot other) : this() {
      input_ = other.input_ != null ? other.input_.Clone() : null;
      ids_ = other.ids_.Clone();
      values_ = other.values_ != null ? other.values_.Clone() : null;
      variableColumnName_ = other.variableColumnName_;
      valueColumnName_ = other.valueColumnName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Unpivot Clone() {
      return new Unpivot(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) The input relation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Spark.Connect.Expression> _repeated_ids_codec
        = pb::FieldCodec.ForMessage(18, global::Spark.Connect.Expression.Parser);
    private readonly pbc::RepeatedField<global::Spark.Connect.Expression> ids_ = new pbc::RepeatedField<global::Spark.Connect.Expression>();
    /// <summary>
    /// (Required) Id columns.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Spark.Connect.Expression> Ids {
      get { return ids_; }
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 3;
    private global::Spark.Connect.Unpivot.Types.Values values_;
    /// <summary>
    /// (Optional) Value columns to unpivot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Unpivot.Types.Values Values {
      get { return values_; }
      set {
        values_ = value;
      }
    }

    /// <summary>Field number for the "variable_column_name" field.</summary>
    public const int VariableColumnNameFieldNumber = 4;
    private string variableColumnName_ = "";
    /// <summary>
    /// (Required) Name of the variable column.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string VariableColumnName {
      get { return variableColumnName_; }
      set {
        variableColumnName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value_column_name" field.</summary>
    public const int ValueColumnNameFieldNumber = 5;
    private string valueColumnName_ = "";
    /// <summary>
    /// (Required) Name of the value column.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ValueColumnName {
      get { return valueColumnName_; }
      set {
        valueColumnName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Unpivot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Unpivot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if(!ids_.Equals(other.ids_)) return false;
      if (!object.Equals(Values, other.Values)) return false;
      if (VariableColumnName != other.VariableColumnName) return false;
      if (ValueColumnName != other.ValueColumnName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      hash ^= ids_.GetHashCode();
      if (values_ != null) hash ^= Values.GetHashCode();
      if (VariableColumnName.Length != 0) hash ^= VariableColumnName.GetHashCode();
      if (ValueColumnName.Length != 0) hash ^= ValueColumnName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      ids_.WriteTo(output, _repeated_ids_codec);
      if (values_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Values);
      }
      if (VariableColumnName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(VariableColumnName);
      }
      if (ValueColumnName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ValueColumnName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      ids_.WriteTo(ref output, _repeated_ids_codec);
      if (values_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Values);
      }
      if (VariableColumnName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(VariableColumnName);
      }
      if (ValueColumnName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ValueColumnName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      size += ids_.CalculateSize(_repeated_ids_codec);
      if (values_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Values);
      }
      if (VariableColumnName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VariableColumnName);
      }
      if (ValueColumnName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ValueColumnName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Unpivot other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      ids_.Add(other.ids_);
      if (other.values_ != null) {
        if (values_ == null) {
          Values = new global::Spark.Connect.Unpivot.Types.Values();
        }
        Values.MergeFrom(other.Values);
      }
      if (other.VariableColumnName.Length != 0) {
        VariableColumnName = other.VariableColumnName;
      }
      if (other.ValueColumnName.Length != 0) {
        ValueColumnName = other.ValueColumnName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
          case 26: {
            if (values_ == null) {
              Values = new global::Spark.Connect.Unpivot.Types.Values();
            }
            input.ReadMessage(Values);
            break;
          }
          case 34: {
            VariableColumnName = input.ReadString();
            break;
          }
          case 42: {
            ValueColumnName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            ids_.AddEntriesFrom(ref input, _repeated_ids_codec);
            break;
          }
          case 26: {
            if (values_ == null) {
              Values = new global::Spark.Connect.Unpivot.Types.Values();
            }
            input.ReadMessage(Values);
            break;
          }
          case 34: {
            VariableColumnName = input.ReadString();
            break;
          }
          case 42: {
            ValueColumnName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Unpivot message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class Values : pb::IMessage<Values>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Values> _parser = new pb::MessageParser<Values>(() => new Values());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Values> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spark.Connect.Unpivot.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Values() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Values(Values other) : this() {
          values_ = other.values_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Values Clone() {
          return new Values(this);
        }

        /// <summary>Field number for the "values" field.</summary>
        public const int Values_FieldNumber = 1;
        private static readonly pb::FieldCodec<global::Spark.Connect.Expression> _repeated_values_codec
            = pb::FieldCodec.ForMessage(10, global::Spark.Connect.Expression.Parser);
        private readonly pbc::RepeatedField<global::Spark.Connect.Expression> values_ = new pbc::RepeatedField<global::Spark.Connect.Expression>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<global::Spark.Connect.Expression> Values_ {
          get { return values_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Values);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Values other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!values_.Equals(other.values_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= values_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          values_.WriteTo(output, _repeated_values_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          values_.WriteTo(ref output, _repeated_values_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          size += values_.CalculateSize(_repeated_values_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Values other) {
          if (other == null) {
            return;
          }
          values_.Add(other.values_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                values_.AddEntriesFrom(input, _repeated_values_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                values_.AddEntriesFrom(ref input, _repeated_values_codec);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class ToSchema : pb::IMessage<ToSchema>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ToSchema> _parser = new pb::MessageParser<ToSchema>(() => new ToSchema());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ToSchema> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ToSchema() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ToSchema(ToSchema other) : this() {
      input_ = other.input_ != null ? other.input_.Clone() : null;
      schema_ = other.schema_ != null ? other.schema_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ToSchema Clone() {
      return new ToSchema(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) The input relation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "schema" field.</summary>
    public const int SchemaFieldNumber = 2;
    private global::Spark.Connect.DataType schema_;
    /// <summary>
    /// (Required) The user provided schema.
    ///
    /// The Sever side will update the dataframe with this schema.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.DataType Schema {
      get { return schema_; }
      set {
        schema_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ToSchema);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ToSchema other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if (!object.Equals(Schema, other.Schema)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      if (schema_ != null) hash ^= Schema.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (schema_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Schema);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (schema_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Schema);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      if (schema_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Schema);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ToSchema other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      if (other.schema_ != null) {
        if (schema_ == null) {
          Schema = new global::Spark.Connect.DataType();
        }
        Schema.MergeFrom(other.Schema);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            if (schema_ == null) {
              Schema = new global::Spark.Connect.DataType();
            }
            input.ReadMessage(Schema);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            if (schema_ == null) {
              Schema = new global::Spark.Connect.DataType();
            }
            input.ReadMessage(Schema);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RepartitionByExpression : pb::IMessage<RepartitionByExpression>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RepartitionByExpression> _parser = new pb::MessageParser<RepartitionByExpression>(() => new RepartitionByExpression());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RepartitionByExpression> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RepartitionByExpression() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RepartitionByExpression(RepartitionByExpression other) : this() {
      _hasBits0 = other._hasBits0;
      input_ = other.input_ != null ? other.input_.Clone() : null;
      partitionExprs_ = other.partitionExprs_.Clone();
      numPartitions_ = other.numPartitions_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RepartitionByExpression Clone() {
      return new RepartitionByExpression(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) The input relation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "partition_exprs" field.</summary>
    public const int PartitionExprsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Spark.Connect.Expression> _repeated_partitionExprs_codec
        = pb::FieldCodec.ForMessage(18, global::Spark.Connect.Expression.Parser);
    private readonly pbc::RepeatedField<global::Spark.Connect.Expression> partitionExprs_ = new pbc::RepeatedField<global::Spark.Connect.Expression>();
    /// <summary>
    /// (Required) The partitioning expressions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Spark.Connect.Expression> PartitionExprs {
      get { return partitionExprs_; }
    }

    /// <summary>Field number for the "num_partitions" field.</summary>
    public const int NumPartitionsFieldNumber = 3;
    private readonly static int NumPartitionsDefaultValue = 0;

    private int numPartitions_;
    /// <summary>
    /// (Optional) number of partitions, must be positive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumPartitions {
      get { if ((_hasBits0 & 1) != 0) { return numPartitions_; } else { return NumPartitionsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        numPartitions_ = value;
      }
    }
    /// <summary>Gets whether the "num_partitions" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNumPartitions {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "num_partitions" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNumPartitions() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RepartitionByExpression);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RepartitionByExpression other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if(!partitionExprs_.Equals(other.partitionExprs_)) return false;
      if (NumPartitions != other.NumPartitions) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      hash ^= partitionExprs_.GetHashCode();
      if (HasNumPartitions) hash ^= NumPartitions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      partitionExprs_.WriteTo(output, _repeated_partitionExprs_codec);
      if (HasNumPartitions) {
        output.WriteRawTag(24);
        output.WriteInt32(NumPartitions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      partitionExprs_.WriteTo(ref output, _repeated_partitionExprs_codec);
      if (HasNumPartitions) {
        output.WriteRawTag(24);
        output.WriteInt32(NumPartitions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      size += partitionExprs_.CalculateSize(_repeated_partitionExprs_codec);
      if (HasNumPartitions) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumPartitions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RepartitionByExpression other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      partitionExprs_.Add(other.partitionExprs_);
      if (other.HasNumPartitions) {
        NumPartitions = other.NumPartitions;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            partitionExprs_.AddEntriesFrom(input, _repeated_partitionExprs_codec);
            break;
          }
          case 24: {
            NumPartitions = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            partitionExprs_.AddEntriesFrom(ref input, _repeated_partitionExprs_codec);
            break;
          }
          case 24: {
            NumPartitions = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MapPartitions : pb::IMessage<MapPartitions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MapPartitions> _parser = new pb::MessageParser<MapPartitions>(() => new MapPartitions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MapPartitions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MapPartitions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MapPartitions(MapPartitions other) : this() {
      input_ = other.input_ != null ? other.input_.Clone() : null;
      func_ = other.func_ != null ? other.func_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MapPartitions Clone() {
      return new MapPartitions(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) Input relation for a mapPartitions-equivalent API: mapInPandas, mapInArrow.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "func" field.</summary>
    public const int FuncFieldNumber = 2;
    private global::Spark.Connect.CommonInlineUserDefinedFunction func_;
    /// <summary>
    /// (Required) Input user-defined function.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.CommonInlineUserDefinedFunction Func {
      get { return func_; }
      set {
        func_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MapPartitions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MapPartitions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if (!object.Equals(Func, other.Func)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      if (func_ != null) hash ^= Func.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (func_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Func);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (func_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Func);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      if (func_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Func);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MapPartitions other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      if (other.func_ != null) {
        if (func_ == null) {
          Func = new global::Spark.Connect.CommonInlineUserDefinedFunction();
        }
        Func.MergeFrom(other.Func);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            if (func_ == null) {
              Func = new global::Spark.Connect.CommonInlineUserDefinedFunction();
            }
            input.ReadMessage(Func);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            if (func_ == null) {
              Func = new global::Spark.Connect.CommonInlineUserDefinedFunction();
            }
            input.ReadMessage(Func);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GroupMap : pb::IMessage<GroupMap>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GroupMap> _parser = new pb::MessageParser<GroupMap>(() => new GroupMap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GroupMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GroupMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GroupMap(GroupMap other) : this() {
      input_ = other.input_ != null ? other.input_.Clone() : null;
      groupingExpressions_ = other.groupingExpressions_.Clone();
      func_ = other.func_ != null ? other.func_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GroupMap Clone() {
      return new GroupMap(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) Input relation for Group Map API: apply, applyInPandas.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "grouping_expressions" field.</summary>
    public const int GroupingExpressionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Spark.Connect.Expression> _repeated_groupingExpressions_codec
        = pb::FieldCodec.ForMessage(18, global::Spark.Connect.Expression.Parser);
    private readonly pbc::RepeatedField<global::Spark.Connect.Expression> groupingExpressions_ = new pbc::RepeatedField<global::Spark.Connect.Expression>();
    /// <summary>
    /// (Required) Expressions for grouping keys.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Spark.Connect.Expression> GroupingExpressions {
      get { return groupingExpressions_; }
    }

    /// <summary>Field number for the "func" field.</summary>
    public const int FuncFieldNumber = 3;
    private global::Spark.Connect.CommonInlineUserDefinedFunction func_;
    /// <summary>
    /// (Required) Input user-defined function.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.CommonInlineUserDefinedFunction Func {
      get { return func_; }
      set {
        func_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GroupMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GroupMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if(!groupingExpressions_.Equals(other.groupingExpressions_)) return false;
      if (!object.Equals(Func, other.Func)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      hash ^= groupingExpressions_.GetHashCode();
      if (func_ != null) hash ^= Func.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      groupingExpressions_.WriteTo(output, _repeated_groupingExpressions_codec);
      if (func_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Func);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      groupingExpressions_.WriteTo(ref output, _repeated_groupingExpressions_codec);
      if (func_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Func);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      size += groupingExpressions_.CalculateSize(_repeated_groupingExpressions_codec);
      if (func_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Func);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GroupMap other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      groupingExpressions_.Add(other.groupingExpressions_);
      if (other.func_ != null) {
        if (func_ == null) {
          Func = new global::Spark.Connect.CommonInlineUserDefinedFunction();
        }
        Func.MergeFrom(other.Func);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            groupingExpressions_.AddEntriesFrom(input, _repeated_groupingExpressions_codec);
            break;
          }
          case 26: {
            if (func_ == null) {
              Func = new global::Spark.Connect.CommonInlineUserDefinedFunction();
            }
            input.ReadMessage(Func);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            groupingExpressions_.AddEntriesFrom(ref input, _repeated_groupingExpressions_codec);
            break;
          }
          case 26: {
            if (func_ == null) {
              Func = new global::Spark.Connect.CommonInlineUserDefinedFunction();
            }
            input.ReadMessage(Func);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CoGroupMap : pb::IMessage<CoGroupMap>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CoGroupMap> _parser = new pb::MessageParser<CoGroupMap>(() => new CoGroupMap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CoGroupMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CoGroupMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CoGroupMap(CoGroupMap other) : this() {
      input_ = other.input_ != null ? other.input_.Clone() : null;
      inputGroupingExpressions_ = other.inputGroupingExpressions_.Clone();
      other_ = other.other_ != null ? other.other_.Clone() : null;
      otherGroupingExpressions_ = other.otherGroupingExpressions_.Clone();
      func_ = other.func_ != null ? other.func_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CoGroupMap Clone() {
      return new CoGroupMap(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) One input relation for CoGroup Map API - applyInPandas.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "input_grouping_expressions" field.</summary>
    public const int InputGroupingExpressionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Spark.Connect.Expression> _repeated_inputGroupingExpressions_codec
        = pb::FieldCodec.ForMessage(18, global::Spark.Connect.Expression.Parser);
    private readonly pbc::RepeatedField<global::Spark.Connect.Expression> inputGroupingExpressions_ = new pbc::RepeatedField<global::Spark.Connect.Expression>();
    /// <summary>
    /// Expressions for grouping keys of the first input relation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Spark.Connect.Expression> InputGroupingExpressions {
      get { return inputGroupingExpressions_; }
    }

    /// <summary>Field number for the "other" field.</summary>
    public const int OtherFieldNumber = 3;
    private global::Spark.Connect.Relation other_;
    /// <summary>
    /// (Required) The other input relation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Other {
      get { return other_; }
      set {
        other_ = value;
      }
    }

    /// <summary>Field number for the "other_grouping_expressions" field.</summary>
    public const int OtherGroupingExpressionsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Spark.Connect.Expression> _repeated_otherGroupingExpressions_codec
        = pb::FieldCodec.ForMessage(34, global::Spark.Connect.Expression.Parser);
    private readonly pbc::RepeatedField<global::Spark.Connect.Expression> otherGroupingExpressions_ = new pbc::RepeatedField<global::Spark.Connect.Expression>();
    /// <summary>
    /// Expressions for grouping keys of the other input relation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Spark.Connect.Expression> OtherGroupingExpressions {
      get { return otherGroupingExpressions_; }
    }

    /// <summary>Field number for the "func" field.</summary>
    public const int FuncFieldNumber = 5;
    private global::Spark.Connect.CommonInlineUserDefinedFunction func_;
    /// <summary>
    /// (Required) Input user-defined function.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.CommonInlineUserDefinedFunction Func {
      get { return func_; }
      set {
        func_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CoGroupMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CoGroupMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if(!inputGroupingExpressions_.Equals(other.inputGroupingExpressions_)) return false;
      if (!object.Equals(Other, other.Other)) return false;
      if(!otherGroupingExpressions_.Equals(other.otherGroupingExpressions_)) return false;
      if (!object.Equals(Func, other.Func)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      hash ^= inputGroupingExpressions_.GetHashCode();
      if (other_ != null) hash ^= Other.GetHashCode();
      hash ^= otherGroupingExpressions_.GetHashCode();
      if (func_ != null) hash ^= Func.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      inputGroupingExpressions_.WriteTo(output, _repeated_inputGroupingExpressions_codec);
      if (other_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Other);
      }
      otherGroupingExpressions_.WriteTo(output, _repeated_otherGroupingExpressions_codec);
      if (func_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Func);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      inputGroupingExpressions_.WriteTo(ref output, _repeated_inputGroupingExpressions_codec);
      if (other_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Other);
      }
      otherGroupingExpressions_.WriteTo(ref output, _repeated_otherGroupingExpressions_codec);
      if (func_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Func);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      size += inputGroupingExpressions_.CalculateSize(_repeated_inputGroupingExpressions_codec);
      if (other_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Other);
      }
      size += otherGroupingExpressions_.CalculateSize(_repeated_otherGroupingExpressions_codec);
      if (func_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Func);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CoGroupMap other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      inputGroupingExpressions_.Add(other.inputGroupingExpressions_);
      if (other.other_ != null) {
        if (other_ == null) {
          Other = new global::Spark.Connect.Relation();
        }
        Other.MergeFrom(other.Other);
      }
      otherGroupingExpressions_.Add(other.otherGroupingExpressions_);
      if (other.func_ != null) {
        if (func_ == null) {
          Func = new global::Spark.Connect.CommonInlineUserDefinedFunction();
        }
        Func.MergeFrom(other.Func);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            inputGroupingExpressions_.AddEntriesFrom(input, _repeated_inputGroupingExpressions_codec);
            break;
          }
          case 26: {
            if (other_ == null) {
              Other = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Other);
            break;
          }
          case 34: {
            otherGroupingExpressions_.AddEntriesFrom(input, _repeated_otherGroupingExpressions_codec);
            break;
          }
          case 42: {
            if (func_ == null) {
              Func = new global::Spark.Connect.CommonInlineUserDefinedFunction();
            }
            input.ReadMessage(Func);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            inputGroupingExpressions_.AddEntriesFrom(ref input, _repeated_inputGroupingExpressions_codec);
            break;
          }
          case 26: {
            if (other_ == null) {
              Other = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Other);
            break;
          }
          case 34: {
            otherGroupingExpressions_.AddEntriesFrom(ref input, _repeated_otherGroupingExpressions_codec);
            break;
          }
          case 42: {
            if (func_ == null) {
              Func = new global::Spark.Connect.CommonInlineUserDefinedFunction();
            }
            input.ReadMessage(Func);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Collect arbitrary (named) metrics from a dataset.
  /// </summary>
  public sealed partial class CollectMetrics : pb::IMessage<CollectMetrics>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CollectMetrics> _parser = new pb::MessageParser<CollectMetrics>(() => new CollectMetrics());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CollectMetrics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CollectMetrics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CollectMetrics(CollectMetrics other) : this() {
      input_ = other.input_ != null ? other.input_.Clone() : null;
      name_ = other.name_;
      metrics_ = other.metrics_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CollectMetrics Clone() {
      return new CollectMetrics(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) The input relation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// (Required) Name of the metrics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metrics" field.</summary>
    public const int MetricsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Spark.Connect.Expression> _repeated_metrics_codec
        = pb::FieldCodec.ForMessage(26, global::Spark.Connect.Expression.Parser);
    private readonly pbc::RepeatedField<global::Spark.Connect.Expression> metrics_ = new pbc::RepeatedField<global::Spark.Connect.Expression>();
    /// <summary>
    /// (Required) The metric sequence.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Spark.Connect.Expression> Metrics {
      get { return metrics_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CollectMetrics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CollectMetrics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if (Name != other.Name) return false;
      if(!metrics_.Equals(other.metrics_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= metrics_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      metrics_.WriteTo(output, _repeated_metrics_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      metrics_.WriteTo(ref output, _repeated_metrics_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += metrics_.CalculateSize(_repeated_metrics_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CollectMetrics other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      metrics_.Add(other.metrics_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            metrics_.AddEntriesFrom(input, _repeated_metrics_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            metrics_.AddEntriesFrom(ref input, _repeated_metrics_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Parse : pb::IMessage<Parse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Parse> _parser = new pb::MessageParser<Parse>(() => new Parse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Parse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.RelationsReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Parse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Parse(Parse other) : this() {
      input_ = other.input_ != null ? other.input_.Clone() : null;
      format_ = other.format_;
      schema_ = other.schema_ != null ? other.schema_.Clone() : null;
      options_ = other.options_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Parse Clone() {
      return new Parse(this);
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 1;
    private global::Spark.Connect.Relation input_;
    /// <summary>
    /// (Required) Input relation to Parse. The input is expected to have single text column.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Relation Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "format" field.</summary>
    public const int FormatFieldNumber = 2;
    private global::Spark.Connect.Parse.Types.ParseFormat format_ = global::Spark.Connect.Parse.Types.ParseFormat.Unspecified;
    /// <summary>
    /// (Required) The expected format of the text.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Parse.Types.ParseFormat Format {
      get { return format_; }
      set {
        format_ = value;
      }
    }

    /// <summary>Field number for the "schema" field.</summary>
    public const int SchemaFieldNumber = 3;
    private global::Spark.Connect.DataType schema_;
    /// <summary>
    /// (Optional) DataType representing the schema. If not set, Spark will infer the schema.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.DataType Schema {
      get { return schema_; }
      set {
        schema_ = value;
      }
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 4;
    private static readonly pbc::MapField<string, string>.Codec _map_options_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 34);
    private readonly pbc::MapField<string, string> options_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Options for the csv/json parser. The map key is case insensitive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<string, string> Options {
      get { return options_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Parse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Parse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Input, other.Input)) return false;
      if (Format != other.Format) return false;
      if (!object.Equals(Schema, other.Schema)) return false;
      if (!Options.Equals(other.Options)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (input_ != null) hash ^= Input.GetHashCode();
      if (Format != global::Spark.Connect.Parse.Types.ParseFormat.Unspecified) hash ^= Format.GetHashCode();
      if (schema_ != null) hash ^= Schema.GetHashCode();
      hash ^= Options.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (Format != global::Spark.Connect.Parse.Types.ParseFormat.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Format);
      }
      if (schema_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Schema);
      }
      options_.WriteTo(output, _map_options_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (input_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Input);
      }
      if (Format != global::Spark.Connect.Parse.Types.ParseFormat.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Format);
      }
      if (schema_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Schema);
      }
      options_.WriteTo(ref output, _map_options_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      if (Format != global::Spark.Connect.Parse.Types.ParseFormat.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Format);
      }
      if (schema_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Schema);
      }
      size += options_.CalculateSize(_map_options_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Parse other) {
      if (other == null) {
        return;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          Input = new global::Spark.Connect.Relation();
        }
        Input.MergeFrom(other.Input);
      }
      if (other.Format != global::Spark.Connect.Parse.Types.ParseFormat.Unspecified) {
        Format = other.Format;
      }
      if (other.schema_ != null) {
        if (schema_ == null) {
          Schema = new global::Spark.Connect.DataType();
        }
        Schema.MergeFrom(other.Schema);
      }
      options_.MergeFrom(other.options_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 16: {
            Format = (global::Spark.Connect.Parse.Types.ParseFormat) input.ReadEnum();
            break;
          }
          case 26: {
            if (schema_ == null) {
              Schema = new global::Spark.Connect.DataType();
            }
            input.ReadMessage(Schema);
            break;
          }
          case 34: {
            options_.AddEntriesFrom(input, _map_options_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (input_ == null) {
              Input = new global::Spark.Connect.Relation();
            }
            input.ReadMessage(Input);
            break;
          }
          case 16: {
            Format = (global::Spark.Connect.Parse.Types.ParseFormat) input.ReadEnum();
            break;
          }
          case 26: {
            if (schema_ == null) {
              Schema = new global::Spark.Connect.DataType();
            }
            input.ReadMessage(Schema);
            break;
          }
          case 34: {
            options_.AddEntriesFrom(ref input, _map_options_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Parse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum ParseFormat {
        [pbr::OriginalName("PARSE_FORMAT_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("PARSE_FORMAT_CSV")] Csv = 1,
        [pbr::OriginalName("PARSE_FORMAT_JSON")] Json = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
