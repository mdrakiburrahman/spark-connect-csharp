// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: spark/connect/expressions.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Spark.Connect {

  /// <summary>Holder for reflection information generated from spark/connect/expressions.proto</summary>
  public static partial class ExpressionsReflection {

    #region Descriptor
    /// <summary>File descriptor for spark/connect/expressions.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ExpressionsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch9zcGFyay9jb25uZWN0L2V4cHJlc3Npb25zLnByb3RvEg1zcGFyay5jb25u",
            "ZWN0Ghlnb29nbGUvcHJvdG9idWYvYW55LnByb3RvGhlzcGFyay9jb25uZWN0",
            "L3R5cGVzLnByb3RvIokgCgpFeHByZXNzaW9uEjQKB2xpdGVyYWwYASABKAsy",
            "IS5zcGFyay5jb25uZWN0LkV4cHJlc3Npb24uTGl0ZXJhbEgAEk0KFHVucmVz",
            "b2x2ZWRfYXR0cmlidXRlGAIgASgLMi0uc3BhcmsuY29ubmVjdC5FeHByZXNz",
            "aW9uLlVucmVzb2x2ZWRBdHRyaWJ1dGVIABJLChN1bnJlc29sdmVkX2Z1bmN0",
            "aW9uGAMgASgLMiwuc3BhcmsuY29ubmVjdC5FeHByZXNzaW9uLlVucmVzb2x2",
            "ZWRGdW5jdGlvbkgAEkcKEWV4cHJlc3Npb25fc3RyaW5nGAQgASgLMiouc3Bh",
            "cmsuY29ubmVjdC5FeHByZXNzaW9uLkV4cHJlc3Npb25TdHJpbmdIABJDCg91",
            "bnJlc29sdmVkX3N0YXIYBSABKAsyKC5zcGFyay5jb25uZWN0LkV4cHJlc3Np",
            "b24uVW5yZXNvbHZlZFN0YXJIABIwCgVhbGlhcxgGIAEoCzIfLnNwYXJrLmNv",
            "bm5lY3QuRXhwcmVzc2lvbi5BbGlhc0gAEi4KBGNhc3QYByABKAsyHi5zcGFy",
            "ay5jb25uZWN0LkV4cHJlc3Npb24uQ2FzdEgAEkUKEHVucmVzb2x2ZWRfcmVn",
            "ZXgYCCABKAsyKS5zcGFyay5jb25uZWN0LkV4cHJlc3Npb24uVW5yZXNvbHZl",
            "ZFJlZ2V4SAASOQoKc29ydF9vcmRlchgJIAEoCzIjLnNwYXJrLmNvbm5lY3Qu",
            "RXhwcmVzc2lvbi5Tb3J0T3JkZXJIABJDCg9sYW1iZGFfZnVuY3Rpb24YCiAB",
            "KAsyKC5zcGFyay5jb25uZWN0LkV4cHJlc3Npb24uTGFtYmRhRnVuY3Rpb25I",
            "ABIyCgZ3aW5kb3cYCyABKAsyIC5zcGFyay5jb25uZWN0LkV4cHJlc3Npb24u",
            "V2luZG93SAASVAoYdW5yZXNvbHZlZF9leHRyYWN0X3ZhbHVlGAwgASgLMjAu",
            "c3BhcmsuY29ubmVjdC5FeHByZXNzaW9uLlVucmVzb2x2ZWRFeHRyYWN0VmFs",
            "dWVIABI/Cg11cGRhdGVfZmllbGRzGA0gASgLMiYuc3BhcmsuY29ubmVjdC5F",
            "eHByZXNzaW9uLlVwZGF0ZUZpZWxkc0gAEmMKIHVucmVzb2x2ZWRfbmFtZWRf",
            "bGFtYmRhX3ZhcmlhYmxlGA4gASgLMjcuc3BhcmsuY29ubmVjdC5FeHByZXNz",
            "aW9uLlVucmVzb2x2ZWROYW1lZExhbWJkYVZhcmlhYmxlSAASXQojY29tbW9u",
            "X2lubGluZV91c2VyX2RlZmluZWRfZnVuY3Rpb24YDyABKAsyLi5zcGFyay5j",
            "b25uZWN0LkNvbW1vbklubGluZVVzZXJEZWZpbmVkRnVuY3Rpb25IABIqCgll",
            "eHRlbnNpb24Y5wcgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueUgAGqIFCgZX",
            "aW5kb3cSMgoPd2luZG93X2Z1bmN0aW9uGAEgASgLMhkuc3BhcmsuY29ubmVj",
            "dC5FeHByZXNzaW9uEjEKDnBhcnRpdGlvbl9zcGVjGAIgAygLMhkuc3Bhcmsu",
            "Y29ubmVjdC5FeHByZXNzaW9uEjcKCm9yZGVyX3NwZWMYAyADKAsyIy5zcGFy",
            "ay5jb25uZWN0LkV4cHJlc3Npb24uU29ydE9yZGVyEkAKCmZyYW1lX3NwZWMY",
            "BCABKAsyLC5zcGFyay5jb25uZWN0LkV4cHJlc3Npb24uV2luZG93LldpbmRv",
            "d0ZyYW1lGrUDCgtXaW5kb3dGcmFtZRJKCgpmcmFtZV90eXBlGAEgASgOMjYu",
            "c3BhcmsuY29ubmVjdC5FeHByZXNzaW9uLldpbmRvdy5XaW5kb3dGcmFtZS5G",
            "cmFtZVR5cGUSSQoFbG93ZXIYAiABKAsyOi5zcGFyay5jb25uZWN0LkV4cHJl",
            "c3Npb24uV2luZG93LldpbmRvd0ZyYW1lLkZyYW1lQm91bmRhcnkSSQoFdXBw",
            "ZXIYAyABKAsyOi5zcGFyay5jb25uZWN0LkV4cHJlc3Npb24uV2luZG93Lldp",
            "bmRvd0ZyYW1lLkZyYW1lQm91bmRhcnkacwoNRnJhbWVCb3VuZGFyeRIVCgtj",
            "dXJyZW50X3JvdxgBIAEoCEgAEhMKCXVuYm91bmRlZBgCIAEoCEgAEioKBXZh",
            "bHVlGAMgASgLMhkuc3BhcmsuY29ubmVjdC5FeHByZXNzaW9uSABCCgoIYm91",
            "bmRhcnkiTwoJRnJhbWVUeXBlEhgKFEZSQU1FX1RZUEVfVU5ERUZJTkVEEAAS",
            "EgoORlJBTUVfVFlQRV9ST1cQARIUChBGUkFNRV9UWVBFX1JBTkdFEAIaiQMK",
            "CVNvcnRPcmRlchIoCgVjaGlsZBgBIAEoCzIZLnNwYXJrLmNvbm5lY3QuRXhw",
            "cmVzc2lvbhJECglkaXJlY3Rpb24YAiABKA4yMS5zcGFyay5jb25uZWN0LkV4",
            "cHJlc3Npb24uU29ydE9yZGVyLlNvcnREaXJlY3Rpb24SRwoNbnVsbF9vcmRl",
            "cmluZxgDIAEoDjIwLnNwYXJrLmNvbm5lY3QuRXhwcmVzc2lvbi5Tb3J0T3Jk",
            "ZXIuTnVsbE9yZGVyaW5nImwKDVNvcnREaXJlY3Rpb24SHgoaU09SVF9ESVJF",
            "Q1RJT05fVU5TUEVDSUZJRUQQABIcChhTT1JUX0RJUkVDVElPTl9BU0NFTkRJ",
            "TkcQARIdChlTT1JUX0RJUkVDVElPTl9ERVNDRU5ESU5HEAIiVQoMTnVsbE9y",
            "ZGVyaW5nEhoKFlNPUlRfTlVMTFNfVU5TUEVDSUZJRUQQABIUChBTT1JUX05V",
            "TExTX0ZJUlNUEAESEwoPU09SVF9OVUxMU19MQVNUEAIafAoEQ2FzdBInCgRl",
            "eHByGAEgASgLMhkuc3BhcmsuY29ubmVjdC5FeHByZXNzaW9uEicKBHR5cGUY",
            "AiABKAsyFy5zcGFyay5jb25uZWN0LkRhdGFUeXBlSAASEgoIdHlwZV9zdHIY",
            "AyABKAlIAEIOCgxjYXN0X3RvX3R5cGUatgYKB0xpdGVyYWwSJwoEbnVsbBgB",
            "IAEoCzIXLnNwYXJrLmNvbm5lY3QuRGF0YVR5cGVIABIQCgZiaW5hcnkYAiAB",
            "KAxIABIRCgdib29sZWFuGAMgASgISAASDgoEYnl0ZRgEIAEoBUgAEg8KBXNo",
            "b3J0GAUgASgFSAASEQoHaW50ZWdlchgGIAEoBUgAEg4KBGxvbmcYByABKANI",
            "ABIPCgVmbG9hdBgKIAEoAkgAEhAKBmRvdWJsZRgLIAEoAUgAEjwKB2RlY2lt",
            "YWwYDCABKAsyKS5zcGFyay5jb25uZWN0LkV4cHJlc3Npb24uTGl0ZXJhbC5E",
            "ZWNpbWFsSAASEAoGc3RyaW5nGA0gASgJSAASDgoEZGF0ZRgQIAEoBUgAEhMK",
            "CXRpbWVzdGFtcBgRIAEoA0gAEhcKDXRpbWVzdGFtcF9udHoYEiABKANIABJP",
            "ChFjYWxlbmRhcl9pbnRlcnZhbBgTIAEoCzIyLnNwYXJrLmNvbm5lY3QuRXhw",
            "cmVzc2lvbi5MaXRlcmFsLkNhbGVuZGFySW50ZXJ2YWxIABIdChN5ZWFyX21v",
            "bnRoX2ludGVydmFsGBQgASgFSAASGwoRZGF5X3RpbWVfaW50ZXJ2YWwYFSAB",
            "KANIABI4CgVhcnJheRgWIAEoCzInLnNwYXJrLmNvbm5lY3QuRXhwcmVzc2lv",
            "bi5MaXRlcmFsLkFycmF5SAAaXAoHRGVjaW1hbBINCgV2YWx1ZRgBIAEoCRIW",
            "CglwcmVjaXNpb24YAiABKAVIAIgBARISCgVzY2FsZRgDIAEoBUgBiAEBQgwK",
            "Cl9wcmVjaXNpb25CCAoGX3NjYWxlGkYKEENhbGVuZGFySW50ZXJ2YWwSDgoG",
            "bW9udGhzGAEgASgFEgwKBGRheXMYAiABKAUSFAoMbWljcm9zZWNvbmRzGAMg",
            "ASgDGmsKBUFycmF5Ei0KDGVsZW1lbnRfdHlwZRgBIAEoCzIXLnNwYXJrLmNv",
            "bm5lY3QuRGF0YVR5cGUSMwoIZWxlbWVudHMYAiADKAsyIS5zcGFyay5jb25u",
            "ZWN0LkV4cHJlc3Npb24uTGl0ZXJhbEIOCgxsaXRlcmFsX3R5cGUaVAoTVW5y",
            "ZXNvbHZlZEF0dHJpYnV0ZRIbChN1bnBhcnNlZF9pZGVudGlmaWVyGAEgASgJ",
            "EhQKB3BsYW5faWQYAiABKANIAIgBAUIKCghfcGxhbl9pZBqQAQoSVW5yZXNv",
            "bHZlZEZ1bmN0aW9uEhUKDWZ1bmN0aW9uX25hbWUYASABKAkSLAoJYXJndW1l",
            "bnRzGAIgAygLMhkuc3BhcmsuY29ubmVjdC5FeHByZXNzaW9uEhMKC2lzX2Rp",
            "c3RpbmN0GAMgASgIEiAKGGlzX3VzZXJfZGVmaW5lZF9mdW5jdGlvbhgEIAEo",
            "CBomChBFeHByZXNzaW9uU3RyaW5nEhIKCmV4cHJlc3Npb24YASABKAkaQgoO",
            "VW5yZXNvbHZlZFN0YXISHAoPdW5wYXJzZWRfdGFyZ2V0GAEgASgJSACIAQFC",
            "EgoQX3VucGFyc2VkX3RhcmdldBpFCg9VbnJlc29sdmVkUmVnZXgSEAoIY29s",
            "X25hbWUYASABKAkSFAoHcGxhbl9pZBgCIAEoA0gAiAEBQgoKCF9wbGFuX2lk",
            "GnEKFlVucmVzb2x2ZWRFeHRyYWN0VmFsdWUSKAoFY2hpbGQYASABKAsyGS5z",
            "cGFyay5jb25uZWN0LkV4cHJlc3Npb24SLQoKZXh0cmFjdGlvbhgCIAEoCzIZ",
            "LnNwYXJrLmNvbm5lY3QuRXhwcmVzc2lvbhqNAQoMVXBkYXRlRmllbGRzEjQK",
            "EXN0cnVjdF9leHByZXNzaW9uGAEgASgLMhkuc3BhcmsuY29ubmVjdC5FeHBy",
            "ZXNzaW9uEhIKCmZpZWxkX25hbWUYAiABKAkSMwoQdmFsdWVfZXhwcmVzc2lv",
            "bhgDIAEoCzIZLnNwYXJrLmNvbm5lY3QuRXhwcmVzc2lvbhpiCgVBbGlhcxIn",
            "CgRleHByGAEgASgLMhkuc3BhcmsuY29ubmVjdC5FeHByZXNzaW9uEgwKBG5h",
            "bWUYAiADKAkSFQoIbWV0YWRhdGEYAyABKAlIAIgBAUILCglfbWV0YWRhdGEa",
            "iQEKDkxhbWJkYUZ1bmN0aW9uEisKCGZ1bmN0aW9uGAEgASgLMhkuc3Bhcmsu",
            "Y29ubmVjdC5FeHByZXNzaW9uEkoKCWFyZ3VtZW50cxgCIAMoCzI3LnNwYXJr",
            "LmNvbm5lY3QuRXhwcmVzc2lvbi5VbnJlc29sdmVkTmFtZWRMYW1iZGFWYXJp",
            "YWJsZRozCh1VbnJlc29sdmVkTmFtZWRMYW1iZGFWYXJpYWJsZRISCgpuYW1l",
            "X3BhcnRzGAEgAygJQgsKCWV4cHJfdHlwZSKgAgofQ29tbW9uSW5saW5lVXNl",
            "ckRlZmluZWRGdW5jdGlvbhIVCg1mdW5jdGlvbl9uYW1lGAEgASgJEhUKDWRl",
            "dGVybWluaXN0aWMYAiABKAgSLAoJYXJndW1lbnRzGAMgAygLMhkuc3Bhcmsu",
            "Y29ubmVjdC5FeHByZXNzaW9uEi4KCnB5dGhvbl91ZGYYBCABKAsyGC5zcGFy",
            "ay5jb25uZWN0LlB5dGhvblVERkgAEjkKEHNjYWxhcl9zY2FsYV91ZGYYBSAB",
            "KAsyHS5zcGFyay5jb25uZWN0LlNjYWxhclNjYWxhVURGSAASKgoIamF2YV91",
            "ZGYYBiABKAsyFi5zcGFyay5jb25uZWN0LkphdmFVREZIAEIKCghmdW5jdGlv",
            "biJxCglQeXRob25VREYSLAoLb3V0cHV0X3R5cGUYASABKAsyFy5zcGFyay5j",
            "b25uZWN0LkRhdGFUeXBlEhEKCWV2YWxfdHlwZRgCIAEoBRIPCgdjb21tYW5k",
            "GAMgASgMEhIKCnB5dGhvbl92ZXIYBCABKAkijQEKDlNjYWxhclNjYWxhVURG",
            "Eg8KB3BheWxvYWQYASABKAwSKwoKaW5wdXRUeXBlcxgCIAMoCzIXLnNwYXJr",
            "LmNvbm5lY3QuRGF0YVR5cGUSKwoKb3V0cHV0VHlwZRgDIAEoCzIXLnNwYXJr",
            "LmNvbm5lY3QuRGF0YVR5cGUSEAoIbnVsbGFibGUYBCABKAgicwoHSmF2YVVE",
            "RhISCgpjbGFzc19uYW1lGAEgASgJEjEKC291dHB1dF90eXBlGAIgASgLMhcu",
            "c3BhcmsuY29ubmVjdC5EYXRhVHlwZUgAiAEBEhEKCWFnZ3JlZ2F0ZRgDIAEo",
            "CEIOCgxfb3V0cHV0X3R5cGVCIgoeb3JnLmFwYWNoZS5zcGFyay5jb25uZWN0",
            "LnByb3RvUAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, global::Spark.Connect.TypesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Expression), global::Spark.Connect.Expression.Parser, new[]{ "Literal", "UnresolvedAttribute", "UnresolvedFunction", "ExpressionString", "UnresolvedStar", "Alias", "Cast", "UnresolvedRegex", "SortOrder", "LambdaFunction", "Window", "UnresolvedExtractValue", "UpdateFields", "UnresolvedNamedLambdaVariable", "CommonInlineUserDefinedFunction", "Extension" }, new[]{ "ExprType" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Expression.Types.Window), global::Spark.Connect.Expression.Types.Window.Parser, new[]{ "WindowFunction", "PartitionSpec", "OrderSpec", "FrameSpec" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Expression.Types.Window.Types.WindowFrame), global::Spark.Connect.Expression.Types.Window.Types.WindowFrame.Parser, new[]{ "FrameType", "Lower", "Upper" }, null, new[]{ typeof(global::Spark.Connect.Expression.Types.Window.Types.WindowFrame.Types.FrameType) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Expression.Types.Window.Types.WindowFrame.Types.FrameBoundary), global::Spark.Connect.Expression.Types.Window.Types.WindowFrame.Types.FrameBoundary.Parser, new[]{ "CurrentRow", "Unbounded", "Value" }, new[]{ "Boundary" }, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Expression.Types.SortOrder), global::Spark.Connect.Expression.Types.SortOrder.Parser, new[]{ "Child", "Direction", "NullOrdering" }, null, new[]{ typeof(global::Spark.Connect.Expression.Types.SortOrder.Types.SortDirection), typeof(global::Spark.Connect.Expression.Types.SortOrder.Types.NullOrdering) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Expression.Types.Cast), global::Spark.Connect.Expression.Types.Cast.Parser, new[]{ "Expr", "Type", "TypeStr" }, new[]{ "CastToType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Expression.Types.Literal), global::Spark.Connect.Expression.Types.Literal.Parser, new[]{ "Null", "Binary", "Boolean", "Byte", "Short", "Integer", "Long", "Float", "Double", "Decimal", "String", "Date", "Timestamp", "TimestampNtz", "CalendarInterval", "YearMonthInterval", "DayTimeInterval", "Array" }, new[]{ "LiteralType" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Expression.Types.Literal.Types.Decimal), global::Spark.Connect.Expression.Types.Literal.Types.Decimal.Parser, new[]{ "Value", "Precision", "Scale" }, new[]{ "Precision", "Scale" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Expression.Types.Literal.Types.CalendarInterval), global::Spark.Connect.Expression.Types.Literal.Types.CalendarInterval.Parser, new[]{ "Months", "Days", "Microseconds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Expression.Types.Literal.Types.Array), global::Spark.Connect.Expression.Types.Literal.Types.Array.Parser, new[]{ "ElementType", "Elements" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Expression.Types.UnresolvedAttribute), global::Spark.Connect.Expression.Types.UnresolvedAttribute.Parser, new[]{ "UnparsedIdentifier", "PlanId" }, new[]{ "PlanId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Expression.Types.UnresolvedFunction), global::Spark.Connect.Expression.Types.UnresolvedFunction.Parser, new[]{ "FunctionName", "Arguments", "IsDistinct", "IsUserDefinedFunction" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Expression.Types.ExpressionString), global::Spark.Connect.Expression.Types.ExpressionString.Parser, new[]{ "Expression" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Expression.Types.UnresolvedStar), global::Spark.Connect.Expression.Types.UnresolvedStar.Parser, new[]{ "UnparsedTarget" }, new[]{ "UnparsedTarget" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Expression.Types.UnresolvedRegex), global::Spark.Connect.Expression.Types.UnresolvedRegex.Parser, new[]{ "ColName", "PlanId" }, new[]{ "PlanId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Expression.Types.UnresolvedExtractValue), global::Spark.Connect.Expression.Types.UnresolvedExtractValue.Parser, new[]{ "Child", "Extraction" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Expression.Types.UpdateFields), global::Spark.Connect.Expression.Types.UpdateFields.Parser, new[]{ "StructExpression", "FieldName", "ValueExpression" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Expression.Types.Alias), global::Spark.Connect.Expression.Types.Alias.Parser, new[]{ "Expr", "Name", "Metadata" }, new[]{ "Metadata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Expression.Types.LambdaFunction), global::Spark.Connect.Expression.Types.LambdaFunction.Parser, new[]{ "Function", "Arguments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.Expression.Types.UnresolvedNamedLambdaVariable), global::Spark.Connect.Expression.Types.UnresolvedNamedLambdaVariable.Parser, new[]{ "NameParts" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.CommonInlineUserDefinedFunction), global::Spark.Connect.CommonInlineUserDefinedFunction.Parser, new[]{ "FunctionName", "Deterministic", "Arguments", "PythonUdf", "ScalarScalaUdf", "JavaUdf" }, new[]{ "Function" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.PythonUDF), global::Spark.Connect.PythonUDF.Parser, new[]{ "OutputType", "EvalType", "Command", "PythonVer" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.ScalarScalaUDF), global::Spark.Connect.ScalarScalaUDF.Parser, new[]{ "Payload", "InputTypes", "OutputType", "Nullable" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Spark.Connect.JavaUDF), global::Spark.Connect.JavaUDF.Parser, new[]{ "ClassName", "OutputType", "Aggregate" }, new[]{ "OutputType" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Expression used to refer to fields, functions and similar. This can be used everywhere
  /// expressions in SQL appear.
  /// </summary>
  public sealed partial class Expression : pb::IMessage<Expression>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Expression> _parser = new pb::MessageParser<Expression>(() => new Expression());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Expression> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.ExpressionsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Expression() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Expression(Expression other) : this() {
      switch (other.ExprTypeCase) {
        case ExprTypeOneofCase.Literal:
          Literal = other.Literal.Clone();
          break;
        case ExprTypeOneofCase.UnresolvedAttribute:
          UnresolvedAttribute = other.UnresolvedAttribute.Clone();
          break;
        case ExprTypeOneofCase.UnresolvedFunction:
          UnresolvedFunction = other.UnresolvedFunction.Clone();
          break;
        case ExprTypeOneofCase.ExpressionString:
          ExpressionString = other.ExpressionString.Clone();
          break;
        case ExprTypeOneofCase.UnresolvedStar:
          UnresolvedStar = other.UnresolvedStar.Clone();
          break;
        case ExprTypeOneofCase.Alias:
          Alias = other.Alias.Clone();
          break;
        case ExprTypeOneofCase.Cast:
          Cast = other.Cast.Clone();
          break;
        case ExprTypeOneofCase.UnresolvedRegex:
          UnresolvedRegex = other.UnresolvedRegex.Clone();
          break;
        case ExprTypeOneofCase.SortOrder:
          SortOrder = other.SortOrder.Clone();
          break;
        case ExprTypeOneofCase.LambdaFunction:
          LambdaFunction = other.LambdaFunction.Clone();
          break;
        case ExprTypeOneofCase.Window:
          Window = other.Window.Clone();
          break;
        case ExprTypeOneofCase.UnresolvedExtractValue:
          UnresolvedExtractValue = other.UnresolvedExtractValue.Clone();
          break;
        case ExprTypeOneofCase.UpdateFields:
          UpdateFields = other.UpdateFields.Clone();
          break;
        case ExprTypeOneofCase.UnresolvedNamedLambdaVariable:
          UnresolvedNamedLambdaVariable = other.UnresolvedNamedLambdaVariable.Clone();
          break;
        case ExprTypeOneofCase.CommonInlineUserDefinedFunction:
          CommonInlineUserDefinedFunction = other.CommonInlineUserDefinedFunction.Clone();
          break;
        case ExprTypeOneofCase.Extension:
          Extension = other.Extension.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Expression Clone() {
      return new Expression(this);
    }

    /// <summary>Field number for the "literal" field.</summary>
    public const int LiteralFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Expression.Types.Literal Literal {
      get { return exprTypeCase_ == ExprTypeOneofCase.Literal ? (global::Spark.Connect.Expression.Types.Literal) exprType_ : null; }
      set {
        exprType_ = value;
        exprTypeCase_ = value == null ? ExprTypeOneofCase.None : ExprTypeOneofCase.Literal;
      }
    }

    /// <summary>Field number for the "unresolved_attribute" field.</summary>
    public const int UnresolvedAttributeFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Expression.Types.UnresolvedAttribute UnresolvedAttribute {
      get { return exprTypeCase_ == ExprTypeOneofCase.UnresolvedAttribute ? (global::Spark.Connect.Expression.Types.UnresolvedAttribute) exprType_ : null; }
      set {
        exprType_ = value;
        exprTypeCase_ = value == null ? ExprTypeOneofCase.None : ExprTypeOneofCase.UnresolvedAttribute;
      }
    }

    /// <summary>Field number for the "unresolved_function" field.</summary>
    public const int UnresolvedFunctionFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Expression.Types.UnresolvedFunction UnresolvedFunction {
      get { return exprTypeCase_ == ExprTypeOneofCase.UnresolvedFunction ? (global::Spark.Connect.Expression.Types.UnresolvedFunction) exprType_ : null; }
      set {
        exprType_ = value;
        exprTypeCase_ = value == null ? ExprTypeOneofCase.None : ExprTypeOneofCase.UnresolvedFunction;
      }
    }

    /// <summary>Field number for the "expression_string" field.</summary>
    public const int ExpressionStringFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Expression.Types.ExpressionString ExpressionString {
      get { return exprTypeCase_ == ExprTypeOneofCase.ExpressionString ? (global::Spark.Connect.Expression.Types.ExpressionString) exprType_ : null; }
      set {
        exprType_ = value;
        exprTypeCase_ = value == null ? ExprTypeOneofCase.None : ExprTypeOneofCase.ExpressionString;
      }
    }

    /// <summary>Field number for the "unresolved_star" field.</summary>
    public const int UnresolvedStarFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Expression.Types.UnresolvedStar UnresolvedStar {
      get { return exprTypeCase_ == ExprTypeOneofCase.UnresolvedStar ? (global::Spark.Connect.Expression.Types.UnresolvedStar) exprType_ : null; }
      set {
        exprType_ = value;
        exprTypeCase_ = value == null ? ExprTypeOneofCase.None : ExprTypeOneofCase.UnresolvedStar;
      }
    }

    /// <summary>Field number for the "alias" field.</summary>
    public const int AliasFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Expression.Types.Alias Alias {
      get { return exprTypeCase_ == ExprTypeOneofCase.Alias ? (global::Spark.Connect.Expression.Types.Alias) exprType_ : null; }
      set {
        exprType_ = value;
        exprTypeCase_ = value == null ? ExprTypeOneofCase.None : ExprTypeOneofCase.Alias;
      }
    }

    /// <summary>Field number for the "cast" field.</summary>
    public const int CastFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Expression.Types.Cast Cast {
      get { return exprTypeCase_ == ExprTypeOneofCase.Cast ? (global::Spark.Connect.Expression.Types.Cast) exprType_ : null; }
      set {
        exprType_ = value;
        exprTypeCase_ = value == null ? ExprTypeOneofCase.None : ExprTypeOneofCase.Cast;
      }
    }

    /// <summary>Field number for the "unresolved_regex" field.</summary>
    public const int UnresolvedRegexFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Expression.Types.UnresolvedRegex UnresolvedRegex {
      get { return exprTypeCase_ == ExprTypeOneofCase.UnresolvedRegex ? (global::Spark.Connect.Expression.Types.UnresolvedRegex) exprType_ : null; }
      set {
        exprType_ = value;
        exprTypeCase_ = value == null ? ExprTypeOneofCase.None : ExprTypeOneofCase.UnresolvedRegex;
      }
    }

    /// <summary>Field number for the "sort_order" field.</summary>
    public const int SortOrderFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Expression.Types.SortOrder SortOrder {
      get { return exprTypeCase_ == ExprTypeOneofCase.SortOrder ? (global::Spark.Connect.Expression.Types.SortOrder) exprType_ : null; }
      set {
        exprType_ = value;
        exprTypeCase_ = value == null ? ExprTypeOneofCase.None : ExprTypeOneofCase.SortOrder;
      }
    }

    /// <summary>Field number for the "lambda_function" field.</summary>
    public const int LambdaFunctionFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Expression.Types.LambdaFunction LambdaFunction {
      get { return exprTypeCase_ == ExprTypeOneofCase.LambdaFunction ? (global::Spark.Connect.Expression.Types.LambdaFunction) exprType_ : null; }
      set {
        exprType_ = value;
        exprTypeCase_ = value == null ? ExprTypeOneofCase.None : ExprTypeOneofCase.LambdaFunction;
      }
    }

    /// <summary>Field number for the "window" field.</summary>
    public const int WindowFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Expression.Types.Window Window {
      get { return exprTypeCase_ == ExprTypeOneofCase.Window ? (global::Spark.Connect.Expression.Types.Window) exprType_ : null; }
      set {
        exprType_ = value;
        exprTypeCase_ = value == null ? ExprTypeOneofCase.None : ExprTypeOneofCase.Window;
      }
    }

    /// <summary>Field number for the "unresolved_extract_value" field.</summary>
    public const int UnresolvedExtractValueFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Expression.Types.UnresolvedExtractValue UnresolvedExtractValue {
      get { return exprTypeCase_ == ExprTypeOneofCase.UnresolvedExtractValue ? (global::Spark.Connect.Expression.Types.UnresolvedExtractValue) exprType_ : null; }
      set {
        exprType_ = value;
        exprTypeCase_ = value == null ? ExprTypeOneofCase.None : ExprTypeOneofCase.UnresolvedExtractValue;
      }
    }

    /// <summary>Field number for the "update_fields" field.</summary>
    public const int UpdateFieldsFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Expression.Types.UpdateFields UpdateFields {
      get { return exprTypeCase_ == ExprTypeOneofCase.UpdateFields ? (global::Spark.Connect.Expression.Types.UpdateFields) exprType_ : null; }
      set {
        exprType_ = value;
        exprTypeCase_ = value == null ? ExprTypeOneofCase.None : ExprTypeOneofCase.UpdateFields;
      }
    }

    /// <summary>Field number for the "unresolved_named_lambda_variable" field.</summary>
    public const int UnresolvedNamedLambdaVariableFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.Expression.Types.UnresolvedNamedLambdaVariable UnresolvedNamedLambdaVariable {
      get { return exprTypeCase_ == ExprTypeOneofCase.UnresolvedNamedLambdaVariable ? (global::Spark.Connect.Expression.Types.UnresolvedNamedLambdaVariable) exprType_ : null; }
      set {
        exprType_ = value;
        exprTypeCase_ = value == null ? ExprTypeOneofCase.None : ExprTypeOneofCase.UnresolvedNamedLambdaVariable;
      }
    }

    /// <summary>Field number for the "common_inline_user_defined_function" field.</summary>
    public const int CommonInlineUserDefinedFunctionFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.CommonInlineUserDefinedFunction CommonInlineUserDefinedFunction {
      get { return exprTypeCase_ == ExprTypeOneofCase.CommonInlineUserDefinedFunction ? (global::Spark.Connect.CommonInlineUserDefinedFunction) exprType_ : null; }
      set {
        exprType_ = value;
        exprTypeCase_ = value == null ? ExprTypeOneofCase.None : ExprTypeOneofCase.CommonInlineUserDefinedFunction;
      }
    }

    /// <summary>Field number for the "extension" field.</summary>
    public const int ExtensionFieldNumber = 999;
    /// <summary>
    /// This field is used to mark extensions to the protocol. When plugins generate arbitrary
    /// relations they can add them here. During the planning the correct resolution is done.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Any Extension {
      get { return exprTypeCase_ == ExprTypeOneofCase.Extension ? (global::Google.Protobuf.WellKnownTypes.Any) exprType_ : null; }
      set {
        exprType_ = value;
        exprTypeCase_ = value == null ? ExprTypeOneofCase.None : ExprTypeOneofCase.Extension;
      }
    }

    private object exprType_;
    /// <summary>Enum of possible cases for the "expr_type" oneof.</summary>
    public enum ExprTypeOneofCase {
      None = 0,
      Literal = 1,
      UnresolvedAttribute = 2,
      UnresolvedFunction = 3,
      ExpressionString = 4,
      UnresolvedStar = 5,
      Alias = 6,
      Cast = 7,
      UnresolvedRegex = 8,
      SortOrder = 9,
      LambdaFunction = 10,
      Window = 11,
      UnresolvedExtractValue = 12,
      UpdateFields = 13,
      UnresolvedNamedLambdaVariable = 14,
      CommonInlineUserDefinedFunction = 15,
      Extension = 999,
    }
    private ExprTypeOneofCase exprTypeCase_ = ExprTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ExprTypeOneofCase ExprTypeCase {
      get { return exprTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExprType() {
      exprTypeCase_ = ExprTypeOneofCase.None;
      exprType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Expression);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Expression other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Literal, other.Literal)) return false;
      if (!object.Equals(UnresolvedAttribute, other.UnresolvedAttribute)) return false;
      if (!object.Equals(UnresolvedFunction, other.UnresolvedFunction)) return false;
      if (!object.Equals(ExpressionString, other.ExpressionString)) return false;
      if (!object.Equals(UnresolvedStar, other.UnresolvedStar)) return false;
      if (!object.Equals(Alias, other.Alias)) return false;
      if (!object.Equals(Cast, other.Cast)) return false;
      if (!object.Equals(UnresolvedRegex, other.UnresolvedRegex)) return false;
      if (!object.Equals(SortOrder, other.SortOrder)) return false;
      if (!object.Equals(LambdaFunction, other.LambdaFunction)) return false;
      if (!object.Equals(Window, other.Window)) return false;
      if (!object.Equals(UnresolvedExtractValue, other.UnresolvedExtractValue)) return false;
      if (!object.Equals(UpdateFields, other.UpdateFields)) return false;
      if (!object.Equals(UnresolvedNamedLambdaVariable, other.UnresolvedNamedLambdaVariable)) return false;
      if (!object.Equals(CommonInlineUserDefinedFunction, other.CommonInlineUserDefinedFunction)) return false;
      if (!object.Equals(Extension, other.Extension)) return false;
      if (ExprTypeCase != other.ExprTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (exprTypeCase_ == ExprTypeOneofCase.Literal) hash ^= Literal.GetHashCode();
      if (exprTypeCase_ == ExprTypeOneofCase.UnresolvedAttribute) hash ^= UnresolvedAttribute.GetHashCode();
      if (exprTypeCase_ == ExprTypeOneofCase.UnresolvedFunction) hash ^= UnresolvedFunction.GetHashCode();
      if (exprTypeCase_ == ExprTypeOneofCase.ExpressionString) hash ^= ExpressionString.GetHashCode();
      if (exprTypeCase_ == ExprTypeOneofCase.UnresolvedStar) hash ^= UnresolvedStar.GetHashCode();
      if (exprTypeCase_ == ExprTypeOneofCase.Alias) hash ^= Alias.GetHashCode();
      if (exprTypeCase_ == ExprTypeOneofCase.Cast) hash ^= Cast.GetHashCode();
      if (exprTypeCase_ == ExprTypeOneofCase.UnresolvedRegex) hash ^= UnresolvedRegex.GetHashCode();
      if (exprTypeCase_ == ExprTypeOneofCase.SortOrder) hash ^= SortOrder.GetHashCode();
      if (exprTypeCase_ == ExprTypeOneofCase.LambdaFunction) hash ^= LambdaFunction.GetHashCode();
      if (exprTypeCase_ == ExprTypeOneofCase.Window) hash ^= Window.GetHashCode();
      if (exprTypeCase_ == ExprTypeOneofCase.UnresolvedExtractValue) hash ^= UnresolvedExtractValue.GetHashCode();
      if (exprTypeCase_ == ExprTypeOneofCase.UpdateFields) hash ^= UpdateFields.GetHashCode();
      if (exprTypeCase_ == ExprTypeOneofCase.UnresolvedNamedLambdaVariable) hash ^= UnresolvedNamedLambdaVariable.GetHashCode();
      if (exprTypeCase_ == ExprTypeOneofCase.CommonInlineUserDefinedFunction) hash ^= CommonInlineUserDefinedFunction.GetHashCode();
      if (exprTypeCase_ == ExprTypeOneofCase.Extension) hash ^= Extension.GetHashCode();
      hash ^= (int) exprTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (exprTypeCase_ == ExprTypeOneofCase.Literal) {
        output.WriteRawTag(10);
        output.WriteMessage(Literal);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.UnresolvedAttribute) {
        output.WriteRawTag(18);
        output.WriteMessage(UnresolvedAttribute);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.UnresolvedFunction) {
        output.WriteRawTag(26);
        output.WriteMessage(UnresolvedFunction);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.ExpressionString) {
        output.WriteRawTag(34);
        output.WriteMessage(ExpressionString);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.UnresolvedStar) {
        output.WriteRawTag(42);
        output.WriteMessage(UnresolvedStar);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.Alias) {
        output.WriteRawTag(50);
        output.WriteMessage(Alias);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.Cast) {
        output.WriteRawTag(58);
        output.WriteMessage(Cast);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.UnresolvedRegex) {
        output.WriteRawTag(66);
        output.WriteMessage(UnresolvedRegex);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.SortOrder) {
        output.WriteRawTag(74);
        output.WriteMessage(SortOrder);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.LambdaFunction) {
        output.WriteRawTag(82);
        output.WriteMessage(LambdaFunction);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.Window) {
        output.WriteRawTag(90);
        output.WriteMessage(Window);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.UnresolvedExtractValue) {
        output.WriteRawTag(98);
        output.WriteMessage(UnresolvedExtractValue);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.UpdateFields) {
        output.WriteRawTag(106);
        output.WriteMessage(UpdateFields);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.UnresolvedNamedLambdaVariable) {
        output.WriteRawTag(114);
        output.WriteMessage(UnresolvedNamedLambdaVariable);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.CommonInlineUserDefinedFunction) {
        output.WriteRawTag(122);
        output.WriteMessage(CommonInlineUserDefinedFunction);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.Extension) {
        output.WriteRawTag(186, 62);
        output.WriteMessage(Extension);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (exprTypeCase_ == ExprTypeOneofCase.Literal) {
        output.WriteRawTag(10);
        output.WriteMessage(Literal);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.UnresolvedAttribute) {
        output.WriteRawTag(18);
        output.WriteMessage(UnresolvedAttribute);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.UnresolvedFunction) {
        output.WriteRawTag(26);
        output.WriteMessage(UnresolvedFunction);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.ExpressionString) {
        output.WriteRawTag(34);
        output.WriteMessage(ExpressionString);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.UnresolvedStar) {
        output.WriteRawTag(42);
        output.WriteMessage(UnresolvedStar);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.Alias) {
        output.WriteRawTag(50);
        output.WriteMessage(Alias);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.Cast) {
        output.WriteRawTag(58);
        output.WriteMessage(Cast);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.UnresolvedRegex) {
        output.WriteRawTag(66);
        output.WriteMessage(UnresolvedRegex);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.SortOrder) {
        output.WriteRawTag(74);
        output.WriteMessage(SortOrder);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.LambdaFunction) {
        output.WriteRawTag(82);
        output.WriteMessage(LambdaFunction);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.Window) {
        output.WriteRawTag(90);
        output.WriteMessage(Window);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.UnresolvedExtractValue) {
        output.WriteRawTag(98);
        output.WriteMessage(UnresolvedExtractValue);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.UpdateFields) {
        output.WriteRawTag(106);
        output.WriteMessage(UpdateFields);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.UnresolvedNamedLambdaVariable) {
        output.WriteRawTag(114);
        output.WriteMessage(UnresolvedNamedLambdaVariable);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.CommonInlineUserDefinedFunction) {
        output.WriteRawTag(122);
        output.WriteMessage(CommonInlineUserDefinedFunction);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.Extension) {
        output.WriteRawTag(186, 62);
        output.WriteMessage(Extension);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (exprTypeCase_ == ExprTypeOneofCase.Literal) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Literal);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.UnresolvedAttribute) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnresolvedAttribute);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.UnresolvedFunction) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnresolvedFunction);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.ExpressionString) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExpressionString);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.UnresolvedStar) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnresolvedStar);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.Alias) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Alias);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.Cast) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cast);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.UnresolvedRegex) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnresolvedRegex);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.SortOrder) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SortOrder);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.LambdaFunction) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LambdaFunction);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.Window) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Window);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.UnresolvedExtractValue) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnresolvedExtractValue);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.UpdateFields) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateFields);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.UnresolvedNamedLambdaVariable) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnresolvedNamedLambdaVariable);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.CommonInlineUserDefinedFunction) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CommonInlineUserDefinedFunction);
      }
      if (exprTypeCase_ == ExprTypeOneofCase.Extension) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Extension);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Expression other) {
      if (other == null) {
        return;
      }
      switch (other.ExprTypeCase) {
        case ExprTypeOneofCase.Literal:
          if (Literal == null) {
            Literal = new global::Spark.Connect.Expression.Types.Literal();
          }
          Literal.MergeFrom(other.Literal);
          break;
        case ExprTypeOneofCase.UnresolvedAttribute:
          if (UnresolvedAttribute == null) {
            UnresolvedAttribute = new global::Spark.Connect.Expression.Types.UnresolvedAttribute();
          }
          UnresolvedAttribute.MergeFrom(other.UnresolvedAttribute);
          break;
        case ExprTypeOneofCase.UnresolvedFunction:
          if (UnresolvedFunction == null) {
            UnresolvedFunction = new global::Spark.Connect.Expression.Types.UnresolvedFunction();
          }
          UnresolvedFunction.MergeFrom(other.UnresolvedFunction);
          break;
        case ExprTypeOneofCase.ExpressionString:
          if (ExpressionString == null) {
            ExpressionString = new global::Spark.Connect.Expression.Types.ExpressionString();
          }
          ExpressionString.MergeFrom(other.ExpressionString);
          break;
        case ExprTypeOneofCase.UnresolvedStar:
          if (UnresolvedStar == null) {
            UnresolvedStar = new global::Spark.Connect.Expression.Types.UnresolvedStar();
          }
          UnresolvedStar.MergeFrom(other.UnresolvedStar);
          break;
        case ExprTypeOneofCase.Alias:
          if (Alias == null) {
            Alias = new global::Spark.Connect.Expression.Types.Alias();
          }
          Alias.MergeFrom(other.Alias);
          break;
        case ExprTypeOneofCase.Cast:
          if (Cast == null) {
            Cast = new global::Spark.Connect.Expression.Types.Cast();
          }
          Cast.MergeFrom(other.Cast);
          break;
        case ExprTypeOneofCase.UnresolvedRegex:
          if (UnresolvedRegex == null) {
            UnresolvedRegex = new global::Spark.Connect.Expression.Types.UnresolvedRegex();
          }
          UnresolvedRegex.MergeFrom(other.UnresolvedRegex);
          break;
        case ExprTypeOneofCase.SortOrder:
          if (SortOrder == null) {
            SortOrder = new global::Spark.Connect.Expression.Types.SortOrder();
          }
          SortOrder.MergeFrom(other.SortOrder);
          break;
        case ExprTypeOneofCase.LambdaFunction:
          if (LambdaFunction == null) {
            LambdaFunction = new global::Spark.Connect.Expression.Types.LambdaFunction();
          }
          LambdaFunction.MergeFrom(other.LambdaFunction);
          break;
        case ExprTypeOneofCase.Window:
          if (Window == null) {
            Window = new global::Spark.Connect.Expression.Types.Window();
          }
          Window.MergeFrom(other.Window);
          break;
        case ExprTypeOneofCase.UnresolvedExtractValue:
          if (UnresolvedExtractValue == null) {
            UnresolvedExtractValue = new global::Spark.Connect.Expression.Types.UnresolvedExtractValue();
          }
          UnresolvedExtractValue.MergeFrom(other.UnresolvedExtractValue);
          break;
        case ExprTypeOneofCase.UpdateFields:
          if (UpdateFields == null) {
            UpdateFields = new global::Spark.Connect.Expression.Types.UpdateFields();
          }
          UpdateFields.MergeFrom(other.UpdateFields);
          break;
        case ExprTypeOneofCase.UnresolvedNamedLambdaVariable:
          if (UnresolvedNamedLambdaVariable == null) {
            UnresolvedNamedLambdaVariable = new global::Spark.Connect.Expression.Types.UnresolvedNamedLambdaVariable();
          }
          UnresolvedNamedLambdaVariable.MergeFrom(other.UnresolvedNamedLambdaVariable);
          break;
        case ExprTypeOneofCase.CommonInlineUserDefinedFunction:
          if (CommonInlineUserDefinedFunction == null) {
            CommonInlineUserDefinedFunction = new global::Spark.Connect.CommonInlineUserDefinedFunction();
          }
          CommonInlineUserDefinedFunction.MergeFrom(other.CommonInlineUserDefinedFunction);
          break;
        case ExprTypeOneofCase.Extension:
          if (Extension == null) {
            Extension = new global::Google.Protobuf.WellKnownTypes.Any();
          }
          Extension.MergeFrom(other.Extension);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Spark.Connect.Expression.Types.Literal subBuilder = new global::Spark.Connect.Expression.Types.Literal();
            if (exprTypeCase_ == ExprTypeOneofCase.Literal) {
              subBuilder.MergeFrom(Literal);
            }
            input.ReadMessage(subBuilder);
            Literal = subBuilder;
            break;
          }
          case 18: {
            global::Spark.Connect.Expression.Types.UnresolvedAttribute subBuilder = new global::Spark.Connect.Expression.Types.UnresolvedAttribute();
            if (exprTypeCase_ == ExprTypeOneofCase.UnresolvedAttribute) {
              subBuilder.MergeFrom(UnresolvedAttribute);
            }
            input.ReadMessage(subBuilder);
            UnresolvedAttribute = subBuilder;
            break;
          }
          case 26: {
            global::Spark.Connect.Expression.Types.UnresolvedFunction subBuilder = new global::Spark.Connect.Expression.Types.UnresolvedFunction();
            if (exprTypeCase_ == ExprTypeOneofCase.UnresolvedFunction) {
              subBuilder.MergeFrom(UnresolvedFunction);
            }
            input.ReadMessage(subBuilder);
            UnresolvedFunction = subBuilder;
            break;
          }
          case 34: {
            global::Spark.Connect.Expression.Types.ExpressionString subBuilder = new global::Spark.Connect.Expression.Types.ExpressionString();
            if (exprTypeCase_ == ExprTypeOneofCase.ExpressionString) {
              subBuilder.MergeFrom(ExpressionString);
            }
            input.ReadMessage(subBuilder);
            ExpressionString = subBuilder;
            break;
          }
          case 42: {
            global::Spark.Connect.Expression.Types.UnresolvedStar subBuilder = new global::Spark.Connect.Expression.Types.UnresolvedStar();
            if (exprTypeCase_ == ExprTypeOneofCase.UnresolvedStar) {
              subBuilder.MergeFrom(UnresolvedStar);
            }
            input.ReadMessage(subBuilder);
            UnresolvedStar = subBuilder;
            break;
          }
          case 50: {
            global::Spark.Connect.Expression.Types.Alias subBuilder = new global::Spark.Connect.Expression.Types.Alias();
            if (exprTypeCase_ == ExprTypeOneofCase.Alias) {
              subBuilder.MergeFrom(Alias);
            }
            input.ReadMessage(subBuilder);
            Alias = subBuilder;
            break;
          }
          case 58: {
            global::Spark.Connect.Expression.Types.Cast subBuilder = new global::Spark.Connect.Expression.Types.Cast();
            if (exprTypeCase_ == ExprTypeOneofCase.Cast) {
              subBuilder.MergeFrom(Cast);
            }
            input.ReadMessage(subBuilder);
            Cast = subBuilder;
            break;
          }
          case 66: {
            global::Spark.Connect.Expression.Types.UnresolvedRegex subBuilder = new global::Spark.Connect.Expression.Types.UnresolvedRegex();
            if (exprTypeCase_ == ExprTypeOneofCase.UnresolvedRegex) {
              subBuilder.MergeFrom(UnresolvedRegex);
            }
            input.ReadMessage(subBuilder);
            UnresolvedRegex = subBuilder;
            break;
          }
          case 74: {
            global::Spark.Connect.Expression.Types.SortOrder subBuilder = new global::Spark.Connect.Expression.Types.SortOrder();
            if (exprTypeCase_ == ExprTypeOneofCase.SortOrder) {
              subBuilder.MergeFrom(SortOrder);
            }
            input.ReadMessage(subBuilder);
            SortOrder = subBuilder;
            break;
          }
          case 82: {
            global::Spark.Connect.Expression.Types.LambdaFunction subBuilder = new global::Spark.Connect.Expression.Types.LambdaFunction();
            if (exprTypeCase_ == ExprTypeOneofCase.LambdaFunction) {
              subBuilder.MergeFrom(LambdaFunction);
            }
            input.ReadMessage(subBuilder);
            LambdaFunction = subBuilder;
            break;
          }
          case 90: {
            global::Spark.Connect.Expression.Types.Window subBuilder = new global::Spark.Connect.Expression.Types.Window();
            if (exprTypeCase_ == ExprTypeOneofCase.Window) {
              subBuilder.MergeFrom(Window);
            }
            input.ReadMessage(subBuilder);
            Window = subBuilder;
            break;
          }
          case 98: {
            global::Spark.Connect.Expression.Types.UnresolvedExtractValue subBuilder = new global::Spark.Connect.Expression.Types.UnresolvedExtractValue();
            if (exprTypeCase_ == ExprTypeOneofCase.UnresolvedExtractValue) {
              subBuilder.MergeFrom(UnresolvedExtractValue);
            }
            input.ReadMessage(subBuilder);
            UnresolvedExtractValue = subBuilder;
            break;
          }
          case 106: {
            global::Spark.Connect.Expression.Types.UpdateFields subBuilder = new global::Spark.Connect.Expression.Types.UpdateFields();
            if (exprTypeCase_ == ExprTypeOneofCase.UpdateFields) {
              subBuilder.MergeFrom(UpdateFields);
            }
            input.ReadMessage(subBuilder);
            UpdateFields = subBuilder;
            break;
          }
          case 114: {
            global::Spark.Connect.Expression.Types.UnresolvedNamedLambdaVariable subBuilder = new global::Spark.Connect.Expression.Types.UnresolvedNamedLambdaVariable();
            if (exprTypeCase_ == ExprTypeOneofCase.UnresolvedNamedLambdaVariable) {
              subBuilder.MergeFrom(UnresolvedNamedLambdaVariable);
            }
            input.ReadMessage(subBuilder);
            UnresolvedNamedLambdaVariable = subBuilder;
            break;
          }
          case 122: {
            global::Spark.Connect.CommonInlineUserDefinedFunction subBuilder = new global::Spark.Connect.CommonInlineUserDefinedFunction();
            if (exprTypeCase_ == ExprTypeOneofCase.CommonInlineUserDefinedFunction) {
              subBuilder.MergeFrom(CommonInlineUserDefinedFunction);
            }
            input.ReadMessage(subBuilder);
            CommonInlineUserDefinedFunction = subBuilder;
            break;
          }
          case 7994: {
            global::Google.Protobuf.WellKnownTypes.Any subBuilder = new global::Google.Protobuf.WellKnownTypes.Any();
            if (exprTypeCase_ == ExprTypeOneofCase.Extension) {
              subBuilder.MergeFrom(Extension);
            }
            input.ReadMessage(subBuilder);
            Extension = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Spark.Connect.Expression.Types.Literal subBuilder = new global::Spark.Connect.Expression.Types.Literal();
            if (exprTypeCase_ == ExprTypeOneofCase.Literal) {
              subBuilder.MergeFrom(Literal);
            }
            input.ReadMessage(subBuilder);
            Literal = subBuilder;
            break;
          }
          case 18: {
            global::Spark.Connect.Expression.Types.UnresolvedAttribute subBuilder = new global::Spark.Connect.Expression.Types.UnresolvedAttribute();
            if (exprTypeCase_ == ExprTypeOneofCase.UnresolvedAttribute) {
              subBuilder.MergeFrom(UnresolvedAttribute);
            }
            input.ReadMessage(subBuilder);
            UnresolvedAttribute = subBuilder;
            break;
          }
          case 26: {
            global::Spark.Connect.Expression.Types.UnresolvedFunction subBuilder = new global::Spark.Connect.Expression.Types.UnresolvedFunction();
            if (exprTypeCase_ == ExprTypeOneofCase.UnresolvedFunction) {
              subBuilder.MergeFrom(UnresolvedFunction);
            }
            input.ReadMessage(subBuilder);
            UnresolvedFunction = subBuilder;
            break;
          }
          case 34: {
            global::Spark.Connect.Expression.Types.ExpressionString subBuilder = new global::Spark.Connect.Expression.Types.ExpressionString();
            if (exprTypeCase_ == ExprTypeOneofCase.ExpressionString) {
              subBuilder.MergeFrom(ExpressionString);
            }
            input.ReadMessage(subBuilder);
            ExpressionString = subBuilder;
            break;
          }
          case 42: {
            global::Spark.Connect.Expression.Types.UnresolvedStar subBuilder = new global::Spark.Connect.Expression.Types.UnresolvedStar();
            if (exprTypeCase_ == ExprTypeOneofCase.UnresolvedStar) {
              subBuilder.MergeFrom(UnresolvedStar);
            }
            input.ReadMessage(subBuilder);
            UnresolvedStar = subBuilder;
            break;
          }
          case 50: {
            global::Spark.Connect.Expression.Types.Alias subBuilder = new global::Spark.Connect.Expression.Types.Alias();
            if (exprTypeCase_ == ExprTypeOneofCase.Alias) {
              subBuilder.MergeFrom(Alias);
            }
            input.ReadMessage(subBuilder);
            Alias = subBuilder;
            break;
          }
          case 58: {
            global::Spark.Connect.Expression.Types.Cast subBuilder = new global::Spark.Connect.Expression.Types.Cast();
            if (exprTypeCase_ == ExprTypeOneofCase.Cast) {
              subBuilder.MergeFrom(Cast);
            }
            input.ReadMessage(subBuilder);
            Cast = subBuilder;
            break;
          }
          case 66: {
            global::Spark.Connect.Expression.Types.UnresolvedRegex subBuilder = new global::Spark.Connect.Expression.Types.UnresolvedRegex();
            if (exprTypeCase_ == ExprTypeOneofCase.UnresolvedRegex) {
              subBuilder.MergeFrom(UnresolvedRegex);
            }
            input.ReadMessage(subBuilder);
            UnresolvedRegex = subBuilder;
            break;
          }
          case 74: {
            global::Spark.Connect.Expression.Types.SortOrder subBuilder = new global::Spark.Connect.Expression.Types.SortOrder();
            if (exprTypeCase_ == ExprTypeOneofCase.SortOrder) {
              subBuilder.MergeFrom(SortOrder);
            }
            input.ReadMessage(subBuilder);
            SortOrder = subBuilder;
            break;
          }
          case 82: {
            global::Spark.Connect.Expression.Types.LambdaFunction subBuilder = new global::Spark.Connect.Expression.Types.LambdaFunction();
            if (exprTypeCase_ == ExprTypeOneofCase.LambdaFunction) {
              subBuilder.MergeFrom(LambdaFunction);
            }
            input.ReadMessage(subBuilder);
            LambdaFunction = subBuilder;
            break;
          }
          case 90: {
            global::Spark.Connect.Expression.Types.Window subBuilder = new global::Spark.Connect.Expression.Types.Window();
            if (exprTypeCase_ == ExprTypeOneofCase.Window) {
              subBuilder.MergeFrom(Window);
            }
            input.ReadMessage(subBuilder);
            Window = subBuilder;
            break;
          }
          case 98: {
            global::Spark.Connect.Expression.Types.UnresolvedExtractValue subBuilder = new global::Spark.Connect.Expression.Types.UnresolvedExtractValue();
            if (exprTypeCase_ == ExprTypeOneofCase.UnresolvedExtractValue) {
              subBuilder.MergeFrom(UnresolvedExtractValue);
            }
            input.ReadMessage(subBuilder);
            UnresolvedExtractValue = subBuilder;
            break;
          }
          case 106: {
            global::Spark.Connect.Expression.Types.UpdateFields subBuilder = new global::Spark.Connect.Expression.Types.UpdateFields();
            if (exprTypeCase_ == ExprTypeOneofCase.UpdateFields) {
              subBuilder.MergeFrom(UpdateFields);
            }
            input.ReadMessage(subBuilder);
            UpdateFields = subBuilder;
            break;
          }
          case 114: {
            global::Spark.Connect.Expression.Types.UnresolvedNamedLambdaVariable subBuilder = new global::Spark.Connect.Expression.Types.UnresolvedNamedLambdaVariable();
            if (exprTypeCase_ == ExprTypeOneofCase.UnresolvedNamedLambdaVariable) {
              subBuilder.MergeFrom(UnresolvedNamedLambdaVariable);
            }
            input.ReadMessage(subBuilder);
            UnresolvedNamedLambdaVariable = subBuilder;
            break;
          }
          case 122: {
            global::Spark.Connect.CommonInlineUserDefinedFunction subBuilder = new global::Spark.Connect.CommonInlineUserDefinedFunction();
            if (exprTypeCase_ == ExprTypeOneofCase.CommonInlineUserDefinedFunction) {
              subBuilder.MergeFrom(CommonInlineUserDefinedFunction);
            }
            input.ReadMessage(subBuilder);
            CommonInlineUserDefinedFunction = subBuilder;
            break;
          }
          case 7994: {
            global::Google.Protobuf.WellKnownTypes.Any subBuilder = new global::Google.Protobuf.WellKnownTypes.Any();
            if (exprTypeCase_ == ExprTypeOneofCase.Extension) {
              subBuilder.MergeFrom(Extension);
            }
            input.ReadMessage(subBuilder);
            Extension = subBuilder;
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Expression message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// Expression for the OVER clause or WINDOW clause.
      /// </summary>
      public sealed partial class Window : pb::IMessage<Window>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Window> _parser = new pb::MessageParser<Window>(() => new Window());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Window> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spark.Connect.Expression.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Window() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Window(Window other) : this() {
          windowFunction_ = other.windowFunction_ != null ? other.windowFunction_.Clone() : null;
          partitionSpec_ = other.partitionSpec_.Clone();
          orderSpec_ = other.orderSpec_.Clone();
          frameSpec_ = other.frameSpec_ != null ? other.frameSpec_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Window Clone() {
          return new Window(this);
        }

        /// <summary>Field number for the "window_function" field.</summary>
        public const int WindowFunctionFieldNumber = 1;
        private global::Spark.Connect.Expression windowFunction_;
        /// <summary>
        /// (Required) The window function.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spark.Connect.Expression WindowFunction {
          get { return windowFunction_; }
          set {
            windowFunction_ = value;
          }
        }

        /// <summary>Field number for the "partition_spec" field.</summary>
        public const int PartitionSpecFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Spark.Connect.Expression> _repeated_partitionSpec_codec
            = pb::FieldCodec.ForMessage(18, global::Spark.Connect.Expression.Parser);
        private readonly pbc::RepeatedField<global::Spark.Connect.Expression> partitionSpec_ = new pbc::RepeatedField<global::Spark.Connect.Expression>();
        /// <summary>
        /// (Optional) The way that input rows are partitioned.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<global::Spark.Connect.Expression> PartitionSpec {
          get { return partitionSpec_; }
        }

        /// <summary>Field number for the "order_spec" field.</summary>
        public const int OrderSpecFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Spark.Connect.Expression.Types.SortOrder> _repeated_orderSpec_codec
            = pb::FieldCodec.ForMessage(26, global::Spark.Connect.Expression.Types.SortOrder.Parser);
        private readonly pbc::RepeatedField<global::Spark.Connect.Expression.Types.SortOrder> orderSpec_ = new pbc::RepeatedField<global::Spark.Connect.Expression.Types.SortOrder>();
        /// <summary>
        /// (Optional) Ordering of rows in a partition.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<global::Spark.Connect.Expression.Types.SortOrder> OrderSpec {
          get { return orderSpec_; }
        }

        /// <summary>Field number for the "frame_spec" field.</summary>
        public const int FrameSpecFieldNumber = 4;
        private global::Spark.Connect.Expression.Types.Window.Types.WindowFrame frameSpec_;
        /// <summary>
        /// (Optional) Window frame in a partition.
        ///
        /// If not set, it will be treated as 'UnspecifiedFrame'.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spark.Connect.Expression.Types.Window.Types.WindowFrame FrameSpec {
          get { return frameSpec_; }
          set {
            frameSpec_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Window);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Window other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(WindowFunction, other.WindowFunction)) return false;
          if(!partitionSpec_.Equals(other.partitionSpec_)) return false;
          if(!orderSpec_.Equals(other.orderSpec_)) return false;
          if (!object.Equals(FrameSpec, other.FrameSpec)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (windowFunction_ != null) hash ^= WindowFunction.GetHashCode();
          hash ^= partitionSpec_.GetHashCode();
          hash ^= orderSpec_.GetHashCode();
          if (frameSpec_ != null) hash ^= FrameSpec.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (windowFunction_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(WindowFunction);
          }
          partitionSpec_.WriteTo(output, _repeated_partitionSpec_codec);
          orderSpec_.WriteTo(output, _repeated_orderSpec_codec);
          if (frameSpec_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(FrameSpec);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (windowFunction_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(WindowFunction);
          }
          partitionSpec_.WriteTo(ref output, _repeated_partitionSpec_codec);
          orderSpec_.WriteTo(ref output, _repeated_orderSpec_codec);
          if (frameSpec_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(FrameSpec);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (windowFunction_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(WindowFunction);
          }
          size += partitionSpec_.CalculateSize(_repeated_partitionSpec_codec);
          size += orderSpec_.CalculateSize(_repeated_orderSpec_codec);
          if (frameSpec_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(FrameSpec);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Window other) {
          if (other == null) {
            return;
          }
          if (other.windowFunction_ != null) {
            if (windowFunction_ == null) {
              WindowFunction = new global::Spark.Connect.Expression();
            }
            WindowFunction.MergeFrom(other.WindowFunction);
          }
          partitionSpec_.Add(other.partitionSpec_);
          orderSpec_.Add(other.orderSpec_);
          if (other.frameSpec_ != null) {
            if (frameSpec_ == null) {
              FrameSpec = new global::Spark.Connect.Expression.Types.Window.Types.WindowFrame();
            }
            FrameSpec.MergeFrom(other.FrameSpec);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (windowFunction_ == null) {
                  WindowFunction = new global::Spark.Connect.Expression();
                }
                input.ReadMessage(WindowFunction);
                break;
              }
              case 18: {
                partitionSpec_.AddEntriesFrom(input, _repeated_partitionSpec_codec);
                break;
              }
              case 26: {
                orderSpec_.AddEntriesFrom(input, _repeated_orderSpec_codec);
                break;
              }
              case 34: {
                if (frameSpec_ == null) {
                  FrameSpec = new global::Spark.Connect.Expression.Types.Window.Types.WindowFrame();
                }
                input.ReadMessage(FrameSpec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (windowFunction_ == null) {
                  WindowFunction = new global::Spark.Connect.Expression();
                }
                input.ReadMessage(WindowFunction);
                break;
              }
              case 18: {
                partitionSpec_.AddEntriesFrom(ref input, _repeated_partitionSpec_codec);
                break;
              }
              case 26: {
                orderSpec_.AddEntriesFrom(ref input, _repeated_orderSpec_codec);
                break;
              }
              case 34: {
                if (frameSpec_ == null) {
                  FrameSpec = new global::Spark.Connect.Expression.Types.Window.Types.WindowFrame();
                }
                input.ReadMessage(FrameSpec);
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the Window message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static partial class Types {
          /// <summary>
          /// The window frame
          /// </summary>
          public sealed partial class WindowFrame : pb::IMessage<WindowFrame>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<WindowFrame> _parser = new pb::MessageParser<WindowFrame>(() => new WindowFrame());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pb::MessageParser<WindowFrame> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Spark.Connect.Expression.Types.Window.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public WindowFrame() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public WindowFrame(WindowFrame other) : this() {
              frameType_ = other.frameType_;
              lower_ = other.lower_ != null ? other.lower_.Clone() : null;
              upper_ = other.upper_ != null ? other.upper_.Clone() : null;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public WindowFrame Clone() {
              return new WindowFrame(this);
            }

            /// <summary>Field number for the "frame_type" field.</summary>
            public const int FrameTypeFieldNumber = 1;
            private global::Spark.Connect.Expression.Types.Window.Types.WindowFrame.Types.FrameType frameType_ = global::Spark.Connect.Expression.Types.Window.Types.WindowFrame.Types.FrameType.Undefined;
            /// <summary>
            /// (Required) The type of the frame.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public global::Spark.Connect.Expression.Types.Window.Types.WindowFrame.Types.FrameType FrameType {
              get { return frameType_; }
              set {
                frameType_ = value;
              }
            }

            /// <summary>Field number for the "lower" field.</summary>
            public const int LowerFieldNumber = 2;
            private global::Spark.Connect.Expression.Types.Window.Types.WindowFrame.Types.FrameBoundary lower_;
            /// <summary>
            /// (Required) The lower bound of the frame.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public global::Spark.Connect.Expression.Types.Window.Types.WindowFrame.Types.FrameBoundary Lower {
              get { return lower_; }
              set {
                lower_ = value;
              }
            }

            /// <summary>Field number for the "upper" field.</summary>
            public const int UpperFieldNumber = 3;
            private global::Spark.Connect.Expression.Types.Window.Types.WindowFrame.Types.FrameBoundary upper_;
            /// <summary>
            /// (Required) The upper bound of the frame.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public global::Spark.Connect.Expression.Types.Window.Types.WindowFrame.Types.FrameBoundary Upper {
              get { return upper_; }
              set {
                upper_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override bool Equals(object other) {
              return Equals(other as WindowFrame);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool Equals(WindowFrame other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (FrameType != other.FrameType) return false;
              if (!object.Equals(Lower, other.Lower)) return false;
              if (!object.Equals(Upper, other.Upper)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override int GetHashCode() {
              int hash = 1;
              if (FrameType != global::Spark.Connect.Expression.Types.Window.Types.WindowFrame.Types.FrameType.Undefined) hash ^= FrameType.GetHashCode();
              if (lower_ != null) hash ^= Lower.GetHashCode();
              if (upper_ != null) hash ^= Upper.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (FrameType != global::Spark.Connect.Expression.Types.Window.Types.WindowFrame.Types.FrameType.Undefined) {
                output.WriteRawTag(8);
                output.WriteEnum((int) FrameType);
              }
              if (lower_ != null) {
                output.WriteRawTag(18);
                output.WriteMessage(Lower);
              }
              if (upper_ != null) {
                output.WriteRawTag(26);
                output.WriteMessage(Upper);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (FrameType != global::Spark.Connect.Expression.Types.Window.Types.WindowFrame.Types.FrameType.Undefined) {
                output.WriteRawTag(8);
                output.WriteEnum((int) FrameType);
              }
              if (lower_ != null) {
                output.WriteRawTag(18);
                output.WriteMessage(Lower);
              }
              if (upper_ != null) {
                output.WriteRawTag(26);
                output.WriteMessage(Upper);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public int CalculateSize() {
              int size = 0;
              if (FrameType != global::Spark.Connect.Expression.Types.Window.Types.WindowFrame.Types.FrameType.Undefined) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FrameType);
              }
              if (lower_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lower);
              }
              if (upper_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Upper);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(WindowFrame other) {
              if (other == null) {
                return;
              }
              if (other.FrameType != global::Spark.Connect.Expression.Types.Window.Types.WindowFrame.Types.FrameType.Undefined) {
                FrameType = other.FrameType;
              }
              if (other.lower_ != null) {
                if (lower_ == null) {
                  Lower = new global::Spark.Connect.Expression.Types.Window.Types.WindowFrame.Types.FrameBoundary();
                }
                Lower.MergeFrom(other.Lower);
              }
              if (other.upper_ != null) {
                if (upper_ == null) {
                  Upper = new global::Spark.Connect.Expression.Types.Window.Types.WindowFrame.Types.FrameBoundary();
                }
                Upper.MergeFrom(other.Upper);
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    FrameType = (global::Spark.Connect.Expression.Types.Window.Types.WindowFrame.Types.FrameType) input.ReadEnum();
                    break;
                  }
                  case 18: {
                    if (lower_ == null) {
                      Lower = new global::Spark.Connect.Expression.Types.Window.Types.WindowFrame.Types.FrameBoundary();
                    }
                    input.ReadMessage(Lower);
                    break;
                  }
                  case 26: {
                    if (upper_ == null) {
                      Upper = new global::Spark.Connect.Expression.Types.Window.Types.WindowFrame.Types.FrameBoundary();
                    }
                    input.ReadMessage(Upper);
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 8: {
                    FrameType = (global::Spark.Connect.Expression.Types.Window.Types.WindowFrame.Types.FrameType) input.ReadEnum();
                    break;
                  }
                  case 18: {
                    if (lower_ == null) {
                      Lower = new global::Spark.Connect.Expression.Types.Window.Types.WindowFrame.Types.FrameBoundary();
                    }
                    input.ReadMessage(Lower);
                    break;
                  }
                  case 26: {
                    if (upper_ == null) {
                      Upper = new global::Spark.Connect.Expression.Types.Window.Types.WindowFrame.Types.FrameBoundary();
                    }
                    input.ReadMessage(Upper);
                    break;
                  }
                }
              }
            }
            #endif

            #region Nested types
            /// <summary>Container for nested types declared in the WindowFrame message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static partial class Types {
              public enum FrameType {
                [pbr::OriginalName("FRAME_TYPE_UNDEFINED")] Undefined = 0,
                /// <summary>
                /// RowFrame treats rows in a partition individually.
                /// </summary>
                [pbr::OriginalName("FRAME_TYPE_ROW")] Row = 1,
                /// <summary>
                /// RangeFrame treats rows in a partition as groups of peers.
                /// All rows having the same 'ORDER BY' ordering are considered as peers.
                /// </summary>
                [pbr::OriginalName("FRAME_TYPE_RANGE")] Range = 2,
              }

              public sealed partial class FrameBoundary : pb::IMessage<FrameBoundary>
              #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  , pb::IBufferMessage
              #endif
              {
                private static readonly pb::MessageParser<FrameBoundary> _parser = new pb::MessageParser<FrameBoundary>(() => new FrameBoundary());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public static pb::MessageParser<FrameBoundary> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Spark.Connect.Expression.Types.Window.Types.WindowFrame.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public FrameBoundary() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public FrameBoundary(FrameBoundary other) : this() {
                  switch (other.BoundaryCase) {
                    case BoundaryOneofCase.CurrentRow:
                      CurrentRow = other.CurrentRow;
                      break;
                    case BoundaryOneofCase.Unbounded:
                      Unbounded = other.Unbounded;
                      break;
                    case BoundaryOneofCase.Value:
                      Value = other.Value.Clone();
                      break;
                  }

                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public FrameBoundary Clone() {
                  return new FrameBoundary(this);
                }

                /// <summary>Field number for the "current_row" field.</summary>
                public const int CurrentRowFieldNumber = 1;
                /// <summary>
                /// CURRENT ROW boundary
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public bool CurrentRow {
                  get { return HasCurrentRow ? (bool) boundary_ : false; }
                  set {
                    boundary_ = value;
                    boundaryCase_ = BoundaryOneofCase.CurrentRow;
                  }
                }
                /// <summary>Gets whether the "current_row" field is set</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public bool HasCurrentRow {
                  get { return boundaryCase_ == BoundaryOneofCase.CurrentRow; }
                }
                /// <summary> Clears the value of the oneof if it's currently set to "current_row" </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public void ClearCurrentRow() {
                  if (HasCurrentRow) {
                    ClearBoundary();
                  }
                }

                /// <summary>Field number for the "unbounded" field.</summary>
                public const int UnboundedFieldNumber = 2;
                /// <summary>
                /// UNBOUNDED boundary.
                /// For lower bound, it will be converted to 'UnboundedPreceding'.
                /// for upper bound, it will be converted to 'UnboundedFollowing'.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public bool Unbounded {
                  get { return HasUnbounded ? (bool) boundary_ : false; }
                  set {
                    boundary_ = value;
                    boundaryCase_ = BoundaryOneofCase.Unbounded;
                  }
                }
                /// <summary>Gets whether the "unbounded" field is set</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public bool HasUnbounded {
                  get { return boundaryCase_ == BoundaryOneofCase.Unbounded; }
                }
                /// <summary> Clears the value of the oneof if it's currently set to "unbounded" </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public void ClearUnbounded() {
                  if (HasUnbounded) {
                    ClearBoundary();
                  }
                }

                /// <summary>Field number for the "value" field.</summary>
                public const int ValueFieldNumber = 3;
                /// <summary>
                /// This is an expression for future proofing. We are expecting literals on the server side.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public global::Spark.Connect.Expression Value {
                  get { return boundaryCase_ == BoundaryOneofCase.Value ? (global::Spark.Connect.Expression) boundary_ : null; }
                  set {
                    boundary_ = value;
                    boundaryCase_ = value == null ? BoundaryOneofCase.None : BoundaryOneofCase.Value;
                  }
                }

                private object boundary_;
                /// <summary>Enum of possible cases for the "boundary" oneof.</summary>
                public enum BoundaryOneofCase {
                  None = 0,
                  CurrentRow = 1,
                  Unbounded = 2,
                  Value = 3,
                }
                private BoundaryOneofCase boundaryCase_ = BoundaryOneofCase.None;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public BoundaryOneofCase BoundaryCase {
                  get { return boundaryCase_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public void ClearBoundary() {
                  boundaryCase_ = BoundaryOneofCase.None;
                  boundary_ = null;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public override bool Equals(object other) {
                  return Equals(other as FrameBoundary);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public bool Equals(FrameBoundary other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (CurrentRow != other.CurrentRow) return false;
                  if (Unbounded != other.Unbounded) return false;
                  if (!object.Equals(Value, other.Value)) return false;
                  if (BoundaryCase != other.BoundaryCase) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public override int GetHashCode() {
                  int hash = 1;
                  if (HasCurrentRow) hash ^= CurrentRow.GetHashCode();
                  if (HasUnbounded) hash ^= Unbounded.GetHashCode();
                  if (boundaryCase_ == BoundaryOneofCase.Value) hash ^= Value.GetHashCode();
                  hash ^= (int) boundaryCase_;
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public void WriteTo(pb::CodedOutputStream output) {
                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  output.WriteRawMessage(this);
                #else
                  if (HasCurrentRow) {
                    output.WriteRawTag(8);
                    output.WriteBool(CurrentRow);
                  }
                  if (HasUnbounded) {
                    output.WriteRawTag(16);
                    output.WriteBool(Unbounded);
                  }
                  if (boundaryCase_ == BoundaryOneofCase.Value) {
                    output.WriteRawTag(26);
                    output.WriteMessage(Value);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                #endif
                }

                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
                  if (HasCurrentRow) {
                    output.WriteRawTag(8);
                    output.WriteBool(CurrentRow);
                  }
                  if (HasUnbounded) {
                    output.WriteRawTag(16);
                    output.WriteBool(Unbounded);
                  }
                  if (boundaryCase_ == BoundaryOneofCase.Value) {
                    output.WriteRawTag(26);
                    output.WriteMessage(Value);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(ref output);
                  }
                }
                #endif

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public int CalculateSize() {
                  int size = 0;
                  if (HasCurrentRow) {
                    size += 1 + 1;
                  }
                  if (HasUnbounded) {
                    size += 1 + 1;
                  }
                  if (boundaryCase_ == BoundaryOneofCase.Value) {
                    size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public void MergeFrom(FrameBoundary other) {
                  if (other == null) {
                    return;
                  }
                  switch (other.BoundaryCase) {
                    case BoundaryOneofCase.CurrentRow:
                      CurrentRow = other.CurrentRow;
                      break;
                    case BoundaryOneofCase.Unbounded:
                      Unbounded = other.Unbounded;
                      break;
                    case BoundaryOneofCase.Value:
                      if (Value == null) {
                        Value = new global::Spark.Connect.Expression();
                      }
                      Value.MergeFrom(other.Value);
                      break;
                  }

                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public void MergeFrom(pb::CodedInputStream input) {
                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  input.ReadRawMessage(this);
                #else
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 8: {
                        CurrentRow = input.ReadBool();
                        break;
                      }
                      case 16: {
                        Unbounded = input.ReadBool();
                        break;
                      }
                      case 26: {
                        global::Spark.Connect.Expression subBuilder = new global::Spark.Connect.Expression();
                        if (boundaryCase_ == BoundaryOneofCase.Value) {
                          subBuilder.MergeFrom(Value);
                        }
                        input.ReadMessage(subBuilder);
                        Value = subBuilder;
                        break;
                      }
                    }
                  }
                #endif
                }

                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                      case 8: {
                        CurrentRow = input.ReadBool();
                        break;
                      }
                      case 16: {
                        Unbounded = input.ReadBool();
                        break;
                      }
                      case 26: {
                        global::Spark.Connect.Expression subBuilder = new global::Spark.Connect.Expression();
                        if (boundaryCase_ == BoundaryOneofCase.Value) {
                          subBuilder.MergeFrom(Value);
                        }
                        input.ReadMessage(subBuilder);
                        Value = subBuilder;
                        break;
                      }
                    }
                  }
                }
                #endif

              }

            }
            #endregion

          }

        }
        #endregion

      }

      /// <summary>
      /// SortOrder is used to specify the  data ordering, it is normally used in Sort and Window.
      /// It is an unevaluable expression and cannot be evaluated, so can not be used in Projection.
      /// </summary>
      public sealed partial class SortOrder : pb::IMessage<SortOrder>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<SortOrder> _parser = new pb::MessageParser<SortOrder>(() => new SortOrder());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<SortOrder> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spark.Connect.Expression.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public SortOrder() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public SortOrder(SortOrder other) : this() {
          child_ = other.child_ != null ? other.child_.Clone() : null;
          direction_ = other.direction_;
          nullOrdering_ = other.nullOrdering_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public SortOrder Clone() {
          return new SortOrder(this);
        }

        /// <summary>Field number for the "child" field.</summary>
        public const int ChildFieldNumber = 1;
        private global::Spark.Connect.Expression child_;
        /// <summary>
        /// (Required) The expression to be sorted.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spark.Connect.Expression Child {
          get { return child_; }
          set {
            child_ = value;
          }
        }

        /// <summary>Field number for the "direction" field.</summary>
        public const int DirectionFieldNumber = 2;
        private global::Spark.Connect.Expression.Types.SortOrder.Types.SortDirection direction_ = global::Spark.Connect.Expression.Types.SortOrder.Types.SortDirection.Unspecified;
        /// <summary>
        /// (Required) The sort direction, should be ASCENDING or DESCENDING.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spark.Connect.Expression.Types.SortOrder.Types.SortDirection Direction {
          get { return direction_; }
          set {
            direction_ = value;
          }
        }

        /// <summary>Field number for the "null_ordering" field.</summary>
        public const int NullOrderingFieldNumber = 3;
        private global::Spark.Connect.Expression.Types.SortOrder.Types.NullOrdering nullOrdering_ = global::Spark.Connect.Expression.Types.SortOrder.Types.NullOrdering.SortNullsUnspecified;
        /// <summary>
        /// (Required) How to deal with NULLs, should be NULLS_FIRST or NULLS_LAST.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spark.Connect.Expression.Types.SortOrder.Types.NullOrdering NullOrdering {
          get { return nullOrdering_; }
          set {
            nullOrdering_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as SortOrder);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(SortOrder other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Child, other.Child)) return false;
          if (Direction != other.Direction) return false;
          if (NullOrdering != other.NullOrdering) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (child_ != null) hash ^= Child.GetHashCode();
          if (Direction != global::Spark.Connect.Expression.Types.SortOrder.Types.SortDirection.Unspecified) hash ^= Direction.GetHashCode();
          if (NullOrdering != global::Spark.Connect.Expression.Types.SortOrder.Types.NullOrdering.SortNullsUnspecified) hash ^= NullOrdering.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (child_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Child);
          }
          if (Direction != global::Spark.Connect.Expression.Types.SortOrder.Types.SortDirection.Unspecified) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Direction);
          }
          if (NullOrdering != global::Spark.Connect.Expression.Types.SortOrder.Types.NullOrdering.SortNullsUnspecified) {
            output.WriteRawTag(24);
            output.WriteEnum((int) NullOrdering);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (child_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Child);
          }
          if (Direction != global::Spark.Connect.Expression.Types.SortOrder.Types.SortDirection.Unspecified) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Direction);
          }
          if (NullOrdering != global::Spark.Connect.Expression.Types.SortOrder.Types.NullOrdering.SortNullsUnspecified) {
            output.WriteRawTag(24);
            output.WriteEnum((int) NullOrdering);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (child_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Child);
          }
          if (Direction != global::Spark.Connect.Expression.Types.SortOrder.Types.SortDirection.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Direction);
          }
          if (NullOrdering != global::Spark.Connect.Expression.Types.SortOrder.Types.NullOrdering.SortNullsUnspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NullOrdering);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(SortOrder other) {
          if (other == null) {
            return;
          }
          if (other.child_ != null) {
            if (child_ == null) {
              Child = new global::Spark.Connect.Expression();
            }
            Child.MergeFrom(other.Child);
          }
          if (other.Direction != global::Spark.Connect.Expression.Types.SortOrder.Types.SortDirection.Unspecified) {
            Direction = other.Direction;
          }
          if (other.NullOrdering != global::Spark.Connect.Expression.Types.SortOrder.Types.NullOrdering.SortNullsUnspecified) {
            NullOrdering = other.NullOrdering;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (child_ == null) {
                  Child = new global::Spark.Connect.Expression();
                }
                input.ReadMessage(Child);
                break;
              }
              case 16: {
                Direction = (global::Spark.Connect.Expression.Types.SortOrder.Types.SortDirection) input.ReadEnum();
                break;
              }
              case 24: {
                NullOrdering = (global::Spark.Connect.Expression.Types.SortOrder.Types.NullOrdering) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (child_ == null) {
                  Child = new global::Spark.Connect.Expression();
                }
                input.ReadMessage(Child);
                break;
              }
              case 16: {
                Direction = (global::Spark.Connect.Expression.Types.SortOrder.Types.SortDirection) input.ReadEnum();
                break;
              }
              case 24: {
                NullOrdering = (global::Spark.Connect.Expression.Types.SortOrder.Types.NullOrdering) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the SortOrder message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static partial class Types {
          public enum SortDirection {
            [pbr::OriginalName("SORT_DIRECTION_UNSPECIFIED")] Unspecified = 0,
            [pbr::OriginalName("SORT_DIRECTION_ASCENDING")] Ascending = 1,
            [pbr::OriginalName("SORT_DIRECTION_DESCENDING")] Descending = 2,
          }

          public enum NullOrdering {
            [pbr::OriginalName("SORT_NULLS_UNSPECIFIED")] SortNullsUnspecified = 0,
            [pbr::OriginalName("SORT_NULLS_FIRST")] SortNullsFirst = 1,
            [pbr::OriginalName("SORT_NULLS_LAST")] SortNullsLast = 2,
          }

        }
        #endregion

      }

      public sealed partial class Cast : pb::IMessage<Cast>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Cast> _parser = new pb::MessageParser<Cast>(() => new Cast());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Cast> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spark.Connect.Expression.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Cast() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Cast(Cast other) : this() {
          expr_ = other.expr_ != null ? other.expr_.Clone() : null;
          switch (other.CastToTypeCase) {
            case CastToTypeOneofCase.Type:
              Type = other.Type.Clone();
              break;
            case CastToTypeOneofCase.TypeStr:
              TypeStr = other.TypeStr;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Cast Clone() {
          return new Cast(this);
        }

        /// <summary>Field number for the "expr" field.</summary>
        public const int ExprFieldNumber = 1;
        private global::Spark.Connect.Expression expr_;
        /// <summary>
        /// (Required) the expression to be casted.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spark.Connect.Expression Expr {
          get { return expr_; }
          set {
            expr_ = value;
          }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spark.Connect.DataType Type {
          get { return castToTypeCase_ == CastToTypeOneofCase.Type ? (global::Spark.Connect.DataType) castToType_ : null; }
          set {
            castToType_ = value;
            castToTypeCase_ = value == null ? CastToTypeOneofCase.None : CastToTypeOneofCase.Type;
          }
        }

        /// <summary>Field number for the "type_str" field.</summary>
        public const int TypeStrFieldNumber = 3;
        /// <summary>
        /// If this is set, Server will use Catalyst parser to parse this string to DataType.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string TypeStr {
          get { return HasTypeStr ? (string) castToType_ : ""; }
          set {
            castToType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            castToTypeCase_ = CastToTypeOneofCase.TypeStr;
          }
        }
        /// <summary>Gets whether the "type_str" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasTypeStr {
          get { return castToTypeCase_ == CastToTypeOneofCase.TypeStr; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "type_str" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearTypeStr() {
          if (HasTypeStr) {
            ClearCastToType();
          }
        }

        private object castToType_;
        /// <summary>Enum of possible cases for the "cast_to_type" oneof.</summary>
        public enum CastToTypeOneofCase {
          None = 0,
          Type = 2,
          TypeStr = 3,
        }
        private CastToTypeOneofCase castToTypeCase_ = CastToTypeOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public CastToTypeOneofCase CastToTypeCase {
          get { return castToTypeCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearCastToType() {
          castToTypeCase_ = CastToTypeOneofCase.None;
          castToType_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Cast);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Cast other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Expr, other.Expr)) return false;
          if (!object.Equals(Type, other.Type)) return false;
          if (TypeStr != other.TypeStr) return false;
          if (CastToTypeCase != other.CastToTypeCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (expr_ != null) hash ^= Expr.GetHashCode();
          if (castToTypeCase_ == CastToTypeOneofCase.Type) hash ^= Type.GetHashCode();
          if (HasTypeStr) hash ^= TypeStr.GetHashCode();
          hash ^= (int) castToTypeCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (expr_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Expr);
          }
          if (castToTypeCase_ == CastToTypeOneofCase.Type) {
            output.WriteRawTag(18);
            output.WriteMessage(Type);
          }
          if (HasTypeStr) {
            output.WriteRawTag(26);
            output.WriteString(TypeStr);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (expr_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Expr);
          }
          if (castToTypeCase_ == CastToTypeOneofCase.Type) {
            output.WriteRawTag(18);
            output.WriteMessage(Type);
          }
          if (HasTypeStr) {
            output.WriteRawTag(26);
            output.WriteString(TypeStr);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (expr_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expr);
          }
          if (castToTypeCase_ == CastToTypeOneofCase.Type) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
          }
          if (HasTypeStr) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TypeStr);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Cast other) {
          if (other == null) {
            return;
          }
          if (other.expr_ != null) {
            if (expr_ == null) {
              Expr = new global::Spark.Connect.Expression();
            }
            Expr.MergeFrom(other.Expr);
          }
          switch (other.CastToTypeCase) {
            case CastToTypeOneofCase.Type:
              if (Type == null) {
                Type = new global::Spark.Connect.DataType();
              }
              Type.MergeFrom(other.Type);
              break;
            case CastToTypeOneofCase.TypeStr:
              TypeStr = other.TypeStr;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (expr_ == null) {
                  Expr = new global::Spark.Connect.Expression();
                }
                input.ReadMessage(Expr);
                break;
              }
              case 18: {
                global::Spark.Connect.DataType subBuilder = new global::Spark.Connect.DataType();
                if (castToTypeCase_ == CastToTypeOneofCase.Type) {
                  subBuilder.MergeFrom(Type);
                }
                input.ReadMessage(subBuilder);
                Type = subBuilder;
                break;
              }
              case 26: {
                TypeStr = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (expr_ == null) {
                  Expr = new global::Spark.Connect.Expression();
                }
                input.ReadMessage(Expr);
                break;
              }
              case 18: {
                global::Spark.Connect.DataType subBuilder = new global::Spark.Connect.DataType();
                if (castToTypeCase_ == CastToTypeOneofCase.Type) {
                  subBuilder.MergeFrom(Type);
                }
                input.ReadMessage(subBuilder);
                Type = subBuilder;
                break;
              }
              case 26: {
                TypeStr = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Literal : pb::IMessage<Literal>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Literal> _parser = new pb::MessageParser<Literal>(() => new Literal());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Literal> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spark.Connect.Expression.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Literal() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Literal(Literal other) : this() {
          switch (other.LiteralTypeCase) {
            case LiteralTypeOneofCase.Null:
              Null = other.Null.Clone();
              break;
            case LiteralTypeOneofCase.Binary:
              Binary = other.Binary;
              break;
            case LiteralTypeOneofCase.Boolean:
              Boolean = other.Boolean;
              break;
            case LiteralTypeOneofCase.Byte:
              Byte = other.Byte;
              break;
            case LiteralTypeOneofCase.Short:
              Short = other.Short;
              break;
            case LiteralTypeOneofCase.Integer:
              Integer = other.Integer;
              break;
            case LiteralTypeOneofCase.Long:
              Long = other.Long;
              break;
            case LiteralTypeOneofCase.Float:
              Float = other.Float;
              break;
            case LiteralTypeOneofCase.Double:
              Double = other.Double;
              break;
            case LiteralTypeOneofCase.Decimal:
              Decimal = other.Decimal.Clone();
              break;
            case LiteralTypeOneofCase.String:
              String = other.String;
              break;
            case LiteralTypeOneofCase.Date:
              Date = other.Date;
              break;
            case LiteralTypeOneofCase.Timestamp:
              Timestamp = other.Timestamp;
              break;
            case LiteralTypeOneofCase.TimestampNtz:
              TimestampNtz = other.TimestampNtz;
              break;
            case LiteralTypeOneofCase.CalendarInterval:
              CalendarInterval = other.CalendarInterval.Clone();
              break;
            case LiteralTypeOneofCase.YearMonthInterval:
              YearMonthInterval = other.YearMonthInterval;
              break;
            case LiteralTypeOneofCase.DayTimeInterval:
              DayTimeInterval = other.DayTimeInterval;
              break;
            case LiteralTypeOneofCase.Array:
              Array = other.Array.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Literal Clone() {
          return new Literal(this);
        }

        /// <summary>Field number for the "null" field.</summary>
        public const int NullFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spark.Connect.DataType Null {
          get { return literalTypeCase_ == LiteralTypeOneofCase.Null ? (global::Spark.Connect.DataType) literalType_ : null; }
          set {
            literalType_ = value;
            literalTypeCase_ = value == null ? LiteralTypeOneofCase.None : LiteralTypeOneofCase.Null;
          }
        }

        /// <summary>Field number for the "binary" field.</summary>
        public const int BinaryFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pb::ByteString Binary {
          get { return HasBinary ? (pb::ByteString) literalType_ : pb::ByteString.Empty; }
          set {
            literalType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            literalTypeCase_ = LiteralTypeOneofCase.Binary;
          }
        }
        /// <summary>Gets whether the "binary" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasBinary {
          get { return literalTypeCase_ == LiteralTypeOneofCase.Binary; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "binary" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearBinary() {
          if (HasBinary) {
            ClearLiteralType();
          }
        }

        /// <summary>Field number for the "boolean" field.</summary>
        public const int BooleanFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Boolean {
          get { return HasBoolean ? (bool) literalType_ : false; }
          set {
            literalType_ = value;
            literalTypeCase_ = LiteralTypeOneofCase.Boolean;
          }
        }
        /// <summary>Gets whether the "boolean" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasBoolean {
          get { return literalTypeCase_ == LiteralTypeOneofCase.Boolean; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "boolean" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearBoolean() {
          if (HasBoolean) {
            ClearLiteralType();
          }
        }

        /// <summary>Field number for the "byte" field.</summary>
        public const int ByteFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int Byte {
          get { return HasByte ? (int) literalType_ : 0; }
          set {
            literalType_ = value;
            literalTypeCase_ = LiteralTypeOneofCase.Byte;
          }
        }
        /// <summary>Gets whether the "byte" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasByte {
          get { return literalTypeCase_ == LiteralTypeOneofCase.Byte; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "byte" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearByte() {
          if (HasByte) {
            ClearLiteralType();
          }
        }

        /// <summary>Field number for the "short" field.</summary>
        public const int ShortFieldNumber = 5;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int Short {
          get { return HasShort ? (int) literalType_ : 0; }
          set {
            literalType_ = value;
            literalTypeCase_ = LiteralTypeOneofCase.Short;
          }
        }
        /// <summary>Gets whether the "short" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasShort {
          get { return literalTypeCase_ == LiteralTypeOneofCase.Short; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "short" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearShort() {
          if (HasShort) {
            ClearLiteralType();
          }
        }

        /// <summary>Field number for the "integer" field.</summary>
        public const int IntegerFieldNumber = 6;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int Integer {
          get { return HasInteger ? (int) literalType_ : 0; }
          set {
            literalType_ = value;
            literalTypeCase_ = LiteralTypeOneofCase.Integer;
          }
        }
        /// <summary>Gets whether the "integer" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasInteger {
          get { return literalTypeCase_ == LiteralTypeOneofCase.Integer; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "integer" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearInteger() {
          if (HasInteger) {
            ClearLiteralType();
          }
        }

        /// <summary>Field number for the "long" field.</summary>
        public const int LongFieldNumber = 7;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long Long {
          get { return HasLong ? (long) literalType_ : 0L; }
          set {
            literalType_ = value;
            literalTypeCase_ = LiteralTypeOneofCase.Long;
          }
        }
        /// <summary>Gets whether the "long" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasLong {
          get { return literalTypeCase_ == LiteralTypeOneofCase.Long; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "long" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearLong() {
          if (HasLong) {
            ClearLiteralType();
          }
        }

        /// <summary>Field number for the "float" field.</summary>
        public const int FloatFieldNumber = 10;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float Float {
          get { return HasFloat ? (float) literalType_ : 0F; }
          set {
            literalType_ = value;
            literalTypeCase_ = LiteralTypeOneofCase.Float;
          }
        }
        /// <summary>Gets whether the "float" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasFloat {
          get { return literalTypeCase_ == LiteralTypeOneofCase.Float; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "float" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearFloat() {
          if (HasFloat) {
            ClearLiteralType();
          }
        }

        /// <summary>Field number for the "double" field.</summary>
        public const int DoubleFieldNumber = 11;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Double {
          get { return HasDouble ? (double) literalType_ : 0D; }
          set {
            literalType_ = value;
            literalTypeCase_ = LiteralTypeOneofCase.Double;
          }
        }
        /// <summary>Gets whether the "double" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasDouble {
          get { return literalTypeCase_ == LiteralTypeOneofCase.Double; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "double" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearDouble() {
          if (HasDouble) {
            ClearLiteralType();
          }
        }

        /// <summary>Field number for the "decimal" field.</summary>
        public const int DecimalFieldNumber = 12;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spark.Connect.Expression.Types.Literal.Types.Decimal Decimal {
          get { return literalTypeCase_ == LiteralTypeOneofCase.Decimal ? (global::Spark.Connect.Expression.Types.Literal.Types.Decimal) literalType_ : null; }
          set {
            literalType_ = value;
            literalTypeCase_ = value == null ? LiteralTypeOneofCase.None : LiteralTypeOneofCase.Decimal;
          }
        }

        /// <summary>Field number for the "string" field.</summary>
        public const int StringFieldNumber = 13;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string String {
          get { return HasString ? (string) literalType_ : ""; }
          set {
            literalType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            literalTypeCase_ = LiteralTypeOneofCase.String;
          }
        }
        /// <summary>Gets whether the "string" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasString {
          get { return literalTypeCase_ == LiteralTypeOneofCase.String; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "string" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearString() {
          if (HasString) {
            ClearLiteralType();
          }
        }

        /// <summary>Field number for the "date" field.</summary>
        public const int DateFieldNumber = 16;
        /// <summary>
        /// Date in units of days since the UNIX epoch.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int Date {
          get { return HasDate ? (int) literalType_ : 0; }
          set {
            literalType_ = value;
            literalTypeCase_ = LiteralTypeOneofCase.Date;
          }
        }
        /// <summary>Gets whether the "date" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasDate {
          get { return literalTypeCase_ == LiteralTypeOneofCase.Date; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "date" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearDate() {
          if (HasDate) {
            ClearLiteralType();
          }
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 17;
        /// <summary>
        /// Timestamp in units of microseconds since the UNIX epoch.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long Timestamp {
          get { return HasTimestamp ? (long) literalType_ : 0L; }
          set {
            literalType_ = value;
            literalTypeCase_ = LiteralTypeOneofCase.Timestamp;
          }
        }
        /// <summary>Gets whether the "timestamp" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasTimestamp {
          get { return literalTypeCase_ == LiteralTypeOneofCase.Timestamp; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "timestamp" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearTimestamp() {
          if (HasTimestamp) {
            ClearLiteralType();
          }
        }

        /// <summary>Field number for the "timestamp_ntz" field.</summary>
        public const int TimestampNtzFieldNumber = 18;
        /// <summary>
        /// Timestamp in units of microseconds since the UNIX epoch (without timezone information).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long TimestampNtz {
          get { return HasTimestampNtz ? (long) literalType_ : 0L; }
          set {
            literalType_ = value;
            literalTypeCase_ = LiteralTypeOneofCase.TimestampNtz;
          }
        }
        /// <summary>Gets whether the "timestamp_ntz" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasTimestampNtz {
          get { return literalTypeCase_ == LiteralTypeOneofCase.TimestampNtz; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "timestamp_ntz" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearTimestampNtz() {
          if (HasTimestampNtz) {
            ClearLiteralType();
          }
        }

        /// <summary>Field number for the "calendar_interval" field.</summary>
        public const int CalendarIntervalFieldNumber = 19;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spark.Connect.Expression.Types.Literal.Types.CalendarInterval CalendarInterval {
          get { return literalTypeCase_ == LiteralTypeOneofCase.CalendarInterval ? (global::Spark.Connect.Expression.Types.Literal.Types.CalendarInterval) literalType_ : null; }
          set {
            literalType_ = value;
            literalTypeCase_ = value == null ? LiteralTypeOneofCase.None : LiteralTypeOneofCase.CalendarInterval;
          }
        }

        /// <summary>Field number for the "year_month_interval" field.</summary>
        public const int YearMonthIntervalFieldNumber = 20;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int YearMonthInterval {
          get { return HasYearMonthInterval ? (int) literalType_ : 0; }
          set {
            literalType_ = value;
            literalTypeCase_ = LiteralTypeOneofCase.YearMonthInterval;
          }
        }
        /// <summary>Gets whether the "year_month_interval" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasYearMonthInterval {
          get { return literalTypeCase_ == LiteralTypeOneofCase.YearMonthInterval; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "year_month_interval" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearYearMonthInterval() {
          if (HasYearMonthInterval) {
            ClearLiteralType();
          }
        }

        /// <summary>Field number for the "day_time_interval" field.</summary>
        public const int DayTimeIntervalFieldNumber = 21;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long DayTimeInterval {
          get { return HasDayTimeInterval ? (long) literalType_ : 0L; }
          set {
            literalType_ = value;
            literalTypeCase_ = LiteralTypeOneofCase.DayTimeInterval;
          }
        }
        /// <summary>Gets whether the "day_time_interval" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasDayTimeInterval {
          get { return literalTypeCase_ == LiteralTypeOneofCase.DayTimeInterval; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "day_time_interval" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearDayTimeInterval() {
          if (HasDayTimeInterval) {
            ClearLiteralType();
          }
        }

        /// <summary>Field number for the "array" field.</summary>
        public const int ArrayFieldNumber = 22;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spark.Connect.Expression.Types.Literal.Types.Array Array {
          get { return literalTypeCase_ == LiteralTypeOneofCase.Array ? (global::Spark.Connect.Expression.Types.Literal.Types.Array) literalType_ : null; }
          set {
            literalType_ = value;
            literalTypeCase_ = value == null ? LiteralTypeOneofCase.None : LiteralTypeOneofCase.Array;
          }
        }

        private object literalType_;
        /// <summary>Enum of possible cases for the "literal_type" oneof.</summary>
        public enum LiteralTypeOneofCase {
          None = 0,
          Null = 1,
          Binary = 2,
          Boolean = 3,
          Byte = 4,
          Short = 5,
          Integer = 6,
          Long = 7,
          Float = 10,
          Double = 11,
          Decimal = 12,
          String = 13,
          Date = 16,
          Timestamp = 17,
          TimestampNtz = 18,
          CalendarInterval = 19,
          YearMonthInterval = 20,
          DayTimeInterval = 21,
          Array = 22,
        }
        private LiteralTypeOneofCase literalTypeCase_ = LiteralTypeOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public LiteralTypeOneofCase LiteralTypeCase {
          get { return literalTypeCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearLiteralType() {
          literalTypeCase_ = LiteralTypeOneofCase.None;
          literalType_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Literal);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Literal other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Null, other.Null)) return false;
          if (Binary != other.Binary) return false;
          if (Boolean != other.Boolean) return false;
          if (Byte != other.Byte) return false;
          if (Short != other.Short) return false;
          if (Integer != other.Integer) return false;
          if (Long != other.Long) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Float, other.Float)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Double, other.Double)) return false;
          if (!object.Equals(Decimal, other.Decimal)) return false;
          if (String != other.String) return false;
          if (Date != other.Date) return false;
          if (Timestamp != other.Timestamp) return false;
          if (TimestampNtz != other.TimestampNtz) return false;
          if (!object.Equals(CalendarInterval, other.CalendarInterval)) return false;
          if (YearMonthInterval != other.YearMonthInterval) return false;
          if (DayTimeInterval != other.DayTimeInterval) return false;
          if (!object.Equals(Array, other.Array)) return false;
          if (LiteralTypeCase != other.LiteralTypeCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (literalTypeCase_ == LiteralTypeOneofCase.Null) hash ^= Null.GetHashCode();
          if (HasBinary) hash ^= Binary.GetHashCode();
          if (HasBoolean) hash ^= Boolean.GetHashCode();
          if (HasByte) hash ^= Byte.GetHashCode();
          if (HasShort) hash ^= Short.GetHashCode();
          if (HasInteger) hash ^= Integer.GetHashCode();
          if (HasLong) hash ^= Long.GetHashCode();
          if (HasFloat) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Float);
          if (HasDouble) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Double);
          if (literalTypeCase_ == LiteralTypeOneofCase.Decimal) hash ^= Decimal.GetHashCode();
          if (HasString) hash ^= String.GetHashCode();
          if (HasDate) hash ^= Date.GetHashCode();
          if (HasTimestamp) hash ^= Timestamp.GetHashCode();
          if (HasTimestampNtz) hash ^= TimestampNtz.GetHashCode();
          if (literalTypeCase_ == LiteralTypeOneofCase.CalendarInterval) hash ^= CalendarInterval.GetHashCode();
          if (HasYearMonthInterval) hash ^= YearMonthInterval.GetHashCode();
          if (HasDayTimeInterval) hash ^= DayTimeInterval.GetHashCode();
          if (literalTypeCase_ == LiteralTypeOneofCase.Array) hash ^= Array.GetHashCode();
          hash ^= (int) literalTypeCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (literalTypeCase_ == LiteralTypeOneofCase.Null) {
            output.WriteRawTag(10);
            output.WriteMessage(Null);
          }
          if (HasBinary) {
            output.WriteRawTag(18);
            output.WriteBytes(Binary);
          }
          if (HasBoolean) {
            output.WriteRawTag(24);
            output.WriteBool(Boolean);
          }
          if (HasByte) {
            output.WriteRawTag(32);
            output.WriteInt32(Byte);
          }
          if (HasShort) {
            output.WriteRawTag(40);
            output.WriteInt32(Short);
          }
          if (HasInteger) {
            output.WriteRawTag(48);
            output.WriteInt32(Integer);
          }
          if (HasLong) {
            output.WriteRawTag(56);
            output.WriteInt64(Long);
          }
          if (HasFloat) {
            output.WriteRawTag(85);
            output.WriteFloat(Float);
          }
          if (HasDouble) {
            output.WriteRawTag(89);
            output.WriteDouble(Double);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Decimal) {
            output.WriteRawTag(98);
            output.WriteMessage(Decimal);
          }
          if (HasString) {
            output.WriteRawTag(106);
            output.WriteString(String);
          }
          if (HasDate) {
            output.WriteRawTag(128, 1);
            output.WriteInt32(Date);
          }
          if (HasTimestamp) {
            output.WriteRawTag(136, 1);
            output.WriteInt64(Timestamp);
          }
          if (HasTimestampNtz) {
            output.WriteRawTag(144, 1);
            output.WriteInt64(TimestampNtz);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.CalendarInterval) {
            output.WriteRawTag(154, 1);
            output.WriteMessage(CalendarInterval);
          }
          if (HasYearMonthInterval) {
            output.WriteRawTag(160, 1);
            output.WriteInt32(YearMonthInterval);
          }
          if (HasDayTimeInterval) {
            output.WriteRawTag(168, 1);
            output.WriteInt64(DayTimeInterval);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Array) {
            output.WriteRawTag(178, 1);
            output.WriteMessage(Array);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (literalTypeCase_ == LiteralTypeOneofCase.Null) {
            output.WriteRawTag(10);
            output.WriteMessage(Null);
          }
          if (HasBinary) {
            output.WriteRawTag(18);
            output.WriteBytes(Binary);
          }
          if (HasBoolean) {
            output.WriteRawTag(24);
            output.WriteBool(Boolean);
          }
          if (HasByte) {
            output.WriteRawTag(32);
            output.WriteInt32(Byte);
          }
          if (HasShort) {
            output.WriteRawTag(40);
            output.WriteInt32(Short);
          }
          if (HasInteger) {
            output.WriteRawTag(48);
            output.WriteInt32(Integer);
          }
          if (HasLong) {
            output.WriteRawTag(56);
            output.WriteInt64(Long);
          }
          if (HasFloat) {
            output.WriteRawTag(85);
            output.WriteFloat(Float);
          }
          if (HasDouble) {
            output.WriteRawTag(89);
            output.WriteDouble(Double);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Decimal) {
            output.WriteRawTag(98);
            output.WriteMessage(Decimal);
          }
          if (HasString) {
            output.WriteRawTag(106);
            output.WriteString(String);
          }
          if (HasDate) {
            output.WriteRawTag(128, 1);
            output.WriteInt32(Date);
          }
          if (HasTimestamp) {
            output.WriteRawTag(136, 1);
            output.WriteInt64(Timestamp);
          }
          if (HasTimestampNtz) {
            output.WriteRawTag(144, 1);
            output.WriteInt64(TimestampNtz);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.CalendarInterval) {
            output.WriteRawTag(154, 1);
            output.WriteMessage(CalendarInterval);
          }
          if (HasYearMonthInterval) {
            output.WriteRawTag(160, 1);
            output.WriteInt32(YearMonthInterval);
          }
          if (HasDayTimeInterval) {
            output.WriteRawTag(168, 1);
            output.WriteInt64(DayTimeInterval);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Array) {
            output.WriteRawTag(178, 1);
            output.WriteMessage(Array);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (literalTypeCase_ == LiteralTypeOneofCase.Null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Null);
          }
          if (HasBinary) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Binary);
          }
          if (HasBoolean) {
            size += 1 + 1;
          }
          if (HasByte) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Byte);
          }
          if (HasShort) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Short);
          }
          if (HasInteger) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Integer);
          }
          if (HasLong) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Long);
          }
          if (HasFloat) {
            size += 1 + 4;
          }
          if (HasDouble) {
            size += 1 + 8;
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Decimal) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Decimal);
          }
          if (HasString) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(String);
          }
          if (HasDate) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(Date);
          }
          if (HasTimestamp) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
          }
          if (HasTimestampNtz) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(TimestampNtz);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.CalendarInterval) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(CalendarInterval);
          }
          if (HasYearMonthInterval) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(YearMonthInterval);
          }
          if (HasDayTimeInterval) {
            size += 2 + pb::CodedOutputStream.ComputeInt64Size(DayTimeInterval);
          }
          if (literalTypeCase_ == LiteralTypeOneofCase.Array) {
            size += 2 + pb::CodedOutputStream.ComputeMessageSize(Array);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Literal other) {
          if (other == null) {
            return;
          }
          switch (other.LiteralTypeCase) {
            case LiteralTypeOneofCase.Null:
              if (Null == null) {
                Null = new global::Spark.Connect.DataType();
              }
              Null.MergeFrom(other.Null);
              break;
            case LiteralTypeOneofCase.Binary:
              Binary = other.Binary;
              break;
            case LiteralTypeOneofCase.Boolean:
              Boolean = other.Boolean;
              break;
            case LiteralTypeOneofCase.Byte:
              Byte = other.Byte;
              break;
            case LiteralTypeOneofCase.Short:
              Short = other.Short;
              break;
            case LiteralTypeOneofCase.Integer:
              Integer = other.Integer;
              break;
            case LiteralTypeOneofCase.Long:
              Long = other.Long;
              break;
            case LiteralTypeOneofCase.Float:
              Float = other.Float;
              break;
            case LiteralTypeOneofCase.Double:
              Double = other.Double;
              break;
            case LiteralTypeOneofCase.Decimal:
              if (Decimal == null) {
                Decimal = new global::Spark.Connect.Expression.Types.Literal.Types.Decimal();
              }
              Decimal.MergeFrom(other.Decimal);
              break;
            case LiteralTypeOneofCase.String:
              String = other.String;
              break;
            case LiteralTypeOneofCase.Date:
              Date = other.Date;
              break;
            case LiteralTypeOneofCase.Timestamp:
              Timestamp = other.Timestamp;
              break;
            case LiteralTypeOneofCase.TimestampNtz:
              TimestampNtz = other.TimestampNtz;
              break;
            case LiteralTypeOneofCase.CalendarInterval:
              if (CalendarInterval == null) {
                CalendarInterval = new global::Spark.Connect.Expression.Types.Literal.Types.CalendarInterval();
              }
              CalendarInterval.MergeFrom(other.CalendarInterval);
              break;
            case LiteralTypeOneofCase.YearMonthInterval:
              YearMonthInterval = other.YearMonthInterval;
              break;
            case LiteralTypeOneofCase.DayTimeInterval:
              DayTimeInterval = other.DayTimeInterval;
              break;
            case LiteralTypeOneofCase.Array:
              if (Array == null) {
                Array = new global::Spark.Connect.Expression.Types.Literal.Types.Array();
              }
              Array.MergeFrom(other.Array);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                global::Spark.Connect.DataType subBuilder = new global::Spark.Connect.DataType();
                if (literalTypeCase_ == LiteralTypeOneofCase.Null) {
                  subBuilder.MergeFrom(Null);
                }
                input.ReadMessage(subBuilder);
                Null = subBuilder;
                break;
              }
              case 18: {
                Binary = input.ReadBytes();
                break;
              }
              case 24: {
                Boolean = input.ReadBool();
                break;
              }
              case 32: {
                Byte = input.ReadInt32();
                break;
              }
              case 40: {
                Short = input.ReadInt32();
                break;
              }
              case 48: {
                Integer = input.ReadInt32();
                break;
              }
              case 56: {
                Long = input.ReadInt64();
                break;
              }
              case 85: {
                Float = input.ReadFloat();
                break;
              }
              case 89: {
                Double = input.ReadDouble();
                break;
              }
              case 98: {
                global::Spark.Connect.Expression.Types.Literal.Types.Decimal subBuilder = new global::Spark.Connect.Expression.Types.Literal.Types.Decimal();
                if (literalTypeCase_ == LiteralTypeOneofCase.Decimal) {
                  subBuilder.MergeFrom(Decimal);
                }
                input.ReadMessage(subBuilder);
                Decimal = subBuilder;
                break;
              }
              case 106: {
                String = input.ReadString();
                break;
              }
              case 128: {
                Date = input.ReadInt32();
                break;
              }
              case 136: {
                Timestamp = input.ReadInt64();
                break;
              }
              case 144: {
                TimestampNtz = input.ReadInt64();
                break;
              }
              case 154: {
                global::Spark.Connect.Expression.Types.Literal.Types.CalendarInterval subBuilder = new global::Spark.Connect.Expression.Types.Literal.Types.CalendarInterval();
                if (literalTypeCase_ == LiteralTypeOneofCase.CalendarInterval) {
                  subBuilder.MergeFrom(CalendarInterval);
                }
                input.ReadMessage(subBuilder);
                CalendarInterval = subBuilder;
                break;
              }
              case 160: {
                YearMonthInterval = input.ReadInt32();
                break;
              }
              case 168: {
                DayTimeInterval = input.ReadInt64();
                break;
              }
              case 178: {
                global::Spark.Connect.Expression.Types.Literal.Types.Array subBuilder = new global::Spark.Connect.Expression.Types.Literal.Types.Array();
                if (literalTypeCase_ == LiteralTypeOneofCase.Array) {
                  subBuilder.MergeFrom(Array);
                }
                input.ReadMessage(subBuilder);
                Array = subBuilder;
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                global::Spark.Connect.DataType subBuilder = new global::Spark.Connect.DataType();
                if (literalTypeCase_ == LiteralTypeOneofCase.Null) {
                  subBuilder.MergeFrom(Null);
                }
                input.ReadMessage(subBuilder);
                Null = subBuilder;
                break;
              }
              case 18: {
                Binary = input.ReadBytes();
                break;
              }
              case 24: {
                Boolean = input.ReadBool();
                break;
              }
              case 32: {
                Byte = input.ReadInt32();
                break;
              }
              case 40: {
                Short = input.ReadInt32();
                break;
              }
              case 48: {
                Integer = input.ReadInt32();
                break;
              }
              case 56: {
                Long = input.ReadInt64();
                break;
              }
              case 85: {
                Float = input.ReadFloat();
                break;
              }
              case 89: {
                Double = input.ReadDouble();
                break;
              }
              case 98: {
                global::Spark.Connect.Expression.Types.Literal.Types.Decimal subBuilder = new global::Spark.Connect.Expression.Types.Literal.Types.Decimal();
                if (literalTypeCase_ == LiteralTypeOneofCase.Decimal) {
                  subBuilder.MergeFrom(Decimal);
                }
                input.ReadMessage(subBuilder);
                Decimal = subBuilder;
                break;
              }
              case 106: {
                String = input.ReadString();
                break;
              }
              case 128: {
                Date = input.ReadInt32();
                break;
              }
              case 136: {
                Timestamp = input.ReadInt64();
                break;
              }
              case 144: {
                TimestampNtz = input.ReadInt64();
                break;
              }
              case 154: {
                global::Spark.Connect.Expression.Types.Literal.Types.CalendarInterval subBuilder = new global::Spark.Connect.Expression.Types.Literal.Types.CalendarInterval();
                if (literalTypeCase_ == LiteralTypeOneofCase.CalendarInterval) {
                  subBuilder.MergeFrom(CalendarInterval);
                }
                input.ReadMessage(subBuilder);
                CalendarInterval = subBuilder;
                break;
              }
              case 160: {
                YearMonthInterval = input.ReadInt32();
                break;
              }
              case 168: {
                DayTimeInterval = input.ReadInt64();
                break;
              }
              case 178: {
                global::Spark.Connect.Expression.Types.Literal.Types.Array subBuilder = new global::Spark.Connect.Expression.Types.Literal.Types.Array();
                if (literalTypeCase_ == LiteralTypeOneofCase.Array) {
                  subBuilder.MergeFrom(Array);
                }
                input.ReadMessage(subBuilder);
                Array = subBuilder;
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the Literal message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static partial class Types {
          public sealed partial class Decimal : pb::IMessage<Decimal>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Decimal> _parser = new pb::MessageParser<Decimal>(() => new Decimal());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pb::MessageParser<Decimal> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Spark.Connect.Expression.Types.Literal.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public Decimal() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public Decimal(Decimal other) : this() {
              _hasBits0 = other._hasBits0;
              value_ = other.value_;
              precision_ = other.precision_;
              scale_ = other.scale_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public Decimal Clone() {
              return new Decimal(this);
            }

            /// <summary>Field number for the "value" field.</summary>
            public const int ValueFieldNumber = 1;
            private string value_ = "";
            /// <summary>
            /// the string representation.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public string Value {
              get { return value_; }
              set {
                value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "precision" field.</summary>
            public const int PrecisionFieldNumber = 2;
            private readonly static int PrecisionDefaultValue = 0;

            private int precision_;
            /// <summary>
            /// The maximum number of digits allowed in the value.
            /// the maximum precision is 38.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public int Precision {
              get { if ((_hasBits0 & 1) != 0) { return precision_; } else { return PrecisionDefaultValue; } }
              set {
                _hasBits0 |= 1;
                precision_ = value;
              }
            }
            /// <summary>Gets whether the "precision" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool HasPrecision {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "precision" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void ClearPrecision() {
              _hasBits0 &= ~1;
            }

            /// <summary>Field number for the "scale" field.</summary>
            public const int ScaleFieldNumber = 3;
            private readonly static int ScaleDefaultValue = 0;

            private int scale_;
            /// <summary>
            /// declared scale of decimal literal
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public int Scale {
              get { if ((_hasBits0 & 2) != 0) { return scale_; } else { return ScaleDefaultValue; } }
              set {
                _hasBits0 |= 2;
                scale_ = value;
              }
            }
            /// <summary>Gets whether the "scale" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool HasScale {
              get { return (_hasBits0 & 2) != 0; }
            }
            /// <summary>Clears the value of the "scale" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void ClearScale() {
              _hasBits0 &= ~2;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override bool Equals(object other) {
              return Equals(other as Decimal);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool Equals(Decimal other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Value != other.Value) return false;
              if (Precision != other.Precision) return false;
              if (Scale != other.Scale) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override int GetHashCode() {
              int hash = 1;
              if (Value.Length != 0) hash ^= Value.GetHashCode();
              if (HasPrecision) hash ^= Precision.GetHashCode();
              if (HasScale) hash ^= Scale.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (Value.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Value);
              }
              if (HasPrecision) {
                output.WriteRawTag(16);
                output.WriteInt32(Precision);
              }
              if (HasScale) {
                output.WriteRawTag(24);
                output.WriteInt32(Scale);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (Value.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Value);
              }
              if (HasPrecision) {
                output.WriteRawTag(16);
                output.WriteInt32(Precision);
              }
              if (HasScale) {
                output.WriteRawTag(24);
                output.WriteInt32(Scale);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public int CalculateSize() {
              int size = 0;
              if (Value.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
              }
              if (HasPrecision) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Precision);
              }
              if (HasScale) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Scale);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(Decimal other) {
              if (other == null) {
                return;
              }
              if (other.Value.Length != 0) {
                Value = other.Value;
              }
              if (other.HasPrecision) {
                Precision = other.Precision;
              }
              if (other.HasScale) {
                Scale = other.Scale;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Value = input.ReadString();
                    break;
                  }
                  case 16: {
                    Precision = input.ReadInt32();
                    break;
                  }
                  case 24: {
                    Scale = input.ReadInt32();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    Value = input.ReadString();
                    break;
                  }
                  case 16: {
                    Precision = input.ReadInt32();
                    break;
                  }
                  case 24: {
                    Scale = input.ReadInt32();
                    break;
                  }
                }
              }
            }
            #endif

          }

          public sealed partial class CalendarInterval : pb::IMessage<CalendarInterval>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<CalendarInterval> _parser = new pb::MessageParser<CalendarInterval>(() => new CalendarInterval());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pb::MessageParser<CalendarInterval> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Spark.Connect.Expression.Types.Literal.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public CalendarInterval() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public CalendarInterval(CalendarInterval other) : this() {
              months_ = other.months_;
              days_ = other.days_;
              microseconds_ = other.microseconds_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public CalendarInterval Clone() {
              return new CalendarInterval(this);
            }

            /// <summary>Field number for the "months" field.</summary>
            public const int MonthsFieldNumber = 1;
            private int months_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public int Months {
              get { return months_; }
              set {
                months_ = value;
              }
            }

            /// <summary>Field number for the "days" field.</summary>
            public const int DaysFieldNumber = 2;
            private int days_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public int Days {
              get { return days_; }
              set {
                days_ = value;
              }
            }

            /// <summary>Field number for the "microseconds" field.</summary>
            public const int MicrosecondsFieldNumber = 3;
            private long microseconds_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public long Microseconds {
              get { return microseconds_; }
              set {
                microseconds_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override bool Equals(object other) {
              return Equals(other as CalendarInterval);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool Equals(CalendarInterval other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Months != other.Months) return false;
              if (Days != other.Days) return false;
              if (Microseconds != other.Microseconds) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override int GetHashCode() {
              int hash = 1;
              if (Months != 0) hash ^= Months.GetHashCode();
              if (Days != 0) hash ^= Days.GetHashCode();
              if (Microseconds != 0L) hash ^= Microseconds.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (Months != 0) {
                output.WriteRawTag(8);
                output.WriteInt32(Months);
              }
              if (Days != 0) {
                output.WriteRawTag(16);
                output.WriteInt32(Days);
              }
              if (Microseconds != 0L) {
                output.WriteRawTag(24);
                output.WriteInt64(Microseconds);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (Months != 0) {
                output.WriteRawTag(8);
                output.WriteInt32(Months);
              }
              if (Days != 0) {
                output.WriteRawTag(16);
                output.WriteInt32(Days);
              }
              if (Microseconds != 0L) {
                output.WriteRawTag(24);
                output.WriteInt64(Microseconds);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public int CalculateSize() {
              int size = 0;
              if (Months != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Months);
              }
              if (Days != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Days);
              }
              if (Microseconds != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Microseconds);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(CalendarInterval other) {
              if (other == null) {
                return;
              }
              if (other.Months != 0) {
                Months = other.Months;
              }
              if (other.Days != 0) {
                Days = other.Days;
              }
              if (other.Microseconds != 0L) {
                Microseconds = other.Microseconds;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Months = input.ReadInt32();
                    break;
                  }
                  case 16: {
                    Days = input.ReadInt32();
                    break;
                  }
                  case 24: {
                    Microseconds = input.ReadInt64();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 8: {
                    Months = input.ReadInt32();
                    break;
                  }
                  case 16: {
                    Days = input.ReadInt32();
                    break;
                  }
                  case 24: {
                    Microseconds = input.ReadInt64();
                    break;
                  }
                }
              }
            }
            #endif

          }

          public sealed partial class Array : pb::IMessage<Array>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Array> _parser = new pb::MessageParser<Array>(() => new Array());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pb::MessageParser<Array> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Spark.Connect.Expression.Types.Literal.Descriptor.NestedTypes[2]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public Array() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public Array(Array other) : this() {
              elementType_ = other.elementType_ != null ? other.elementType_.Clone() : null;
              elements_ = other.elements_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public Array Clone() {
              return new Array(this);
            }

            /// <summary>Field number for the "element_type" field.</summary>
            public const int ElementTypeFieldNumber = 1;
            private global::Spark.Connect.DataType elementType_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public global::Spark.Connect.DataType ElementType {
              get { return elementType_; }
              set {
                elementType_ = value;
              }
            }

            /// <summary>Field number for the "elements" field.</summary>
            public const int ElementsFieldNumber = 2;
            private static readonly pb::FieldCodec<global::Spark.Connect.Expression.Types.Literal> _repeated_elements_codec
                = pb::FieldCodec.ForMessage(18, global::Spark.Connect.Expression.Types.Literal.Parser);
            private readonly pbc::RepeatedField<global::Spark.Connect.Expression.Types.Literal> elements_ = new pbc::RepeatedField<global::Spark.Connect.Expression.Types.Literal>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public pbc::RepeatedField<global::Spark.Connect.Expression.Types.Literal> Elements {
              get { return elements_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override bool Equals(object other) {
              return Equals(other as Array);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool Equals(Array other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(ElementType, other.ElementType)) return false;
              if(!elements_.Equals(other.elements_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override int GetHashCode() {
              int hash = 1;
              if (elementType_ != null) hash ^= ElementType.GetHashCode();
              hash ^= elements_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (elementType_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(ElementType);
              }
              elements_.WriteTo(output, _repeated_elements_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (elementType_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(ElementType);
              }
              elements_.WriteTo(ref output, _repeated_elements_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public int CalculateSize() {
              int size = 0;
              if (elementType_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ElementType);
              }
              size += elements_.CalculateSize(_repeated_elements_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(Array other) {
              if (other == null) {
                return;
              }
              if (other.elementType_ != null) {
                if (elementType_ == null) {
                  ElementType = new global::Spark.Connect.DataType();
                }
                ElementType.MergeFrom(other.ElementType);
              }
              elements_.Add(other.elements_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (elementType_ == null) {
                      ElementType = new global::Spark.Connect.DataType();
                    }
                    input.ReadMessage(ElementType);
                    break;
                  }
                  case 18: {
                    elements_.AddEntriesFrom(input, _repeated_elements_codec);
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    if (elementType_ == null) {
                      ElementType = new global::Spark.Connect.DataType();
                    }
                    input.ReadMessage(ElementType);
                    break;
                  }
                  case 18: {
                    elements_.AddEntriesFrom(ref input, _repeated_elements_codec);
                    break;
                  }
                }
              }
            }
            #endif

          }

        }
        #endregion

      }

      /// <summary>
      /// An unresolved attribute that is not explicitly bound to a specific column, but the column
      /// is resolved during analysis by name.
      /// </summary>
      public sealed partial class UnresolvedAttribute : pb::IMessage<UnresolvedAttribute>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<UnresolvedAttribute> _parser = new pb::MessageParser<UnresolvedAttribute>(() => new UnresolvedAttribute());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<UnresolvedAttribute> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spark.Connect.Expression.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public UnresolvedAttribute() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public UnresolvedAttribute(UnresolvedAttribute other) : this() {
          _hasBits0 = other._hasBits0;
          unparsedIdentifier_ = other.unparsedIdentifier_;
          planId_ = other.planId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public UnresolvedAttribute Clone() {
          return new UnresolvedAttribute(this);
        }

        /// <summary>Field number for the "unparsed_identifier" field.</summary>
        public const int UnparsedIdentifierFieldNumber = 1;
        private string unparsedIdentifier_ = "";
        /// <summary>
        /// (Required) An identifier that will be parsed by Catalyst parser. This should follow the
        /// Spark SQL identifier syntax.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string UnparsedIdentifier {
          get { return unparsedIdentifier_; }
          set {
            unparsedIdentifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "plan_id" field.</summary>
        public const int PlanIdFieldNumber = 2;
        private readonly static long PlanIdDefaultValue = 0L;

        private long planId_;
        /// <summary>
        /// (Optional) The id of corresponding connect plan.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long PlanId {
          get { if ((_hasBits0 & 1) != 0) { return planId_; } else { return PlanIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            planId_ = value;
          }
        }
        /// <summary>Gets whether the "plan_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasPlanId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "plan_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearPlanId() {
          _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as UnresolvedAttribute);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(UnresolvedAttribute other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (UnparsedIdentifier != other.UnparsedIdentifier) return false;
          if (PlanId != other.PlanId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (UnparsedIdentifier.Length != 0) hash ^= UnparsedIdentifier.GetHashCode();
          if (HasPlanId) hash ^= PlanId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (UnparsedIdentifier.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(UnparsedIdentifier);
          }
          if (HasPlanId) {
            output.WriteRawTag(16);
            output.WriteInt64(PlanId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (UnparsedIdentifier.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(UnparsedIdentifier);
          }
          if (HasPlanId) {
            output.WriteRawTag(16);
            output.WriteInt64(PlanId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (UnparsedIdentifier.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(UnparsedIdentifier);
          }
          if (HasPlanId) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlanId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(UnresolvedAttribute other) {
          if (other == null) {
            return;
          }
          if (other.UnparsedIdentifier.Length != 0) {
            UnparsedIdentifier = other.UnparsedIdentifier;
          }
          if (other.HasPlanId) {
            PlanId = other.PlanId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                UnparsedIdentifier = input.ReadString();
                break;
              }
              case 16: {
                PlanId = input.ReadInt64();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                UnparsedIdentifier = input.ReadString();
                break;
              }
              case 16: {
                PlanId = input.ReadInt64();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// An unresolved function is not explicitly bound to one explicit function, but the function
      /// is resolved during analysis following Sparks name resolution rules.
      /// </summary>
      public sealed partial class UnresolvedFunction : pb::IMessage<UnresolvedFunction>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<UnresolvedFunction> _parser = new pb::MessageParser<UnresolvedFunction>(() => new UnresolvedFunction());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<UnresolvedFunction> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spark.Connect.Expression.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public UnresolvedFunction() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public UnresolvedFunction(UnresolvedFunction other) : this() {
          functionName_ = other.functionName_;
          arguments_ = other.arguments_.Clone();
          isDistinct_ = other.isDistinct_;
          isUserDefinedFunction_ = other.isUserDefinedFunction_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public UnresolvedFunction Clone() {
          return new UnresolvedFunction(this);
        }

        /// <summary>Field number for the "function_name" field.</summary>
        public const int FunctionNameFieldNumber = 1;
        private string functionName_ = "";
        /// <summary>
        /// (Required) name (or unparsed name for user defined function) for the unresolved function.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string FunctionName {
          get { return functionName_; }
          set {
            functionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "arguments" field.</summary>
        public const int ArgumentsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Spark.Connect.Expression> _repeated_arguments_codec
            = pb::FieldCodec.ForMessage(18, global::Spark.Connect.Expression.Parser);
        private readonly pbc::RepeatedField<global::Spark.Connect.Expression> arguments_ = new pbc::RepeatedField<global::Spark.Connect.Expression>();
        /// <summary>
        /// (Optional) Function arguments. Empty arguments are allowed.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<global::Spark.Connect.Expression> Arguments {
          get { return arguments_; }
        }

        /// <summary>Field number for the "is_distinct" field.</summary>
        public const int IsDistinctFieldNumber = 3;
        private bool isDistinct_;
        /// <summary>
        /// (Required) Indicate if this function should be applied on distinct values.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool IsDistinct {
          get { return isDistinct_; }
          set {
            isDistinct_ = value;
          }
        }

        /// <summary>Field number for the "is_user_defined_function" field.</summary>
        public const int IsUserDefinedFunctionFieldNumber = 4;
        private bool isUserDefinedFunction_;
        /// <summary>
        /// (Required) Indicate if this is a user defined function.
        ///
        /// When it is not a user defined function, Connect will use the function name directly.
        /// When it is a user defined function, Connect will parse the function name first.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool IsUserDefinedFunction {
          get { return isUserDefinedFunction_; }
          set {
            isUserDefinedFunction_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as UnresolvedFunction);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(UnresolvedFunction other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FunctionName != other.FunctionName) return false;
          if(!arguments_.Equals(other.arguments_)) return false;
          if (IsDistinct != other.IsDistinct) return false;
          if (IsUserDefinedFunction != other.IsUserDefinedFunction) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (FunctionName.Length != 0) hash ^= FunctionName.GetHashCode();
          hash ^= arguments_.GetHashCode();
          if (IsDistinct != false) hash ^= IsDistinct.GetHashCode();
          if (IsUserDefinedFunction != false) hash ^= IsUserDefinedFunction.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (FunctionName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(FunctionName);
          }
          arguments_.WriteTo(output, _repeated_arguments_codec);
          if (IsDistinct != false) {
            output.WriteRawTag(24);
            output.WriteBool(IsDistinct);
          }
          if (IsUserDefinedFunction != false) {
            output.WriteRawTag(32);
            output.WriteBool(IsUserDefinedFunction);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (FunctionName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(FunctionName);
          }
          arguments_.WriteTo(ref output, _repeated_arguments_codec);
          if (IsDistinct != false) {
            output.WriteRawTag(24);
            output.WriteBool(IsDistinct);
          }
          if (IsUserDefinedFunction != false) {
            output.WriteRawTag(32);
            output.WriteBool(IsUserDefinedFunction);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (FunctionName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FunctionName);
          }
          size += arguments_.CalculateSize(_repeated_arguments_codec);
          if (IsDistinct != false) {
            size += 1 + 1;
          }
          if (IsUserDefinedFunction != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(UnresolvedFunction other) {
          if (other == null) {
            return;
          }
          if (other.FunctionName.Length != 0) {
            FunctionName = other.FunctionName;
          }
          arguments_.Add(other.arguments_);
          if (other.IsDistinct != false) {
            IsDistinct = other.IsDistinct;
          }
          if (other.IsUserDefinedFunction != false) {
            IsUserDefinedFunction = other.IsUserDefinedFunction;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                FunctionName = input.ReadString();
                break;
              }
              case 18: {
                arguments_.AddEntriesFrom(input, _repeated_arguments_codec);
                break;
              }
              case 24: {
                IsDistinct = input.ReadBool();
                break;
              }
              case 32: {
                IsUserDefinedFunction = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                FunctionName = input.ReadString();
                break;
              }
              case 18: {
                arguments_.AddEntriesFrom(ref input, _repeated_arguments_codec);
                break;
              }
              case 24: {
                IsDistinct = input.ReadBool();
                break;
              }
              case 32: {
                IsUserDefinedFunction = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Expression as string.
      /// </summary>
      public sealed partial class ExpressionString : pb::IMessage<ExpressionString>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ExpressionString> _parser = new pb::MessageParser<ExpressionString>(() => new ExpressionString());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<ExpressionString> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spark.Connect.Expression.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ExpressionString() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ExpressionString(ExpressionString other) : this() {
          expression_ = other.expression_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ExpressionString Clone() {
          return new ExpressionString(this);
        }

        /// <summary>Field number for the "expression" field.</summary>
        public const int ExpressionFieldNumber = 1;
        private string expression_ = "";
        /// <summary>
        /// (Required) A SQL expression that will be parsed by Catalyst parser.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Expression {
          get { return expression_; }
          set {
            expression_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as ExpressionString);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(ExpressionString other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Expression != other.Expression) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Expression.Length != 0) hash ^= Expression.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Expression.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Expression);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Expression.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Expression);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Expression.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Expression);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(ExpressionString other) {
          if (other == null) {
            return;
          }
          if (other.Expression.Length != 0) {
            Expression = other.Expression;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Expression = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Expression = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// UnresolvedStar is used to expand all the fields of a relation or struct.
      /// </summary>
      public sealed partial class UnresolvedStar : pb::IMessage<UnresolvedStar>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<UnresolvedStar> _parser = new pb::MessageParser<UnresolvedStar>(() => new UnresolvedStar());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<UnresolvedStar> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spark.Connect.Expression.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public UnresolvedStar() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public UnresolvedStar(UnresolvedStar other) : this() {
          unparsedTarget_ = other.unparsedTarget_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public UnresolvedStar Clone() {
          return new UnresolvedStar(this);
        }

        /// <summary>Field number for the "unparsed_target" field.</summary>
        public const int UnparsedTargetFieldNumber = 1;
        private readonly static string UnparsedTargetDefaultValue = "";

        private string unparsedTarget_;
        /// <summary>
        /// (Optional) The target of the expansion.
        ///
        /// If set, it should end with '.*' and will be parsed by 'parseAttributeName'
        /// in the server side.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string UnparsedTarget {
          get { return unparsedTarget_ ?? UnparsedTargetDefaultValue; }
          set {
            unparsedTarget_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "unparsed_target" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasUnparsedTarget {
          get { return unparsedTarget_ != null; }
        }
        /// <summary>Clears the value of the "unparsed_target" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearUnparsedTarget() {
          unparsedTarget_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as UnresolvedStar);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(UnresolvedStar other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (UnparsedTarget != other.UnparsedTarget) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (HasUnparsedTarget) hash ^= UnparsedTarget.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasUnparsedTarget) {
            output.WriteRawTag(10);
            output.WriteString(UnparsedTarget);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasUnparsedTarget) {
            output.WriteRawTag(10);
            output.WriteString(UnparsedTarget);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (HasUnparsedTarget) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(UnparsedTarget);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(UnresolvedStar other) {
          if (other == null) {
            return;
          }
          if (other.HasUnparsedTarget) {
            UnparsedTarget = other.UnparsedTarget;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                UnparsedTarget = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                UnparsedTarget = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Represents all of the input attributes to a given relational operator, for example in
      /// "SELECT `(id)?+.+` FROM ...".
      /// </summary>
      public sealed partial class UnresolvedRegex : pb::IMessage<UnresolvedRegex>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<UnresolvedRegex> _parser = new pb::MessageParser<UnresolvedRegex>(() => new UnresolvedRegex());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<UnresolvedRegex> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spark.Connect.Expression.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public UnresolvedRegex() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public UnresolvedRegex(UnresolvedRegex other) : this() {
          _hasBits0 = other._hasBits0;
          colName_ = other.colName_;
          planId_ = other.planId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public UnresolvedRegex Clone() {
          return new UnresolvedRegex(this);
        }

        /// <summary>Field number for the "col_name" field.</summary>
        public const int ColNameFieldNumber = 1;
        private string colName_ = "";
        /// <summary>
        /// (Required) The column name used to extract column with regex.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string ColName {
          get { return colName_; }
          set {
            colName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "plan_id" field.</summary>
        public const int PlanIdFieldNumber = 2;
        private readonly static long PlanIdDefaultValue = 0L;

        private long planId_;
        /// <summary>
        /// (Optional) The id of corresponding connect plan.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long PlanId {
          get { if ((_hasBits0 & 1) != 0) { return planId_; } else { return PlanIdDefaultValue; } }
          set {
            _hasBits0 |= 1;
            planId_ = value;
          }
        }
        /// <summary>Gets whether the "plan_id" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasPlanId {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "plan_id" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearPlanId() {
          _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as UnresolvedRegex);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(UnresolvedRegex other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ColName != other.ColName) return false;
          if (PlanId != other.PlanId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (ColName.Length != 0) hash ^= ColName.GetHashCode();
          if (HasPlanId) hash ^= PlanId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (ColName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ColName);
          }
          if (HasPlanId) {
            output.WriteRawTag(16);
            output.WriteInt64(PlanId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (ColName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ColName);
          }
          if (HasPlanId) {
            output.WriteRawTag(16);
            output.WriteInt64(PlanId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (ColName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ColName);
          }
          if (HasPlanId) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlanId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(UnresolvedRegex other) {
          if (other == null) {
            return;
          }
          if (other.ColName.Length != 0) {
            ColName = other.ColName;
          }
          if (other.HasPlanId) {
            PlanId = other.PlanId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                ColName = input.ReadString();
                break;
              }
              case 16: {
                PlanId = input.ReadInt64();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                ColName = input.ReadString();
                break;
              }
              case 16: {
                PlanId = input.ReadInt64();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Extracts a value or values from an Expression
      /// </summary>
      public sealed partial class UnresolvedExtractValue : pb::IMessage<UnresolvedExtractValue>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<UnresolvedExtractValue> _parser = new pb::MessageParser<UnresolvedExtractValue>(() => new UnresolvedExtractValue());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<UnresolvedExtractValue> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spark.Connect.Expression.Descriptor.NestedTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public UnresolvedExtractValue() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public UnresolvedExtractValue(UnresolvedExtractValue other) : this() {
          child_ = other.child_ != null ? other.child_.Clone() : null;
          extraction_ = other.extraction_ != null ? other.extraction_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public UnresolvedExtractValue Clone() {
          return new UnresolvedExtractValue(this);
        }

        /// <summary>Field number for the "child" field.</summary>
        public const int ChildFieldNumber = 1;
        private global::Spark.Connect.Expression child_;
        /// <summary>
        /// (Required) The expression to extract value from, can be
        /// Map, Array, Struct or array of Structs.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spark.Connect.Expression Child {
          get { return child_; }
          set {
            child_ = value;
          }
        }

        /// <summary>Field number for the "extraction" field.</summary>
        public const int ExtractionFieldNumber = 2;
        private global::Spark.Connect.Expression extraction_;
        /// <summary>
        /// (Required) The expression to describe the extraction, can be
        /// key of Map, index of Array, field name of Struct.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spark.Connect.Expression Extraction {
          get { return extraction_; }
          set {
            extraction_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as UnresolvedExtractValue);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(UnresolvedExtractValue other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Child, other.Child)) return false;
          if (!object.Equals(Extraction, other.Extraction)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (child_ != null) hash ^= Child.GetHashCode();
          if (extraction_ != null) hash ^= Extraction.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (child_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Child);
          }
          if (extraction_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Extraction);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (child_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Child);
          }
          if (extraction_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Extraction);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (child_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Child);
          }
          if (extraction_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Extraction);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(UnresolvedExtractValue other) {
          if (other == null) {
            return;
          }
          if (other.child_ != null) {
            if (child_ == null) {
              Child = new global::Spark.Connect.Expression();
            }
            Child.MergeFrom(other.Child);
          }
          if (other.extraction_ != null) {
            if (extraction_ == null) {
              Extraction = new global::Spark.Connect.Expression();
            }
            Extraction.MergeFrom(other.Extraction);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (child_ == null) {
                  Child = new global::Spark.Connect.Expression();
                }
                input.ReadMessage(Child);
                break;
              }
              case 18: {
                if (extraction_ == null) {
                  Extraction = new global::Spark.Connect.Expression();
                }
                input.ReadMessage(Extraction);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (child_ == null) {
                  Child = new global::Spark.Connect.Expression();
                }
                input.ReadMessage(Child);
                break;
              }
              case 18: {
                if (extraction_ == null) {
                  Extraction = new global::Spark.Connect.Expression();
                }
                input.ReadMessage(Extraction);
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Add, replace or drop a field of `StructType` expression by name.
      /// </summary>
      public sealed partial class UpdateFields : pb::IMessage<UpdateFields>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<UpdateFields> _parser = new pb::MessageParser<UpdateFields>(() => new UpdateFields());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<UpdateFields> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spark.Connect.Expression.Descriptor.NestedTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public UpdateFields() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public UpdateFields(UpdateFields other) : this() {
          structExpression_ = other.structExpression_ != null ? other.structExpression_.Clone() : null;
          fieldName_ = other.fieldName_;
          valueExpression_ = other.valueExpression_ != null ? other.valueExpression_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public UpdateFields Clone() {
          return new UpdateFields(this);
        }

        /// <summary>Field number for the "struct_expression" field.</summary>
        public const int StructExpressionFieldNumber = 1;
        private global::Spark.Connect.Expression structExpression_;
        /// <summary>
        /// (Required) The struct expression.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spark.Connect.Expression StructExpression {
          get { return structExpression_; }
          set {
            structExpression_ = value;
          }
        }

        /// <summary>Field number for the "field_name" field.</summary>
        public const int FieldNameFieldNumber = 2;
        private string fieldName_ = "";
        /// <summary>
        /// (Required) The field name.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string FieldName {
          get { return fieldName_; }
          set {
            fieldName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "value_expression" field.</summary>
        public const int ValueExpressionFieldNumber = 3;
        private global::Spark.Connect.Expression valueExpression_;
        /// <summary>
        /// (Optional) The expression to add or replace.
        ///
        /// When not set, it means this field will be dropped.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spark.Connect.Expression ValueExpression {
          get { return valueExpression_; }
          set {
            valueExpression_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as UpdateFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(UpdateFields other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(StructExpression, other.StructExpression)) return false;
          if (FieldName != other.FieldName) return false;
          if (!object.Equals(ValueExpression, other.ValueExpression)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (structExpression_ != null) hash ^= StructExpression.GetHashCode();
          if (FieldName.Length != 0) hash ^= FieldName.GetHashCode();
          if (valueExpression_ != null) hash ^= ValueExpression.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (structExpression_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(StructExpression);
          }
          if (FieldName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(FieldName);
          }
          if (valueExpression_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(ValueExpression);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (structExpression_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(StructExpression);
          }
          if (FieldName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(FieldName);
          }
          if (valueExpression_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(ValueExpression);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (structExpression_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(StructExpression);
          }
          if (FieldName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FieldName);
          }
          if (valueExpression_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ValueExpression);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(UpdateFields other) {
          if (other == null) {
            return;
          }
          if (other.structExpression_ != null) {
            if (structExpression_ == null) {
              StructExpression = new global::Spark.Connect.Expression();
            }
            StructExpression.MergeFrom(other.StructExpression);
          }
          if (other.FieldName.Length != 0) {
            FieldName = other.FieldName;
          }
          if (other.valueExpression_ != null) {
            if (valueExpression_ == null) {
              ValueExpression = new global::Spark.Connect.Expression();
            }
            ValueExpression.MergeFrom(other.ValueExpression);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (structExpression_ == null) {
                  StructExpression = new global::Spark.Connect.Expression();
                }
                input.ReadMessage(StructExpression);
                break;
              }
              case 18: {
                FieldName = input.ReadString();
                break;
              }
              case 26: {
                if (valueExpression_ == null) {
                  ValueExpression = new global::Spark.Connect.Expression();
                }
                input.ReadMessage(ValueExpression);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (structExpression_ == null) {
                  StructExpression = new global::Spark.Connect.Expression();
                }
                input.ReadMessage(StructExpression);
                break;
              }
              case 18: {
                FieldName = input.ReadString();
                break;
              }
              case 26: {
                if (valueExpression_ == null) {
                  ValueExpression = new global::Spark.Connect.Expression();
                }
                input.ReadMessage(ValueExpression);
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Alias : pb::IMessage<Alias>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Alias> _parser = new pb::MessageParser<Alias>(() => new Alias());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Alias> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spark.Connect.Expression.Descriptor.NestedTypes[11]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Alias() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Alias(Alias other) : this() {
          expr_ = other.expr_ != null ? other.expr_.Clone() : null;
          name_ = other.name_.Clone();
          metadata_ = other.metadata_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Alias Clone() {
          return new Alias(this);
        }

        /// <summary>Field number for the "expr" field.</summary>
        public const int ExprFieldNumber = 1;
        private global::Spark.Connect.Expression expr_;
        /// <summary>
        /// (Required) The expression that alias will be added on.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spark.Connect.Expression Expr {
          get { return expr_; }
          set {
            expr_ = value;
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private static readonly pb::FieldCodec<string> _repeated_name_codec
            = pb::FieldCodec.ForString(18);
        private readonly pbc::RepeatedField<string> name_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// (Required) a list of name parts for the alias.
        ///
        /// Scalar columns only has one name that presents.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<string> Name {
          get { return name_; }
        }

        /// <summary>Field number for the "metadata" field.</summary>
        public const int MetadataFieldNumber = 3;
        private readonly static string MetadataDefaultValue = "";

        private string metadata_;
        /// <summary>
        /// (Optional) Alias metadata expressed as a JSON map.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Metadata {
          get { return metadata_ ?? MetadataDefaultValue; }
          set {
            metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "metadata" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasMetadata {
          get { return metadata_ != null; }
        }
        /// <summary>Clears the value of the "metadata" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearMetadata() {
          metadata_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Alias);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Alias other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Expr, other.Expr)) return false;
          if(!name_.Equals(other.name_)) return false;
          if (Metadata != other.Metadata) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (expr_ != null) hash ^= Expr.GetHashCode();
          hash ^= name_.GetHashCode();
          if (HasMetadata) hash ^= Metadata.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (expr_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Expr);
          }
          name_.WriteTo(output, _repeated_name_codec);
          if (HasMetadata) {
            output.WriteRawTag(26);
            output.WriteString(Metadata);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (expr_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Expr);
          }
          name_.WriteTo(ref output, _repeated_name_codec);
          if (HasMetadata) {
            output.WriteRawTag(26);
            output.WriteString(Metadata);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (expr_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Expr);
          }
          size += name_.CalculateSize(_repeated_name_codec);
          if (HasMetadata) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Metadata);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Alias other) {
          if (other == null) {
            return;
          }
          if (other.expr_ != null) {
            if (expr_ == null) {
              Expr = new global::Spark.Connect.Expression();
            }
            Expr.MergeFrom(other.Expr);
          }
          name_.Add(other.name_);
          if (other.HasMetadata) {
            Metadata = other.Metadata;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (expr_ == null) {
                  Expr = new global::Spark.Connect.Expression();
                }
                input.ReadMessage(Expr);
                break;
              }
              case 18: {
                name_.AddEntriesFrom(input, _repeated_name_codec);
                break;
              }
              case 26: {
                Metadata = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (expr_ == null) {
                  Expr = new global::Spark.Connect.Expression();
                }
                input.ReadMessage(Expr);
                break;
              }
              case 18: {
                name_.AddEntriesFrom(ref input, _repeated_name_codec);
                break;
              }
              case 26: {
                Metadata = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class LambdaFunction : pb::IMessage<LambdaFunction>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<LambdaFunction> _parser = new pb::MessageParser<LambdaFunction>(() => new LambdaFunction());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<LambdaFunction> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spark.Connect.Expression.Descriptor.NestedTypes[12]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public LambdaFunction() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public LambdaFunction(LambdaFunction other) : this() {
          function_ = other.function_ != null ? other.function_.Clone() : null;
          arguments_ = other.arguments_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public LambdaFunction Clone() {
          return new LambdaFunction(this);
        }

        /// <summary>Field number for the "function" field.</summary>
        public const int FunctionFieldNumber = 1;
        private global::Spark.Connect.Expression function_;
        /// <summary>
        /// (Required) The lambda function.
        ///
        /// The function body should use 'UnresolvedAttribute' as arguments, the sever side will
        /// replace 'UnresolvedAttribute' with 'UnresolvedNamedLambdaVariable'.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Spark.Connect.Expression Function {
          get { return function_; }
          set {
            function_ = value;
          }
        }

        /// <summary>Field number for the "arguments" field.</summary>
        public const int ArgumentsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Spark.Connect.Expression.Types.UnresolvedNamedLambdaVariable> _repeated_arguments_codec
            = pb::FieldCodec.ForMessage(18, global::Spark.Connect.Expression.Types.UnresolvedNamedLambdaVariable.Parser);
        private readonly pbc::RepeatedField<global::Spark.Connect.Expression.Types.UnresolvedNamedLambdaVariable> arguments_ = new pbc::RepeatedField<global::Spark.Connect.Expression.Types.UnresolvedNamedLambdaVariable>();
        /// <summary>
        /// (Required) Function variables. Must contains 1 ~ 3 variables.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<global::Spark.Connect.Expression.Types.UnresolvedNamedLambdaVariable> Arguments {
          get { return arguments_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as LambdaFunction);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(LambdaFunction other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Function, other.Function)) return false;
          if(!arguments_.Equals(other.arguments_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (function_ != null) hash ^= Function.GetHashCode();
          hash ^= arguments_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (function_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Function);
          }
          arguments_.WriteTo(output, _repeated_arguments_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (function_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Function);
          }
          arguments_.WriteTo(ref output, _repeated_arguments_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (function_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Function);
          }
          size += arguments_.CalculateSize(_repeated_arguments_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(LambdaFunction other) {
          if (other == null) {
            return;
          }
          if (other.function_ != null) {
            if (function_ == null) {
              Function = new global::Spark.Connect.Expression();
            }
            Function.MergeFrom(other.Function);
          }
          arguments_.Add(other.arguments_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (function_ == null) {
                  Function = new global::Spark.Connect.Expression();
                }
                input.ReadMessage(Function);
                break;
              }
              case 18: {
                arguments_.AddEntriesFrom(input, _repeated_arguments_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (function_ == null) {
                  Function = new global::Spark.Connect.Expression();
                }
                input.ReadMessage(Function);
                break;
              }
              case 18: {
                arguments_.AddEntriesFrom(ref input, _repeated_arguments_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class UnresolvedNamedLambdaVariable : pb::IMessage<UnresolvedNamedLambdaVariable>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<UnresolvedNamedLambdaVariable> _parser = new pb::MessageParser<UnresolvedNamedLambdaVariable>(() => new UnresolvedNamedLambdaVariable());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<UnresolvedNamedLambdaVariable> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Spark.Connect.Expression.Descriptor.NestedTypes[13]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public UnresolvedNamedLambdaVariable() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public UnresolvedNamedLambdaVariable(UnresolvedNamedLambdaVariable other) : this() {
          nameParts_ = other.nameParts_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public UnresolvedNamedLambdaVariable Clone() {
          return new UnresolvedNamedLambdaVariable(this);
        }

        /// <summary>Field number for the "name_parts" field.</summary>
        public const int NamePartsFieldNumber = 1;
        private static readonly pb::FieldCodec<string> _repeated_nameParts_codec
            = pb::FieldCodec.ForString(10);
        private readonly pbc::RepeatedField<string> nameParts_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// (Required) a list of name parts for the variable. Must not be empty.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<string> NameParts {
          get { return nameParts_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as UnresolvedNamedLambdaVariable);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(UnresolvedNamedLambdaVariable other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!nameParts_.Equals(other.nameParts_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= nameParts_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          nameParts_.WriteTo(output, _repeated_nameParts_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          nameParts_.WriteTo(ref output, _repeated_nameParts_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          size += nameParts_.CalculateSize(_repeated_nameParts_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(UnresolvedNamedLambdaVariable other) {
          if (other == null) {
            return;
          }
          nameParts_.Add(other.nameParts_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                nameParts_.AddEntriesFrom(input, _repeated_nameParts_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                nameParts_.AddEntriesFrom(ref input, _repeated_nameParts_codec);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class CommonInlineUserDefinedFunction : pb::IMessage<CommonInlineUserDefinedFunction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CommonInlineUserDefinedFunction> _parser = new pb::MessageParser<CommonInlineUserDefinedFunction>(() => new CommonInlineUserDefinedFunction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CommonInlineUserDefinedFunction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.ExpressionsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CommonInlineUserDefinedFunction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CommonInlineUserDefinedFunction(CommonInlineUserDefinedFunction other) : this() {
      functionName_ = other.functionName_;
      deterministic_ = other.deterministic_;
      arguments_ = other.arguments_.Clone();
      switch (other.FunctionCase) {
        case FunctionOneofCase.PythonUdf:
          PythonUdf = other.PythonUdf.Clone();
          break;
        case FunctionOneofCase.ScalarScalaUdf:
          ScalarScalaUdf = other.ScalarScalaUdf.Clone();
          break;
        case FunctionOneofCase.JavaUdf:
          JavaUdf = other.JavaUdf.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CommonInlineUserDefinedFunction Clone() {
      return new CommonInlineUserDefinedFunction(this);
    }

    /// <summary>Field number for the "function_name" field.</summary>
    public const int FunctionNameFieldNumber = 1;
    private string functionName_ = "";
    /// <summary>
    /// (Required) Name of the user-defined function.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FunctionName {
      get { return functionName_; }
      set {
        functionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deterministic" field.</summary>
    public const int DeterministicFieldNumber = 2;
    private bool deterministic_;
    /// <summary>
    /// (Optional) Indicate if the user-defined function is deterministic.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Deterministic {
      get { return deterministic_; }
      set {
        deterministic_ = value;
      }
    }

    /// <summary>Field number for the "arguments" field.</summary>
    public const int ArgumentsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Spark.Connect.Expression> _repeated_arguments_codec
        = pb::FieldCodec.ForMessage(26, global::Spark.Connect.Expression.Parser);
    private readonly pbc::RepeatedField<global::Spark.Connect.Expression> arguments_ = new pbc::RepeatedField<global::Spark.Connect.Expression>();
    /// <summary>
    /// (Optional) Function arguments. Empty arguments are allowed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Spark.Connect.Expression> Arguments {
      get { return arguments_; }
    }

    /// <summary>Field number for the "python_udf" field.</summary>
    public const int PythonUdfFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.PythonUDF PythonUdf {
      get { return functionCase_ == FunctionOneofCase.PythonUdf ? (global::Spark.Connect.PythonUDF) function_ : null; }
      set {
        function_ = value;
        functionCase_ = value == null ? FunctionOneofCase.None : FunctionOneofCase.PythonUdf;
      }
    }

    /// <summary>Field number for the "scalar_scala_udf" field.</summary>
    public const int ScalarScalaUdfFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.ScalarScalaUDF ScalarScalaUdf {
      get { return functionCase_ == FunctionOneofCase.ScalarScalaUdf ? (global::Spark.Connect.ScalarScalaUDF) function_ : null; }
      set {
        function_ = value;
        functionCase_ = value == null ? FunctionOneofCase.None : FunctionOneofCase.ScalarScalaUdf;
      }
    }

    /// <summary>Field number for the "java_udf" field.</summary>
    public const int JavaUdfFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.JavaUDF JavaUdf {
      get { return functionCase_ == FunctionOneofCase.JavaUdf ? (global::Spark.Connect.JavaUDF) function_ : null; }
      set {
        function_ = value;
        functionCase_ = value == null ? FunctionOneofCase.None : FunctionOneofCase.JavaUdf;
      }
    }

    private object function_;
    /// <summary>Enum of possible cases for the "function" oneof.</summary>
    public enum FunctionOneofCase {
      None = 0,
      PythonUdf = 4,
      ScalarScalaUdf = 5,
      JavaUdf = 6,
    }
    private FunctionOneofCase functionCase_ = FunctionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FunctionOneofCase FunctionCase {
      get { return functionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFunction() {
      functionCase_ = FunctionOneofCase.None;
      function_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CommonInlineUserDefinedFunction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CommonInlineUserDefinedFunction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FunctionName != other.FunctionName) return false;
      if (Deterministic != other.Deterministic) return false;
      if(!arguments_.Equals(other.arguments_)) return false;
      if (!object.Equals(PythonUdf, other.PythonUdf)) return false;
      if (!object.Equals(ScalarScalaUdf, other.ScalarScalaUdf)) return false;
      if (!object.Equals(JavaUdf, other.JavaUdf)) return false;
      if (FunctionCase != other.FunctionCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (FunctionName.Length != 0) hash ^= FunctionName.GetHashCode();
      if (Deterministic != false) hash ^= Deterministic.GetHashCode();
      hash ^= arguments_.GetHashCode();
      if (functionCase_ == FunctionOneofCase.PythonUdf) hash ^= PythonUdf.GetHashCode();
      if (functionCase_ == FunctionOneofCase.ScalarScalaUdf) hash ^= ScalarScalaUdf.GetHashCode();
      if (functionCase_ == FunctionOneofCase.JavaUdf) hash ^= JavaUdf.GetHashCode();
      hash ^= (int) functionCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FunctionName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FunctionName);
      }
      if (Deterministic != false) {
        output.WriteRawTag(16);
        output.WriteBool(Deterministic);
      }
      arguments_.WriteTo(output, _repeated_arguments_codec);
      if (functionCase_ == FunctionOneofCase.PythonUdf) {
        output.WriteRawTag(34);
        output.WriteMessage(PythonUdf);
      }
      if (functionCase_ == FunctionOneofCase.ScalarScalaUdf) {
        output.WriteRawTag(42);
        output.WriteMessage(ScalarScalaUdf);
      }
      if (functionCase_ == FunctionOneofCase.JavaUdf) {
        output.WriteRawTag(50);
        output.WriteMessage(JavaUdf);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FunctionName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FunctionName);
      }
      if (Deterministic != false) {
        output.WriteRawTag(16);
        output.WriteBool(Deterministic);
      }
      arguments_.WriteTo(ref output, _repeated_arguments_codec);
      if (functionCase_ == FunctionOneofCase.PythonUdf) {
        output.WriteRawTag(34);
        output.WriteMessage(PythonUdf);
      }
      if (functionCase_ == FunctionOneofCase.ScalarScalaUdf) {
        output.WriteRawTag(42);
        output.WriteMessage(ScalarScalaUdf);
      }
      if (functionCase_ == FunctionOneofCase.JavaUdf) {
        output.WriteRawTag(50);
        output.WriteMessage(JavaUdf);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (FunctionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FunctionName);
      }
      if (Deterministic != false) {
        size += 1 + 1;
      }
      size += arguments_.CalculateSize(_repeated_arguments_codec);
      if (functionCase_ == FunctionOneofCase.PythonUdf) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PythonUdf);
      }
      if (functionCase_ == FunctionOneofCase.ScalarScalaUdf) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScalarScalaUdf);
      }
      if (functionCase_ == FunctionOneofCase.JavaUdf) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(JavaUdf);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CommonInlineUserDefinedFunction other) {
      if (other == null) {
        return;
      }
      if (other.FunctionName.Length != 0) {
        FunctionName = other.FunctionName;
      }
      if (other.Deterministic != false) {
        Deterministic = other.Deterministic;
      }
      arguments_.Add(other.arguments_);
      switch (other.FunctionCase) {
        case FunctionOneofCase.PythonUdf:
          if (PythonUdf == null) {
            PythonUdf = new global::Spark.Connect.PythonUDF();
          }
          PythonUdf.MergeFrom(other.PythonUdf);
          break;
        case FunctionOneofCase.ScalarScalaUdf:
          if (ScalarScalaUdf == null) {
            ScalarScalaUdf = new global::Spark.Connect.ScalarScalaUDF();
          }
          ScalarScalaUdf.MergeFrom(other.ScalarScalaUdf);
          break;
        case FunctionOneofCase.JavaUdf:
          if (JavaUdf == null) {
            JavaUdf = new global::Spark.Connect.JavaUDF();
          }
          JavaUdf.MergeFrom(other.JavaUdf);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FunctionName = input.ReadString();
            break;
          }
          case 16: {
            Deterministic = input.ReadBool();
            break;
          }
          case 26: {
            arguments_.AddEntriesFrom(input, _repeated_arguments_codec);
            break;
          }
          case 34: {
            global::Spark.Connect.PythonUDF subBuilder = new global::Spark.Connect.PythonUDF();
            if (functionCase_ == FunctionOneofCase.PythonUdf) {
              subBuilder.MergeFrom(PythonUdf);
            }
            input.ReadMessage(subBuilder);
            PythonUdf = subBuilder;
            break;
          }
          case 42: {
            global::Spark.Connect.ScalarScalaUDF subBuilder = new global::Spark.Connect.ScalarScalaUDF();
            if (functionCase_ == FunctionOneofCase.ScalarScalaUdf) {
              subBuilder.MergeFrom(ScalarScalaUdf);
            }
            input.ReadMessage(subBuilder);
            ScalarScalaUdf = subBuilder;
            break;
          }
          case 50: {
            global::Spark.Connect.JavaUDF subBuilder = new global::Spark.Connect.JavaUDF();
            if (functionCase_ == FunctionOneofCase.JavaUdf) {
              subBuilder.MergeFrom(JavaUdf);
            }
            input.ReadMessage(subBuilder);
            JavaUdf = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FunctionName = input.ReadString();
            break;
          }
          case 16: {
            Deterministic = input.ReadBool();
            break;
          }
          case 26: {
            arguments_.AddEntriesFrom(ref input, _repeated_arguments_codec);
            break;
          }
          case 34: {
            global::Spark.Connect.PythonUDF subBuilder = new global::Spark.Connect.PythonUDF();
            if (functionCase_ == FunctionOneofCase.PythonUdf) {
              subBuilder.MergeFrom(PythonUdf);
            }
            input.ReadMessage(subBuilder);
            PythonUdf = subBuilder;
            break;
          }
          case 42: {
            global::Spark.Connect.ScalarScalaUDF subBuilder = new global::Spark.Connect.ScalarScalaUDF();
            if (functionCase_ == FunctionOneofCase.ScalarScalaUdf) {
              subBuilder.MergeFrom(ScalarScalaUdf);
            }
            input.ReadMessage(subBuilder);
            ScalarScalaUdf = subBuilder;
            break;
          }
          case 50: {
            global::Spark.Connect.JavaUDF subBuilder = new global::Spark.Connect.JavaUDF();
            if (functionCase_ == FunctionOneofCase.JavaUdf) {
              subBuilder.MergeFrom(JavaUdf);
            }
            input.ReadMessage(subBuilder);
            JavaUdf = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PythonUDF : pb::IMessage<PythonUDF>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PythonUDF> _parser = new pb::MessageParser<PythonUDF>(() => new PythonUDF());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PythonUDF> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.ExpressionsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PythonUDF() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PythonUDF(PythonUDF other) : this() {
      outputType_ = other.outputType_ != null ? other.outputType_.Clone() : null;
      evalType_ = other.evalType_;
      command_ = other.command_;
      pythonVer_ = other.pythonVer_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PythonUDF Clone() {
      return new PythonUDF(this);
    }

    /// <summary>Field number for the "output_type" field.</summary>
    public const int OutputTypeFieldNumber = 1;
    private global::Spark.Connect.DataType outputType_;
    /// <summary>
    /// (Required) Output type of the Python UDF
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.DataType OutputType {
      get { return outputType_; }
      set {
        outputType_ = value;
      }
    }

    /// <summary>Field number for the "eval_type" field.</summary>
    public const int EvalTypeFieldNumber = 2;
    private int evalType_;
    /// <summary>
    /// (Required) EvalType of the Python UDF
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EvalType {
      get { return evalType_; }
      set {
        evalType_ = value;
      }
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 3;
    private pb::ByteString command_ = pb::ByteString.Empty;
    /// <summary>
    /// (Required) The encoded commands of the Python UDF
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Command {
      get { return command_; }
      set {
        command_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "python_ver" field.</summary>
    public const int PythonVerFieldNumber = 4;
    private string pythonVer_ = "";
    /// <summary>
    /// (Required) Python version being used in the client.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PythonVer {
      get { return pythonVer_; }
      set {
        pythonVer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PythonUDF);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PythonUDF other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(OutputType, other.OutputType)) return false;
      if (EvalType != other.EvalType) return false;
      if (Command != other.Command) return false;
      if (PythonVer != other.PythonVer) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (outputType_ != null) hash ^= OutputType.GetHashCode();
      if (EvalType != 0) hash ^= EvalType.GetHashCode();
      if (Command.Length != 0) hash ^= Command.GetHashCode();
      if (PythonVer.Length != 0) hash ^= PythonVer.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (outputType_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OutputType);
      }
      if (EvalType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EvalType);
      }
      if (Command.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Command);
      }
      if (PythonVer.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PythonVer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (outputType_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OutputType);
      }
      if (EvalType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EvalType);
      }
      if (Command.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Command);
      }
      if (PythonVer.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PythonVer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (outputType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutputType);
      }
      if (EvalType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EvalType);
      }
      if (Command.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Command);
      }
      if (PythonVer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PythonVer);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PythonUDF other) {
      if (other == null) {
        return;
      }
      if (other.outputType_ != null) {
        if (outputType_ == null) {
          OutputType = new global::Spark.Connect.DataType();
        }
        OutputType.MergeFrom(other.OutputType);
      }
      if (other.EvalType != 0) {
        EvalType = other.EvalType;
      }
      if (other.Command.Length != 0) {
        Command = other.Command;
      }
      if (other.PythonVer.Length != 0) {
        PythonVer = other.PythonVer;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (outputType_ == null) {
              OutputType = new global::Spark.Connect.DataType();
            }
            input.ReadMessage(OutputType);
            break;
          }
          case 16: {
            EvalType = input.ReadInt32();
            break;
          }
          case 26: {
            Command = input.ReadBytes();
            break;
          }
          case 34: {
            PythonVer = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (outputType_ == null) {
              OutputType = new global::Spark.Connect.DataType();
            }
            input.ReadMessage(OutputType);
            break;
          }
          case 16: {
            EvalType = input.ReadInt32();
            break;
          }
          case 26: {
            Command = input.ReadBytes();
            break;
          }
          case 34: {
            PythonVer = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ScalarScalaUDF : pb::IMessage<ScalarScalaUDF>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ScalarScalaUDF> _parser = new pb::MessageParser<ScalarScalaUDF>(() => new ScalarScalaUDF());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ScalarScalaUDF> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.ExpressionsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ScalarScalaUDF() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ScalarScalaUDF(ScalarScalaUDF other) : this() {
      payload_ = other.payload_;
      inputTypes_ = other.inputTypes_.Clone();
      outputType_ = other.outputType_ != null ? other.outputType_.Clone() : null;
      nullable_ = other.nullable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ScalarScalaUDF Clone() {
      return new ScalarScalaUDF(this);
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 1;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    /// <summary>
    /// (Required) Serialized JVM object containing UDF definition, input encoders and output encoder
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "inputTypes" field.</summary>
    public const int InputTypesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Spark.Connect.DataType> _repeated_inputTypes_codec
        = pb::FieldCodec.ForMessage(18, global::Spark.Connect.DataType.Parser);
    private readonly pbc::RepeatedField<global::Spark.Connect.DataType> inputTypes_ = new pbc::RepeatedField<global::Spark.Connect.DataType>();
    /// <summary>
    /// (Optional) Input type(s) of the UDF
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Spark.Connect.DataType> InputTypes {
      get { return inputTypes_; }
    }

    /// <summary>Field number for the "outputType" field.</summary>
    public const int OutputTypeFieldNumber = 3;
    private global::Spark.Connect.DataType outputType_;
    /// <summary>
    /// (Required) Output type of the UDF
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.DataType OutputType {
      get { return outputType_; }
      set {
        outputType_ = value;
      }
    }

    /// <summary>Field number for the "nullable" field.</summary>
    public const int NullableFieldNumber = 4;
    private bool nullable_;
    /// <summary>
    /// (Required) True if the UDF can return null value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Nullable {
      get { return nullable_; }
      set {
        nullable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ScalarScalaUDF);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ScalarScalaUDF other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Payload != other.Payload) return false;
      if(!inputTypes_.Equals(other.inputTypes_)) return false;
      if (!object.Equals(OutputType, other.OutputType)) return false;
      if (Nullable != other.Nullable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      hash ^= inputTypes_.GetHashCode();
      if (outputType_ != null) hash ^= OutputType.GetHashCode();
      if (Nullable != false) hash ^= Nullable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Payload.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Payload);
      }
      inputTypes_.WriteTo(output, _repeated_inputTypes_codec);
      if (outputType_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(OutputType);
      }
      if (Nullable != false) {
        output.WriteRawTag(32);
        output.WriteBool(Nullable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Payload.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Payload);
      }
      inputTypes_.WriteTo(ref output, _repeated_inputTypes_codec);
      if (outputType_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(OutputType);
      }
      if (Nullable != false) {
        output.WriteRawTag(32);
        output.WriteBool(Nullable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      size += inputTypes_.CalculateSize(_repeated_inputTypes_codec);
      if (outputType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutputType);
      }
      if (Nullable != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ScalarScalaUDF other) {
      if (other == null) {
        return;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      inputTypes_.Add(other.inputTypes_);
      if (other.outputType_ != null) {
        if (outputType_ == null) {
          OutputType = new global::Spark.Connect.DataType();
        }
        OutputType.MergeFrom(other.OutputType);
      }
      if (other.Nullable != false) {
        Nullable = other.Nullable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Payload = input.ReadBytes();
            break;
          }
          case 18: {
            inputTypes_.AddEntriesFrom(input, _repeated_inputTypes_codec);
            break;
          }
          case 26: {
            if (outputType_ == null) {
              OutputType = new global::Spark.Connect.DataType();
            }
            input.ReadMessage(OutputType);
            break;
          }
          case 32: {
            Nullable = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Payload = input.ReadBytes();
            break;
          }
          case 18: {
            inputTypes_.AddEntriesFrom(ref input, _repeated_inputTypes_codec);
            break;
          }
          case 26: {
            if (outputType_ == null) {
              OutputType = new global::Spark.Connect.DataType();
            }
            input.ReadMessage(OutputType);
            break;
          }
          case 32: {
            Nullable = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class JavaUDF : pb::IMessage<JavaUDF>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JavaUDF> _parser = new pb::MessageParser<JavaUDF>(() => new JavaUDF());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<JavaUDF> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Spark.Connect.ExpressionsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JavaUDF() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JavaUDF(JavaUDF other) : this() {
      className_ = other.className_;
      outputType_ = other.outputType_ != null ? other.outputType_.Clone() : null;
      aggregate_ = other.aggregate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JavaUDF Clone() {
      return new JavaUDF(this);
    }

    /// <summary>Field number for the "class_name" field.</summary>
    public const int ClassNameFieldNumber = 1;
    private string className_ = "";
    /// <summary>
    /// (Required) Fully qualified name of Java class
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClassName {
      get { return className_; }
      set {
        className_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "output_type" field.</summary>
    public const int OutputTypeFieldNumber = 2;
    private global::Spark.Connect.DataType outputType_;
    /// <summary>
    /// (Optional) Output type of the Java UDF
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Spark.Connect.DataType OutputType {
      get { return outputType_; }
      set {
        outputType_ = value;
      }
    }

    /// <summary>Field number for the "aggregate" field.</summary>
    public const int AggregateFieldNumber = 3;
    private bool aggregate_;
    /// <summary>
    /// (Required) Indicate if the Java user-defined function is an aggregate function
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Aggregate {
      get { return aggregate_; }
      set {
        aggregate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as JavaUDF);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(JavaUDF other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClassName != other.ClassName) return false;
      if (!object.Equals(OutputType, other.OutputType)) return false;
      if (Aggregate != other.Aggregate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (ClassName.Length != 0) hash ^= ClassName.GetHashCode();
      if (outputType_ != null) hash ^= OutputType.GetHashCode();
      if (Aggregate != false) hash ^= Aggregate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ClassName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClassName);
      }
      if (outputType_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OutputType);
      }
      if (Aggregate != false) {
        output.WriteRawTag(24);
        output.WriteBool(Aggregate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ClassName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClassName);
      }
      if (outputType_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OutputType);
      }
      if (Aggregate != false) {
        output.WriteRawTag(24);
        output.WriteBool(Aggregate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (ClassName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassName);
      }
      if (outputType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutputType);
      }
      if (Aggregate != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(JavaUDF other) {
      if (other == null) {
        return;
      }
      if (other.ClassName.Length != 0) {
        ClassName = other.ClassName;
      }
      if (other.outputType_ != null) {
        if (outputType_ == null) {
          OutputType = new global::Spark.Connect.DataType();
        }
        OutputType.MergeFrom(other.OutputType);
      }
      if (other.Aggregate != false) {
        Aggregate = other.Aggregate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClassName = input.ReadString();
            break;
          }
          case 18: {
            if (outputType_ == null) {
              OutputType = new global::Spark.Connect.DataType();
            }
            input.ReadMessage(OutputType);
            break;
          }
          case 24: {
            Aggregate = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ClassName = input.ReadString();
            break;
          }
          case 18: {
            if (outputType_ == null) {
              OutputType = new global::Spark.Connect.DataType();
            }
            input.ReadMessage(OutputType);
            break;
          }
          case 24: {
            Aggregate = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
